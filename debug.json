{
  "configs": [
    {
      "languageOptions": {
        "ecmaVersion": "latest",
        "parserOptions": {},
        "sourceType": "module"
      },
      "linterOptions": { "reportUnusedDisableDirectives": 1 },
      "name": "eslint/defaults/languages"
    },
    {
      "ignores": ["**/node_modules/", ".git/"],
      "name": "eslint/defaults/ignores"
    },
    { "files": ["**/*.js", "**/*.mjs"], "name": "eslint/defaults/files" },
    {
      "files": ["**/*.cjs"],
      "languageOptions": { "ecmaVersion": "latest", "sourceType": "commonjs" },
      "name": "eslint/defaults/files-cjs"
    },
    { "ignores": ["src/generated/**"] },
    {
      "name": "@repo/eslint-config/base__gitignore",
      "ignores": [
        "**/logs",
        "**/*.log",
        "**/npm-debug.log*",
        "**/yarn-debug.log*",
        "**/yarn-error.log*",
        "**/lerna-debug.log*",
        "**/.pnpm-debug.log*",
        "**/report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json",
        "**/pids",
        "**/*.pid",
        "**/*.seed",
        "**/*.pid.lock",
        "**/lib-cov",
        "**/coverage",
        "**/*.lcov",
        "**/.nyc_output",
        "**/.grunt",
        "**/bower_components",
        "**/.lock-wscript",
        "build/Release",
        "**/node_modules/",
        "**/jspm_packages/",
        "**/web_modules/",
        "**/*.tsbuildinfo",
        "**/.npm",
        "**/.eslintcache",
        "**/.stylelintcache",
        "**/.rpt2_cache/",
        "**/.rts2_cache_cjs/",
        "**/.rts2_cache_es/",
        "**/.rts2_cache_umd/",
        "**/.node_repl_history",
        "**/*.tgz",
        "**/.yarn-integrity",
        "**/.env",
        "**/.env.development.local",
        "**/.env.test.local",
        "**/.env.production.local",
        "**/.env.local",
        "**/.cache",
        "**/.parcel-cache",
        "**/.next",
        "**/out",
        "**/.nuxt",
        "**/dist",
        "**/.cache/",
        ".vuepress/dist",
        "**/.temp",
        "**/.cache",
        "**/.vitepress/dist",
        "**/.vitepress/cache",
        "**/.docusaurus",
        "**/.serverless/",
        "**/.fusebox/",
        "**/.dynamodb/",
        "**/.tern-port",
        "**/.vscode-test",
        ".yarn/cache",
        ".yarn/unplugged",
        ".yarn/build-state.yml",
        ".yarn/install-state.gz",
        "**/.pnp.*",
        "**/eslint-typegen.d.ts",
        "config-schema.json"
      ]
    },
    {
      "files": ["**/*.{js,jsx,mjs,cjs}"],
      "rules": {
        "constructor-super": "error",
        "for-direction": "error",
        "getter-return": "error",
        "no-async-promise-executor": "error",
        "no-case-declarations": "error",
        "no-class-assign": "error",
        "no-compare-neg-zero": "error",
        "no-cond-assign": "error",
        "no-const-assign": "error",
        "no-constant-binary-expression": "error",
        "no-constant-condition": "error",
        "no-control-regex": "error",
        "no-debugger": "error",
        "no-delete-var": "error",
        "no-dupe-args": "error",
        "no-dupe-class-members": "error",
        "no-dupe-else-if": "error",
        "no-dupe-keys": "error",
        "no-duplicate-case": "error",
        "no-empty": "error",
        "no-empty-character-class": "error",
        "no-empty-pattern": "error",
        "no-empty-static-block": "error",
        "no-ex-assign": "error",
        "no-extra-boolean-cast": "error",
        "no-fallthrough": "error",
        "no-func-assign": "error",
        "no-global-assign": "error",
        "no-import-assign": "error",
        "no-invalid-regexp": "error",
        "no-irregular-whitespace": "error",
        "no-loss-of-precision": "error",
        "no-misleading-character-class": "error",
        "no-new-native-nonconstructor": "error",
        "no-nonoctal-decimal-escape": "error",
        "no-obj-calls": "error",
        "no-octal": "error",
        "no-prototype-builtins": "error",
        "no-redeclare": "error",
        "no-regex-spaces": "error",
        "no-self-assign": "error",
        "no-setter-return": "error",
        "no-shadow-restricted-names": "error",
        "no-sparse-arrays": "error",
        "no-this-before-super": "error",
        "no-undef": "error",
        "no-unexpected-multiline": "error",
        "no-unreachable": "error",
        "no-unsafe-finally": "error",
        "no-unsafe-negation": "error",
        "no-unsafe-optional-chaining": "error",
        "no-unused-labels": "error",
        "no-unused-private-class-members": "error",
        "no-unused-vars": "error",
        "no-useless-backreference": "error",
        "no-useless-catch": "error",
        "no-useless-escape": "error",
        "no-with": "error",
        "require-yield": "error",
        "use-isnan": "error",
        "valid-typeof": "error"
      },
      "name": "@repo/eslint-config/base"
    },
    {
      "name": "@repo/eslint-config/base__@virtual-live-lab/eslint-config/stylistic__config-prettier",
      "rules": {
        "curly": 0,
        "no-unexpected-multiline": 0,
        "@stylistic/lines-around-comment": 0,
        "@stylistic/max-len": 0,
        "@stylistic/no-confusing-arrow": 0,
        "@stylistic/no-mixed-operators": 0,
        "@stylistic/no-tabs": 0,
        "@stylistic/quotes": 0,
        "@stylistic/js/lines-around-comment": 0,
        "@stylistic/js/max-len": 0,
        "@stylistic/js/no-confusing-arrow": 0,
        "@stylistic/js/no-mixed-operators": 0,
        "@stylistic/js/no-tabs": 0,
        "@stylistic/js/quotes": 0,
        "@stylistic/ts/lines-around-comment": 0,
        "@stylistic/ts/quotes": 0,
        "@typescript-eslint/lines-around-comment": 0,
        "@typescript-eslint/quotes": 0,
        "babel/quotes": 0,
        "unicorn/template-indent": 0,
        "vue/html-self-closing": 0,
        "vue/max-len": 0,
        "@babel/object-curly-spacing": "off",
        "@babel/semi": "off",
        "@stylistic/array-bracket-newline": "off",
        "@stylistic/array-bracket-spacing": "off",
        "@stylistic/array-element-newline": "off",
        "@stylistic/arrow-parens": "off",
        "@stylistic/arrow-spacing": "off",
        "@stylistic/block-spacing": "off",
        "@stylistic/brace-style": "off",
        "@stylistic/comma-dangle": "off",
        "@stylistic/comma-spacing": "off",
        "@stylistic/comma-style": "off",
        "@stylistic/computed-property-spacing": "off",
        "@stylistic/dot-location": "off",
        "@stylistic/eol-last": "off",
        "@stylistic/func-call-spacing": "off",
        "@stylistic/function-call-argument-newline": "off",
        "@stylistic/function-call-spacing": "off",
        "@stylistic/function-paren-newline": "off",
        "@stylistic/generator-star-spacing": "off",
        "@stylistic/implicit-arrow-linebreak": "off",
        "@stylistic/indent": "off",
        "@stylistic/jsx-quotes": "off",
        "@stylistic/key-spacing": "off",
        "@stylistic/keyword-spacing": "off",
        "@stylistic/linebreak-style": "off",
        "@stylistic/max-statements-per-line": "off",
        "@stylistic/multiline-ternary": "off",
        "@stylistic/new-parens": "off",
        "@stylistic/newline-per-chained-call": "off",
        "@stylistic/no-extra-parens": "off",
        "@stylistic/no-extra-semi": "off",
        "@stylistic/no-floating-decimal": "off",
        "@stylistic/no-mixed-spaces-and-tabs": "off",
        "@stylistic/no-multi-spaces": "off",
        "@stylistic/no-multiple-empty-lines": "off",
        "@stylistic/no-trailing-spaces": "off",
        "@stylistic/no-whitespace-before-property": "off",
        "@stylistic/nonblock-statement-body-position": "off",
        "@stylistic/object-curly-newline": "off",
        "@stylistic/object-curly-spacing": "off",
        "@stylistic/object-property-newline": "off",
        "@stylistic/one-var-declaration-per-line": "off",
        "@stylistic/operator-linebreak": "off",
        "@stylistic/padded-blocks": "off",
        "@stylistic/quote-props": "off",
        "@stylistic/rest-spread-spacing": "off",
        "@stylistic/semi": "off",
        "@stylistic/semi-spacing": "off",
        "@stylistic/semi-style": "off",
        "@stylistic/space-before-blocks": "off",
        "@stylistic/space-before-function-paren": "off",
        "@stylistic/space-in-parens": "off",
        "@stylistic/space-infix-ops": "off",
        "@stylistic/space-unary-ops": "off",
        "@stylistic/switch-colon-spacing": "off",
        "@stylistic/template-curly-spacing": "off",
        "@stylistic/template-tag-spacing": "off",
        "@stylistic/wrap-iife": "off",
        "@stylistic/wrap-regex": "off",
        "@stylistic/yield-star-spacing": "off",
        "@stylistic/member-delimiter-style": "off",
        "@stylistic/type-annotation-spacing": "off",
        "@stylistic/jsx-child-element-spacing": "off",
        "@stylistic/jsx-closing-bracket-location": "off",
        "@stylistic/jsx-closing-tag-location": "off",
        "@stylistic/jsx-curly-newline": "off",
        "@stylistic/jsx-curly-spacing": "off",
        "@stylistic/jsx-equals-spacing": "off",
        "@stylistic/jsx-first-prop-new-line": "off",
        "@stylistic/jsx-indent": "off",
        "@stylistic/jsx-indent-props": "off",
        "@stylistic/jsx-max-props-per-line": "off",
        "@stylistic/jsx-newline": "off",
        "@stylistic/jsx-one-expression-per-line": "off",
        "@stylistic/jsx-props-no-multi-spaces": "off",
        "@stylistic/jsx-tag-spacing": "off",
        "@stylistic/jsx-wrap-multilines": "off",
        "@stylistic/indent-binary-ops": "off",
        "@stylistic/type-generic-spacing": "off",
        "@stylistic/type-named-tuple-spacing": "off",
        "@stylistic/js/array-bracket-newline": "off",
        "@stylistic/js/array-bracket-spacing": "off",
        "@stylistic/js/array-element-newline": "off",
        "@stylistic/js/arrow-parens": "off",
        "@stylistic/js/arrow-spacing": "off",
        "@stylistic/js/block-spacing": "off",
        "@stylistic/js/brace-style": "off",
        "@stylistic/js/comma-dangle": "off",
        "@stylistic/js/comma-spacing": "off",
        "@stylistic/js/comma-style": "off",
        "@stylistic/js/computed-property-spacing": "off",
        "@stylistic/js/dot-location": "off",
        "@stylistic/js/eol-last": "off",
        "@stylistic/js/func-call-spacing": "off",
        "@stylistic/js/function-call-argument-newline": "off",
        "@stylistic/js/function-call-spacing": "off",
        "@stylistic/js/function-paren-newline": "off",
        "@stylistic/js/generator-star-spacing": "off",
        "@stylistic/js/implicit-arrow-linebreak": "off",
        "@stylistic/js/indent": "off",
        "@stylistic/js/jsx-quotes": "off",
        "@stylistic/js/key-spacing": "off",
        "@stylistic/js/keyword-spacing": "off",
        "@stylistic/js/linebreak-style": "off",
        "@stylistic/js/max-statements-per-line": "off",
        "@stylistic/js/multiline-ternary": "off",
        "@stylistic/js/new-parens": "off",
        "@stylistic/js/newline-per-chained-call": "off",
        "@stylistic/js/no-extra-parens": "off",
        "@stylistic/js/no-extra-semi": "off",
        "@stylistic/js/no-floating-decimal": "off",
        "@stylistic/js/no-mixed-spaces-and-tabs": "off",
        "@stylistic/js/no-multi-spaces": "off",
        "@stylistic/js/no-multiple-empty-lines": "off",
        "@stylistic/js/no-trailing-spaces": "off",
        "@stylistic/js/no-whitespace-before-property": "off",
        "@stylistic/js/nonblock-statement-body-position": "off",
        "@stylistic/js/object-curly-newline": "off",
        "@stylistic/js/object-curly-spacing": "off",
        "@stylistic/js/object-property-newline": "off",
        "@stylistic/js/one-var-declaration-per-line": "off",
        "@stylistic/js/operator-linebreak": "off",
        "@stylistic/js/padded-blocks": "off",
        "@stylistic/js/quote-props": "off",
        "@stylistic/js/rest-spread-spacing": "off",
        "@stylistic/js/semi": "off",
        "@stylistic/js/semi-spacing": "off",
        "@stylistic/js/semi-style": "off",
        "@stylistic/js/space-before-blocks": "off",
        "@stylistic/js/space-before-function-paren": "off",
        "@stylistic/js/space-in-parens": "off",
        "@stylistic/js/space-infix-ops": "off",
        "@stylistic/js/space-unary-ops": "off",
        "@stylistic/js/switch-colon-spacing": "off",
        "@stylistic/js/template-curly-spacing": "off",
        "@stylistic/js/template-tag-spacing": "off",
        "@stylistic/js/wrap-iife": "off",
        "@stylistic/js/wrap-regex": "off",
        "@stylistic/js/yield-star-spacing": "off",
        "@stylistic/ts/block-spacing": "off",
        "@stylistic/ts/brace-style": "off",
        "@stylistic/ts/comma-dangle": "off",
        "@stylistic/ts/comma-spacing": "off",
        "@stylistic/ts/func-call-spacing": "off",
        "@stylistic/ts/function-call-spacing": "off",
        "@stylistic/ts/indent": "off",
        "@stylistic/ts/key-spacing": "off",
        "@stylistic/ts/keyword-spacing": "off",
        "@stylistic/ts/member-delimiter-style": "off",
        "@stylistic/ts/no-extra-parens": "off",
        "@stylistic/ts/no-extra-semi": "off",
        "@stylistic/ts/object-curly-spacing": "off",
        "@stylistic/ts/semi": "off",
        "@stylistic/ts/space-before-blocks": "off",
        "@stylistic/ts/space-before-function-paren": "off",
        "@stylistic/ts/space-infix-ops": "off",
        "@stylistic/ts/type-annotation-spacing": "off",
        "@stylistic/jsx/jsx-child-element-spacing": "off",
        "@stylistic/jsx/jsx-closing-bracket-location": "off",
        "@stylistic/jsx/jsx-closing-tag-location": "off",
        "@stylistic/jsx/jsx-curly-newline": "off",
        "@stylistic/jsx/jsx-curly-spacing": "off",
        "@stylistic/jsx/jsx-equals-spacing": "off",
        "@stylistic/jsx/jsx-first-prop-new-line": "off",
        "@stylistic/jsx/jsx-indent": "off",
        "@stylistic/jsx/jsx-indent-props": "off",
        "@stylistic/jsx/jsx-max-props-per-line": "off",
        "@typescript-eslint/block-spacing": "off",
        "@typescript-eslint/brace-style": "off",
        "@typescript-eslint/comma-dangle": "off",
        "@typescript-eslint/comma-spacing": "off",
        "@typescript-eslint/func-call-spacing": "off",
        "@typescript-eslint/indent": "off",
        "@typescript-eslint/key-spacing": "off",
        "@typescript-eslint/keyword-spacing": "off",
        "@typescript-eslint/member-delimiter-style": "off",
        "@typescript-eslint/no-extra-parens": "off",
        "@typescript-eslint/no-extra-semi": "off",
        "@typescript-eslint/object-curly-spacing": "off",
        "@typescript-eslint/semi": "off",
        "@typescript-eslint/space-before-blocks": "off",
        "@typescript-eslint/space-before-function-paren": "off",
        "@typescript-eslint/space-infix-ops": "off",
        "@typescript-eslint/type-annotation-spacing": "off",
        "babel/object-curly-spacing": "off",
        "babel/semi": "off",
        "flowtype/boolean-style": "off",
        "flowtype/delimiter-dangle": "off",
        "flowtype/generic-spacing": "off",
        "flowtype/object-type-curly-spacing": "off",
        "flowtype/object-type-delimiter": "off",
        "flowtype/quotes": "off",
        "flowtype/semi": "off",
        "flowtype/space-after-type-colon": "off",
        "flowtype/space-before-generic-bracket": "off",
        "flowtype/space-before-type-colon": "off",
        "flowtype/union-intersection-spacing": "off",
        "react/jsx-child-element-spacing": "off",
        "react/jsx-closing-bracket-location": "off",
        "react/jsx-closing-tag-location": "off",
        "react/jsx-curly-newline": "off",
        "react/jsx-curly-spacing": "off",
        "react/jsx-equals-spacing": "off",
        "react/jsx-first-prop-new-line": "off",
        "react/jsx-indent": "off",
        "react/jsx-indent-props": "off",
        "react/jsx-max-props-per-line": "off",
        "react/jsx-newline": "off",
        "react/jsx-one-expression-per-line": "off",
        "react/jsx-props-no-multi-spaces": "off",
        "react/jsx-tag-spacing": "off",
        "react/jsx-wrap-multilines": "off",
        "standard/array-bracket-even-spacing": "off",
        "standard/computed-property-even-spacing": "off",
        "standard/object-curly-even-spacing": "off",
        "unicorn/empty-brace-spaces": "off",
        "unicorn/no-nested-ternary": "off",
        "unicorn/number-literal-case": "off",
        "vue/array-bracket-newline": "off",
        "vue/array-bracket-spacing": "off",
        "vue/array-element-newline": "off",
        "vue/arrow-spacing": "off",
        "vue/block-spacing": "off",
        "vue/block-tag-newline": "off",
        "vue/brace-style": "off",
        "vue/comma-dangle": "off",
        "vue/comma-spacing": "off",
        "vue/comma-style": "off",
        "vue/dot-location": "off",
        "vue/func-call-spacing": "off",
        "vue/html-closing-bracket-newline": "off",
        "vue/html-closing-bracket-spacing": "off",
        "vue/html-end-tags": "off",
        "vue/html-indent": "off",
        "vue/html-quotes": "off",
        "vue/key-spacing": "off",
        "vue/keyword-spacing": "off",
        "vue/max-attributes-per-line": "off",
        "vue/multiline-html-element-content-newline": "off",
        "vue/multiline-ternary": "off",
        "vue/mustache-interpolation-spacing": "off",
        "vue/no-extra-parens": "off",
        "vue/no-multi-spaces": "off",
        "vue/no-spaces-around-equal-signs-in-attribute": "off",
        "vue/object-curly-newline": "off",
        "vue/object-curly-spacing": "off",
        "vue/object-property-newline": "off",
        "vue/operator-linebreak": "off",
        "vue/quote-props": "off",
        "vue/script-indent": "off",
        "vue/singleline-html-element-content-newline": "off",
        "vue/space-in-parens": "off",
        "vue/space-infix-ops": "off",
        "vue/space-unary-ops": "off",
        "vue/template-curly-spacing": "off",
        "space-unary-word-ops": "off",
        "generator-star": "off",
        "no-comma-dangle": "off",
        "no-reserved-keys": "off",
        "no-space-before-semi": "off",
        "no-wrap-func": "off",
        "space-after-function-name": "off",
        "space-before-function-parentheses": "off",
        "space-in-brackets": "off",
        "no-arrow-condition": "off",
        "space-after-keywords": "off",
        "space-before-keywords": "off",
        "space-return-throw-case": "off",
        "no-spaced-func": "off",
        "indent-legacy": "off",
        "array-bracket-newline": "off",
        "array-bracket-spacing": "off",
        "array-element-newline": "off",
        "arrow-parens": "off",
        "arrow-spacing": "off",
        "block-spacing": "off",
        "brace-style": "off",
        "comma-dangle": "off",
        "comma-spacing": "off",
        "comma-style": "off",
        "computed-property-spacing": "off",
        "dot-location": "off",
        "eol-last": "off",
        "func-call-spacing": "off",
        "function-call-argument-newline": "off",
        "function-paren-newline": "off",
        "generator-star-spacing": "off",
        "implicit-arrow-linebreak": "off",
        "indent": "off",
        "jsx-quotes": "off",
        "key-spacing": "off",
        "keyword-spacing": "off",
        "linebreak-style": "off",
        "lines-around-comment": 0,
        "max-len": 0,
        "max-statements-per-line": "off",
        "multiline-ternary": "off",
        "new-parens": "off",
        "newline-per-chained-call": "off",
        "no-confusing-arrow": 0,
        "no-extra-parens": "off",
        "no-extra-semi": "off",
        "no-floating-decimal": "off",
        "no-mixed-operators": 0,
        "no-mixed-spaces-and-tabs": "off",
        "no-multi-spaces": "off",
        "no-multiple-empty-lines": "off",
        "no-tabs": 0,
        "no-trailing-spaces": "off",
        "no-whitespace-before-property": "off",
        "nonblock-statement-body-position": "off",
        "object-curly-newline": "off",
        "object-curly-spacing": "off",
        "object-property-newline": "off",
        "one-var-declaration-per-line": "off",
        "operator-linebreak": "off",
        "padded-blocks": "off",
        "quote-props": "off",
        "quotes": 0,
        "rest-spread-spacing": "off",
        "semi": "off",
        "semi-spacing": "off",
        "semi-style": "off",
        "space-before-blocks": "off",
        "space-before-function-paren": "off",
        "space-in-parens": "off",
        "space-infix-ops": "off",
        "space-unary-ops": "off",
        "switch-colon-spacing": "off",
        "template-curly-spacing": "off",
        "template-tag-spacing": "off",
        "wrap-iife": "off",
        "wrap-regex": "off",
        "yield-star-spacing": "off",
        "react/jsx-space-before-closing": "off"
      },
      "files": ["**/*.{ts,tsx,mts,cts}", "**/*.{js,jsx,mjs,cjs}"]
    },
    {
      "plugins": {
        "perfectionist": {
          "rules": {
            "sort-variable-declarations": {
              "defaultOptions": [
                {
                  "fallbackSort": { "type": "unsorted" },
                  "specialCharacters": "keep",
                  "partitionByNewLine": false,
                  "partitionByComment": false,
                  "newlinesBetween": "ignore",
                  "type": "alphabetical",
                  "customGroups": [],
                  "ignoreCase": true,
                  "locales": "en-US",
                  "alphabet": "",
                  "order": "asc",
                  "groups": []
                }
              ],
              "meta": {
                "schema": [
                  {
                    "properties": {
                      "fallbackSort": {
                        "properties": {
                          "order": {
                            "description": "Specifies whether to sort items in ascending or descending order.",
                            "enum": ["asc", "desc"],
                            "type": "string"
                          },
                          "type": {
                            "enum": [
                              "alphabetical",
                              "natural",
                              "line-length",
                              "custom",
                              "unsorted"
                            ],
                            "description": "Specifies the sorting method.",
                            "type": "string"
                          }
                        },
                        "description": "Fallback sort order.",
                        "additionalProperties": false,
                        "minProperties": 1,
                        "type": "object"
                      },
                      "specialCharacters": {
                        "description": "Specifies whether to trim, remove, or keep special characters before sorting.",
                        "enum": ["remove", "trim", "keep"],
                        "type": "string"
                      },
                      "ignoreCase": {
                        "description": "Controls whether sorting should be case-sensitive or not.",
                        "type": "boolean"
                      },
                      "alphabet": {
                        "description": "Used only when the `type` option is set to `'custom'`. Specifies the custom alphabet for sorting.",
                        "type": "string"
                      },
                      "locales": {
                        "oneOf": [
                          { "type": "string" },
                          { "items": { "type": "string" }, "type": "array" }
                        ],
                        "description": "Specifies the sorting locales."
                      },
                      "customGroups": {
                        "items": {
                          "oneOf": [
                            {
                              "properties": {
                                "newlinesInside": {
                                  "description": "Specifies how to handle new lines between members of the custom group.",
                                  "enum": ["always", "never"],
                                  "type": "string"
                                },
                                "fallbackSort": {
                                  "properties": {},
                                  "description": "Fallback sort order.",
                                  "additionalProperties": false,
                                  "minProperties": 1,
                                  "type": "object"
                                },
                                "groupName": {
                                  "description": "Custom group name.",
                                  "type": "string"
                                },
                                "anyOf": {
                                  "items": {
                                    "properties": {
                                      "selector": {
                                        "description": "Selector filter.",
                                        "enum": [
                                          "initialized",
                                          "uninitialized"
                                        ],
                                        "type": "string"
                                      },
                                      "elementNamePattern": {
                                        "oneOf": [
                                          {
                                            "items": {
                                              "oneOf": [
                                                {
                                                  "properties": {
                                                    "pattern": {
                                                      "description": "Regular expression pattern.",
                                                      "type": "string"
                                                    },
                                                    "flags": {
                                                      "description": "Regular expression flags.",
                                                      "type": "string"
                                                    }
                                                  },
                                                  "additionalProperties": false,
                                                  "required": ["pattern"],
                                                  "type": "object"
                                                },
                                                { "type": "string" }
                                              ],
                                              "description": "Regular expression."
                                            },
                                            "type": "array"
                                          },
                                          null
                                        ],
                                        "description": "Regular expression."
                                      }
                                    },
                                    "description": "Custom group.",
                                    "additionalProperties": false,
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              },
                              "description": "Custom group block.",
                              "additionalProperties": false,
                              "required": ["groupName"],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "newlinesInside": {
                                  "description": "Specifies how to handle new lines between members of the custom group.",
                                  "enum": ["always", "never"],
                                  "type": "string"
                                },
                                "fallbackSort": {
                                  "properties": {},
                                  "description": "Fallback sort order.",
                                  "additionalProperties": false,
                                  "minProperties": 1,
                                  "type": "object"
                                },
                                "groupName": {
                                  "description": "Custom group name.",
                                  "type": "string"
                                }
                              },
                              "description": "Custom group.",
                              "additionalProperties": false,
                              "required": ["groupName"],
                              "type": "object"
                            }
                          ]
                        },
                        "description": "Defines custom groups to match specific members.",
                        "type": "array"
                      },
                      "partitionByComment": {
                        "oneOf": [
                          { "type": "boolean" },
                          null,
                          {
                            "properties": {
                              "block": {
                                "description": "Enables specific block comments to separate the nodes.",
                                "oneOf": [null, null]
                              },
                              "line": {
                                "description": "Enables specific line comments to separate the nodes."
                              }
                            },
                            "additionalProperties": false,
                            "minProperties": 1,
                            "type": "object"
                          }
                        ],
                        "description": "Enables the use of comments to separate the nodes into logical groups."
                      },
                      "partitionByNewLine": {
                        "description": "Enables the use of newlines to separate the nodes into logical groups.",
                        "type": "boolean"
                      },
                      "newlinesBetween": {
                        "description": "Specifies how to handle new lines between groups.",
                        "enum": ["ignore", "always", "never"],
                        "type": "string"
                      },
                      "groups": {
                        "items": {
                          "oneOf": [
                            { "type": "string" },
                            { "items": { "type": "string" }, "type": "array" },
                            {
                              "properties": {
                                "commentAbove": {
                                  "description": "Specifies a comment to enforce above the group.",
                                  "type": "string"
                                }
                              },
                              "additionalProperties": false,
                              "minProperties": 1,
                              "type": "object"
                            }
                          ]
                        },
                        "description": "Specifies a list of groups for sorting.",
                        "type": "array"
                      }
                    },
                    "additionalProperties": false,
                    "type": "object"
                  }
                ],
                "messages": {
                  "missedSpacingBetweenVariableDeclarationsMembers": "Missed spacing between \"{{left}}\" and \"{{right}}\".",
                  "unexpectedVariableDeclarationsDependencyOrder": "Expected dependency \"{{right}}\" to come before \"{{nodeDependentOnRight}}\".",
                  "extraSpacingBetweenVariableDeclarationsMembers": "Extra spacing between \"{{left}}\" and \"{{right}}\" objects.",
                  "unexpectedVariableDeclarationsGroupOrder": "Expected \"{{right}}\" ({{rightGroup}}) to come before \"{{left}}\" ({{leftGroup}}).",
                  "unexpectedVariableDeclarationsOrder": "Expected \"{{right}}\" to come before \"{{left}}\"."
                },
                "docs": {
                  "url": "https://perfectionist.dev/rules/sort-variable-declarations",
                  "description": "Enforce sorted variable declarations.",
                  "recommended": true
                },
                "type": "suggestion",
                "fixable": "code"
              }
            },
            "sort-intersection-types": {
              "defaultOptions": [
                {
                  "fallbackSort": { "type": "unsorted" },
                  "specialCharacters": "keep",
                  "newlinesBetween": "ignore",
                  "partitionByComment": false,
                  "partitionByNewLine": false,
                  "type": "alphabetical",
                  "ignoreCase": true,
                  "locales": "en-US",
                  "customGroups": [],
                  "alphabet": "",
                  "order": "asc",
                  "groups": []
                }
              ],
              "meta": {
                "messages": {
                  "missedSpacingBetweenIntersectionTypes": "Missed spacing between \"{{left}}\" and \"{{right}}\".",
                  "extraSpacingBetweenIntersectionTypes": "Extra spacing between \"{{left}}\" and \"{{right}}\" objects.",
                  "unexpectedIntersectionTypesGroupOrder": "Expected \"{{right}}\" ({{rightGroup}}) to come before \"{{left}}\" ({{leftGroup}}).",
                  "unexpectedIntersectionTypesOrder": "Expected \"{{right}}\" to come before \"{{left}}\"."
                },
                "docs": {
                  "url": "https://perfectionist.dev/rules/sort-intersection-types",
                  "description": "Enforce sorted intersection types.",
                  "recommended": true
                },
                "schema": {
                  "items": {
                    "properties": {
                      "customGroups": {
                        "items": {
                          "oneOf": [
                            {
                              "properties": {
                                "newlinesInside": {
                                  "description": "Specifies how to handle new lines between members of the custom group.",
                                  "enum": ["always", "never"],
                                  "type": "string"
                                },
                                "fallbackSort": {
                                  "properties": {},
                                  "description": "Fallback sort order.",
                                  "additionalProperties": false,
                                  "minProperties": 1,
                                  "type": "object"
                                },
                                "groupName": {
                                  "description": "Custom group name.",
                                  "type": "string"
                                },
                                "anyOf": {
                                  "items": {
                                    "properties": {
                                      "selector": {
                                        "description": "Selector filter.",
                                        "enum": [
                                          "intersection",
                                          "conditional",
                                          "function",
                                          "operator",
                                          "keyword",
                                          "literal",
                                          "nullish",
                                          "import",
                                          "object",
                                          "named",
                                          "tuple",
                                          "union"
                                        ],
                                        "type": "string"
                                      }
                                    },
                                    "description": "Custom group.",
                                    "additionalProperties": false,
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              },
                              "description": "Custom group block.",
                              "additionalProperties": false,
                              "required": ["groupName"],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "newlinesInside": {
                                  "description": "Specifies how to handle new lines between members of the custom group.",
                                  "enum": ["always", "never"],
                                  "type": "string"
                                },
                                "fallbackSort": {
                                  "properties": {},
                                  "description": "Fallback sort order.",
                                  "additionalProperties": false,
                                  "minProperties": 1,
                                  "type": "object"
                                },
                                "groupName": {
                                  "description": "Custom group name.",
                                  "type": "string"
                                }
                              },
                              "description": "Custom group.",
                              "additionalProperties": false,
                              "required": ["groupName"],
                              "type": "object"
                            }
                          ]
                        },
                        "description": "Defines custom groups to match specific members.",
                        "type": "array"
                      }
                    },
                    "additionalProperties": false,
                    "type": "object"
                  },
                  "uniqueItems": true,
                  "type": "array"
                },
                "type": "suggestion",
                "fixable": "code"
              }
            },
            "sort-heritage-clauses": {
              "defaultOptions": [
                {
                  "fallbackSort": { "type": "unsorted" },
                  "specialCharacters": "keep",
                  "type": "alphabetical",
                  "ignoreCase": true,
                  "customGroups": {},
                  "locales": "en-US",
                  "alphabet": "",
                  "order": "asc",
                  "groups": []
                }
              ],
              "meta": {
                "schema": [
                  {
                    "properties": {
                      "customGroups": {
                        "additionalProperties": {
                          "oneOf": [
                            { "type": "string" },
                            { "items": { "type": "string" }, "type": "array" }
                          ]
                        },
                        "description": "Specifies custom groups.",
                        "type": "object"
                      }
                    },
                    "additionalProperties": false,
                    "type": "object"
                  }
                ],
                "docs": {
                  "url": "https://perfectionist.dev/rules/sort-heritage-clauses",
                  "description": "Enforce sorted heritage clauses.",
                  "recommended": true
                },
                "messages": {
                  "unexpectedHeritageClausesGroupOrder": "Expected \"{{right}}\" ({{rightGroup}}) to come before \"{{left}}\" ({{leftGroup}}).",
                  "unexpectedHeritageClausesOrder": "Expected \"{{right}}\" to come before \"{{left}}\"."
                },
                "type": "suggestion",
                "fixable": "code"
              }
            },
            "sort-array-includes": {
              "defaultOptions": [
                {
                  "fallbackSort": { "type": "unsorted" },
                  "groupKind": "literals-first",
                  "specialCharacters": "keep",
                  "partitionByComment": false,
                  "partitionByNewLine": false,
                  "newlinesBetween": "ignore",
                  "useConfigurationIf": {},
                  "type": "alphabetical",
                  "ignoreCase": true,
                  "locales": "en-US",
                  "customGroups": [],
                  "alphabet": "",
                  "order": "asc",
                  "groups": []
                }
              ],
              "meta": {
                "messages": {
                  "missedSpacingBetweenArrayIncludesMembers": "Missed spacing between \"{{left}}\" and \"{{right}}\".",
                  "extraSpacingBetweenArrayIncludesMembers": "Extra spacing between \"{{left}}\" and \"{{right}}\" objects.",
                  "unexpectedArrayIncludesGroupOrder": "Expected \"{{right}}\" ({{rightGroup}}) to come before \"{{left}}\" ({{leftGroup}}).",
                  "unexpectedArrayIncludesOrder": "Expected \"{{right}}\" to come before \"{{left}}\"."
                },
                "docs": {
                  "description": "Enforce sorted arrays before include method.",
                  "url": "https://perfectionist.dev/rules/sort-array-includes",
                  "recommended": true
                },
                "schema": {
                  "items": {
                    "properties": {
                      "groupKind": {
                        "description": "[DEPRECATED] Specifies top-level groups.",
                        "enum": ["mixed", "literals-first", "spreads-first"],
                        "type": "string"
                      },
                      "customGroups": {
                        "items": {
                          "oneOf": [
                            {
                              "properties": {
                                "newlinesInside": {
                                  "description": "Specifies how to handle new lines between members of the custom group.",
                                  "enum": ["always", "never"],
                                  "type": "string"
                                },
                                "fallbackSort": {
                                  "properties": {},
                                  "description": "Fallback sort order.",
                                  "additionalProperties": false,
                                  "minProperties": 1,
                                  "type": "object"
                                },
                                "groupName": {
                                  "description": "Custom group name.",
                                  "type": "string"
                                },
                                "anyOf": {
                                  "items": {
                                    "properties": {
                                      "selector": {
                                        "description": "Selector filter.",
                                        "enum": ["literal", "spread"],
                                        "type": "string"
                                      }
                                    },
                                    "description": "Custom group.",
                                    "additionalProperties": false,
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              },
                              "description": "Custom group block.",
                              "additionalProperties": false,
                              "required": ["groupName"],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "newlinesInside": {
                                  "description": "Specifies how to handle new lines between members of the custom group.",
                                  "enum": ["always", "never"],
                                  "type": "string"
                                },
                                "fallbackSort": {
                                  "properties": {},
                                  "description": "Fallback sort order.",
                                  "additionalProperties": false,
                                  "minProperties": 1,
                                  "type": "object"
                                },
                                "groupName": {
                                  "description": "Custom group name.",
                                  "type": "string"
                                }
                              },
                              "description": "Custom group.",
                              "additionalProperties": false,
                              "required": ["groupName"],
                              "type": "object"
                            }
                          ]
                        },
                        "description": "Defines custom groups to match specific members.",
                        "type": "array"
                      },
                      "useConfigurationIf": {
                        "description": "Specifies filters to match a particular options configuration for a given element to sort.",
                        "properties": {},
                        "additionalProperties": false,
                        "type": "object"
                      }
                    },
                    "additionalProperties": false,
                    "type": "object"
                  },
                  "uniqueItems": true,
                  "type": "array"
                },
                "type": "suggestion",
                "fixable": "code"
              }
            },
            "sort-named-imports": {
              "defaultOptions": [
                {
                  "fallbackSort": { "type": "unsorted" },
                  "specialCharacters": "keep",
                  "partitionByNewLine": false,
                  "partitionByComment": false,
                  "newlinesBetween": "ignore",
                  "type": "alphabetical",
                  "ignoreAlias": false,
                  "groupKind": "mixed",
                  "customGroups": [],
                  "ignoreCase": true,
                  "locales": "en-US",
                  "alphabet": "",
                  "order": "asc",
                  "groups": []
                }
              ],
              "meta": {
                "schema": {
                  "items": {
                    "properties": {
                      "groupKind": {
                        "description": "[DEPRECATED] Specifies top-level groups.",
                        "enum": ["mixed", "values-first", "types-first"],
                        "type": "string"
                      },
                      "ignoreAlias": {
                        "description": "Controls whether to ignore alias names.",
                        "type": "boolean"
                      },
                      "customGroups": {
                        "items": {
                          "oneOf": [
                            {
                              "properties": {
                                "newlinesInside": {
                                  "description": "Specifies how to handle new lines between members of the custom group.",
                                  "enum": ["always", "never"],
                                  "type": "string"
                                },
                                "fallbackSort": {
                                  "properties": {},
                                  "description": "Fallback sort order.",
                                  "additionalProperties": false,
                                  "minProperties": 1,
                                  "type": "object"
                                },
                                "groupName": {
                                  "description": "Custom group name.",
                                  "type": "string"
                                },
                                "anyOf": {
                                  "items": {
                                    "properties": {
                                      "modifiers": {
                                        "items": {
                                          "enum": ["value", "type"],
                                          "type": "string"
                                        },
                                        "description": "Modifier filters.",
                                        "type": "array"
                                      },
                                      "selector": {
                                        "description": "Selector filter.",
                                        "enum": ["import"],
                                        "type": "string"
                                      }
                                    },
                                    "description": "Custom group.",
                                    "additionalProperties": false,
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              },
                              "description": "Custom group block.",
                              "additionalProperties": false,
                              "required": ["groupName"],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "newlinesInside": {
                                  "description": "Specifies how to handle new lines between members of the custom group.",
                                  "enum": ["always", "never"],
                                  "type": "string"
                                },
                                "fallbackSort": {
                                  "properties": {},
                                  "description": "Fallback sort order.",
                                  "additionalProperties": false,
                                  "minProperties": 1,
                                  "type": "object"
                                },
                                "groupName": {
                                  "description": "Custom group name.",
                                  "type": "string"
                                }
                              },
                              "description": "Custom group.",
                              "additionalProperties": false,
                              "required": ["groupName"],
                              "type": "object"
                            }
                          ]
                        },
                        "description": "Defines custom groups to match specific members.",
                        "type": "array"
                      }
                    },
                    "additionalProperties": false,
                    "type": "object"
                  },
                  "uniqueItems": true,
                  "type": "array"
                },
                "messages": {
                  "missedSpacingBetweenNamedImports": "Missed spacing between \"{{left}}\" and \"{{right}}\".",
                  "extraSpacingBetweenNamedImports": "Extra spacing between \"{{left}}\" and \"{{right}}\" objects.",
                  "unexpectedNamedImportsGroupOrder": "Expected \"{{right}}\" ({{rightGroup}}) to come before \"{{left}}\" ({{leftGroup}}).",
                  "unexpectedNamedImportsOrder": "Expected \"{{right}}\" to come before \"{{left}}\"."
                },
                "docs": {
                  "url": "https://perfectionist.dev/rules/sort-named-imports",
                  "description": "Enforce sorted named imports.",
                  "recommended": true
                },
                "type": "suggestion",
                "fixable": "code"
              }
            },
            "sort-named-exports": {
              "defaultOptions": [
                {
                  "fallbackSort": { "type": "unsorted" },
                  "specialCharacters": "keep",
                  "partitionByNewLine": false,
                  "partitionByComment": false,
                  "newlinesBetween": "ignore",
                  "type": "alphabetical",
                  "ignoreAlias": false,
                  "groupKind": "mixed",
                  "customGroups": [],
                  "ignoreCase": true,
                  "locales": "en-US",
                  "alphabet": "",
                  "order": "asc",
                  "groups": []
                }
              ],
              "meta": {
                "schema": {
                  "items": {
                    "properties": {
                      "groupKind": {
                        "description": "[DEPRECATED] Specifies top-level groups.",
                        "enum": ["mixed", "values-first", "types-first"],
                        "type": "string"
                      },
                      "ignoreAlias": {
                        "description": "Controls whether to ignore alias names.",
                        "type": "boolean"
                      },
                      "customGroups": {
                        "items": {
                          "oneOf": [
                            {
                              "properties": {
                                "newlinesInside": {
                                  "description": "Specifies how to handle new lines between members of the custom group.",
                                  "enum": ["always", "never"],
                                  "type": "string"
                                },
                                "fallbackSort": {
                                  "properties": {},
                                  "description": "Fallback sort order.",
                                  "additionalProperties": false,
                                  "minProperties": 1,
                                  "type": "object"
                                },
                                "groupName": {
                                  "description": "Custom group name.",
                                  "type": "string"
                                },
                                "anyOf": {
                                  "items": {
                                    "properties": {
                                      "modifiers": {
                                        "items": {
                                          "enum": ["value", "type"],
                                          "type": "string"
                                        },
                                        "description": "Modifier filters.",
                                        "type": "array"
                                      },
                                      "selector": {
                                        "description": "Selector filter.",
                                        "enum": ["export"],
                                        "type": "string"
                                      }
                                    },
                                    "description": "Custom group.",
                                    "additionalProperties": false,
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              },
                              "description": "Custom group block.",
                              "additionalProperties": false,
                              "required": ["groupName"],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "newlinesInside": {
                                  "description": "Specifies how to handle new lines between members of the custom group.",
                                  "enum": ["always", "never"],
                                  "type": "string"
                                },
                                "fallbackSort": {
                                  "properties": {},
                                  "description": "Fallback sort order.",
                                  "additionalProperties": false,
                                  "minProperties": 1,
                                  "type": "object"
                                },
                                "groupName": {
                                  "description": "Custom group name.",
                                  "type": "string"
                                }
                              },
                              "description": "Custom group.",
                              "additionalProperties": false,
                              "required": ["groupName"],
                              "type": "object"
                            }
                          ]
                        },
                        "description": "Defines custom groups to match specific members.",
                        "type": "array"
                      }
                    },
                    "additionalProperties": false,
                    "type": "object"
                  },
                  "uniqueItems": true,
                  "type": "array"
                },
                "messages": {
                  "missedSpacingBetweenNamedExports": "Missed spacing between \"{{left}}\" and \"{{right}}\".",
                  "extraSpacingBetweenNamedExports": "Extra spacing between \"{{left}}\" and \"{{right}}\" objects.",
                  "unexpectedNamedExportsGroupOrder": "Expected \"{{right}}\" ({{rightGroup}}) to come before \"{{left}}\" ({{leftGroup}}).",
                  "unexpectedNamedExportsOrder": "Expected \"{{right}}\" to come before \"{{left}}\"."
                },
                "docs": {
                  "url": "https://perfectionist.dev/rules/sort-named-exports",
                  "description": "Enforce sorted named exports.",
                  "recommended": true
                },
                "type": "suggestion",
                "fixable": "code"
              }
            },
            "sort-object-types": {
              "defaultOptions": [
                {
                  "fallbackSort": { "type": "unsorted", "sortBy": "name" },
                  "partitionByComment": false,
                  "partitionByNewLine": false,
                  "newlinesBetween": "ignore",
                  "specialCharacters": "keep",
                  "useConfigurationIf": {},
                  "type": "alphabetical",
                  "groupKind": "mixed",
                  "ignorePattern": [],
                  "ignoreCase": true,
                  "customGroups": {},
                  "locales": "en-US",
                  "sortBy": "name",
                  "alphabet": "",
                  "order": "asc",
                  "groups": []
                }
              ],
              "meta": {
                "messages": {
                  "missedSpacingBetweenObjectTypeMembers": "Missed spacing between \"{{left}}\" and \"{{right}}\".",
                  "extraSpacingBetweenObjectTypeMembers": "Extra spacing between \"{{left}}\" and \"{{right}}\" objects.",
                  "unexpectedObjectTypesGroupOrder": "Expected \"{{right}}\" ({{rightGroup}}) to come before \"{{left}}\" ({{leftGroup}}).",
                  "unexpectedObjectTypesOrder": "Expected \"{{right}}\" to come before \"{{left}}\"."
                },
                "docs": {
                  "url": "https://perfectionist.dev/rules/sort-object-types",
                  "description": "Enforce sorted object types.",
                  "recommended": true
                },
                "schema": {
                  "items": {
                    "properties": {
                      "fallbackSort": {
                        "properties": {
                          "sortBy": {
                            "enum": ["name", "value"],
                            "type": "string"
                          }
                        },
                        "description": "Fallback sort order.",
                        "additionalProperties": false,
                        "minProperties": 1,
                        "type": "object"
                      },
                      "customGroups": {
                        "oneOf": [
                          null,
                          {
                            "items": {
                              "oneOf": [
                                {
                                  "properties": {
                                    "newlinesInside": {
                                      "description": "Specifies how to handle new lines between members of the custom group.",
                                      "enum": ["always", "never"],
                                      "type": "string"
                                    },
                                    "fallbackSort": {
                                      "properties": {},
                                      "description": "Fallback sort order.",
                                      "additionalProperties": false,
                                      "minProperties": 1,
                                      "type": "object"
                                    },
                                    "groupName": {
                                      "description": "Custom group name.",
                                      "type": "string"
                                    },
                                    "anyOf": {
                                      "items": {
                                        "properties": {
                                          "modifiers": {
                                            "items": {
                                              "enum": [
                                                "optional",
                                                "required",
                                                "multiline"
                                              ],
                                              "type": "string"
                                            },
                                            "description": "Modifier filters.",
                                            "type": "array"
                                          },
                                          "selector": {
                                            "description": "Selector filter.",
                                            "enum": [
                                              "index-signature",
                                              "member",
                                              "method",
                                              "multiline",
                                              "property"
                                            ],
                                            "type": "string"
                                          }
                                        },
                                        "description": "Custom group.",
                                        "additionalProperties": false,
                                        "type": "object"
                                      },
                                      "type": "array"
                                    }
                                  },
                                  "description": "Custom group block.",
                                  "additionalProperties": false,
                                  "required": ["groupName"],
                                  "type": "object"
                                },
                                {
                                  "properties": {
                                    "newlinesInside": {
                                      "description": "Specifies how to handle new lines between members of the custom group.",
                                      "enum": ["always", "never"],
                                      "type": "string"
                                    },
                                    "fallbackSort": {
                                      "properties": {},
                                      "description": "Fallback sort order.",
                                      "additionalProperties": false,
                                      "minProperties": 1,
                                      "type": "object"
                                    },
                                    "groupName": {
                                      "description": "Custom group name.",
                                      "type": "string"
                                    }
                                  },
                                  "description": "Custom group.",
                                  "additionalProperties": false,
                                  "required": ["groupName"],
                                  "type": "object"
                                }
                              ]
                            },
                            "description": "Defines custom groups to match specific members.",
                            "type": "array"
                          }
                        ]
                      },
                      "groupKind": {
                        "description": "[DEPRECATED] Specifies top-level groups.",
                        "enum": ["mixed", "required-first", "optional-first"],
                        "type": "string"
                      },
                      "useConfigurationIf": {
                        "description": "Specifies filters to match a particular options configuration for a given element to sort.",
                        "properties": {},
                        "additionalProperties": false,
                        "type": "object"
                      }
                    },
                    "additionalProperties": false,
                    "type": "object"
                  },
                  "uniqueItems": true,
                  "type": "array"
                },
                "type": "suggestion",
                "fixable": "code"
              }
            },
            "sort-union-types": {
              "defaultOptions": [
                {
                  "fallbackSort": { "type": "unsorted" },
                  "specialCharacters": "keep",
                  "newlinesBetween": "ignore",
                  "partitionByNewLine": false,
                  "partitionByComment": false,
                  "type": "alphabetical",
                  "ignoreCase": true,
                  "locales": "en-US",
                  "customGroups": [],
                  "alphabet": "",
                  "order": "asc",
                  "groups": []
                }
              ],
              "meta": {
                "messages": {
                  "missedSpacingBetweenUnionTypes": "Missed spacing between \"{{left}}\" and \"{{right}}\".",
                  "extraSpacingBetweenUnionTypes": "Extra spacing between \"{{left}}\" and \"{{right}}\" objects.",
                  "unexpectedUnionTypesGroupOrder": "Expected \"{{right}}\" ({{rightGroup}}) to come before \"{{left}}\" ({{leftGroup}}).",
                  "unexpectedUnionTypesOrder": "Expected \"{{right}}\" to come before \"{{left}}\"."
                },
                "docs": {
                  "url": "https://perfectionist.dev/rules/sort-union-types",
                  "description": "Enforce sorted union types.",
                  "recommended": true
                },
                "type": "suggestion",
                "fixable": "code"
              }
            },
            "sort-switch-case": {
              "defaultOptions": [
                {
                  "fallbackSort": { "type": "unsorted" },
                  "specialCharacters": "keep",
                  "type": "alphabetical",
                  "ignoreCase": true,
                  "locales": "en-US",
                  "alphabet": "",
                  "order": "asc"
                }
              ],
              "meta": {
                "schema": [
                  {
                    "properties": {},
                    "additionalProperties": false,
                    "type": "object"
                  }
                ],
                "docs": {
                  "url": "https://perfectionist.dev/rules/sort-switch-case",
                  "description": "Enforce sorted switch cases.",
                  "recommended": true
                },
                "messages": {
                  "unexpectedSwitchCaseOrder": "Expected \"{{right}}\" to come before \"{{left}}\"."
                },
                "type": "suggestion",
                "fixable": "code"
              }
            },
            "sort-decorators": {
              "defaultOptions": [
                {
                  "fallbackSort": { "type": "unsorted" },
                  "specialCharacters": "keep",
                  "partitionByComment": false,
                  "sortOnProperties": true,
                  "sortOnParameters": true,
                  "sortOnAccessors": true,
                  "type": "alphabetical",
                  "sortOnClasses": true,
                  "sortOnMethods": true,
                  "ignoreCase": true,
                  "customGroups": {},
                  "locales": "en-US",
                  "alphabet": "",
                  "order": "asc",
                  "groups": []
                }
              ],
              "meta": {
                "schema": [
                  {
                    "properties": {
                      "sortOnParameters": {
                        "description": "Controls whether sorting should be enabled for method parameter decorators.",
                        "type": "boolean"
                      },
                      "sortOnProperties": {
                        "description": "Controls whether sorting should be enabled for class property decorators.",
                        "type": "boolean"
                      },
                      "sortOnAccessors": {
                        "description": "Controls whether sorting should be enabled for class accessor decorators.",
                        "type": "boolean"
                      },
                      "sortOnMethods": {
                        "description": "Controls whether sorting should be enabled for class method decorators.",
                        "type": "boolean"
                      },
                      "sortOnClasses": {
                        "description": "Controls whether sorting should be enabled for class decorators.",
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false,
                    "type": "object"
                  }
                ],
                "docs": {
                  "url": "https://perfectionist.dev/rules/sort-decorators",
                  "description": "Enforce sorted decorators.",
                  "recommended": true
                },
                "messages": {
                  "unexpectedDecoratorsGroupOrder": "Expected \"{{right}}\" ({{rightGroup}}) to come before \"{{left}}\" ({{leftGroup}}).",
                  "unexpectedDecoratorsOrder": "Expected \"{{right}}\" to come before \"{{left}}\"."
                },
                "type": "suggestion",
                "fixable": "code"
              }
            },
            "sort-interfaces": {
              "defaultOptions": [
                {
                  "fallbackSort": { "type": "unsorted" },
                  "partitionByComment": false,
                  "partitionByNewLine": false,
                  "newlinesBetween": "ignore",
                  "specialCharacters": "keep",
                  "useConfigurationIf": {},
                  "type": "alphabetical",
                  "groupKind": "mixed",
                  "ignorePattern": [],
                  "ignoreCase": true,
                  "customGroups": {},
                  "locales": "en-US",
                  "sortBy": "name",
                  "alphabet": "",
                  "order": "asc",
                  "groups": []
                }
              ],
              "meta": {
                "messages": {
                  "unexpectedInterfacePropertiesGroupOrder": "Expected \"{{right}}\" ({{rightGroup}}) to come before \"{{left}}\" ({{leftGroup}}).",
                  "missedSpacingBetweenInterfaceMembers": "Missed spacing between \"{{left}}\" and \"{{right}}\".",
                  "extraSpacingBetweenInterfaceMembers": "Extra spacing between \"{{left}}\" and \"{{right}}\" objects.",
                  "unexpectedInterfacePropertiesOrder": "Expected \"{{right}}\" to come before \"{{left}}\"."
                },
                "docs": {
                  "url": "https://perfectionist.dev/rules/sort-interfaces",
                  "description": "Enforce sorted interface properties.",
                  "recommended": true
                },
                "type": "suggestion",
                "fixable": "code"
              }
            },
            "sort-jsx-props": {
              "defaultOptions": [
                {
                  "fallbackSort": { "type": "unsorted" },
                  "specialCharacters": "keep",
                  "newlinesBetween": "ignore",
                  "partitionByNewLine": false,
                  "useConfigurationIf": {},
                  "type": "alphabetical",
                  "ignorePattern": [],
                  "ignoreCase": true,
                  "customGroups": {},
                  "locales": "en-US",
                  "alphabet": "",
                  "order": "asc",
                  "groups": []
                }
              ],
              "meta": {
                "schema": {
                  "items": {
                    "properties": {
                      "customGroups": {
                        "oneOf": [
                          null,
                          {
                            "items": {
                              "oneOf": [
                                {
                                  "properties": {
                                    "newlinesInside": {
                                      "description": "Specifies how to handle new lines between members of the custom group.",
                                      "enum": ["always", "never"],
                                      "type": "string"
                                    },
                                    "fallbackSort": {
                                      "properties": {},
                                      "description": "Fallback sort order.",
                                      "additionalProperties": false,
                                      "minProperties": 1,
                                      "type": "object"
                                    },
                                    "groupName": {
                                      "description": "Custom group name.",
                                      "type": "string"
                                    },
                                    "anyOf": {
                                      "items": {
                                        "properties": {
                                          "modifiers": {
                                            "items": {
                                              "enum": [
                                                "shorthand",
                                                "multiline"
                                              ],
                                              "type": "string"
                                            },
                                            "description": "Modifier filters.",
                                            "type": "array"
                                          },
                                          "selector": {
                                            "description": "Selector filter.",
                                            "enum": [
                                              "multiline",
                                              "prop",
                                              "shorthand"
                                            ],
                                            "type": "string"
                                          }
                                        },
                                        "description": "Custom group.",
                                        "additionalProperties": false,
                                        "type": "object"
                                      },
                                      "type": "array"
                                    }
                                  },
                                  "description": "Custom group block.",
                                  "additionalProperties": false,
                                  "required": ["groupName"],
                                  "type": "object"
                                },
                                {
                                  "properties": {
                                    "newlinesInside": {
                                      "description": "Specifies how to handle new lines between members of the custom group.",
                                      "enum": ["always", "never"],
                                      "type": "string"
                                    },
                                    "fallbackSort": {
                                      "properties": {},
                                      "description": "Fallback sort order.",
                                      "additionalProperties": false,
                                      "minProperties": 1,
                                      "type": "object"
                                    },
                                    "groupName": {
                                      "description": "Custom group name.",
                                      "type": "string"
                                    }
                                  },
                                  "description": "Custom group.",
                                  "additionalProperties": false,
                                  "required": ["groupName"],
                                  "type": "object"
                                }
                              ]
                            },
                            "description": "Defines custom groups to match specific members.",
                            "type": "array"
                          }
                        ]
                      },
                      "useConfigurationIf": {
                        "description": "Specifies filters to match a particular options configuration for a given element to sort.",
                        "properties": {},
                        "additionalProperties": false,
                        "type": "object"
                      }
                    },
                    "additionalProperties": false,
                    "type": "object"
                  },
                  "uniqueItems": true,
                  "type": "array"
                },
                "messages": {
                  "missedSpacingBetweenJSXPropsMembers": "Missed spacing between \"{{left}}\" and \"{{right}}\".",
                  "extraSpacingBetweenJSXPropsMembers": "Extra spacing between \"{{left}}\" and \"{{right}}\" objects.",
                  "unexpectedJSXPropsGroupOrder": "Expected \"{{right}}\" ({{rightGroup}}) to come before \"{{left}}\" ({{leftGroup}}).",
                  "unexpectedJSXPropsOrder": "Expected \"{{right}}\" to come before \"{{left}}\"."
                },
                "docs": {
                  "url": "https://perfectionist.dev/rules/sort-jsx-props",
                  "description": "Enforce sorted JSX props.",
                  "recommended": true
                },
                "type": "suggestion",
                "fixable": "code"
              }
            },
            "sort-modules": {
              "defaultOptions": [
                {
                  "groups": [
                    "declare-enum",
                    "export-enum",
                    "enum",
                    ["declare-interface", "declare-type"],
                    ["export-interface", "export-type"],
                    ["interface", "type"],
                    "declare-class",
                    "class",
                    "export-class",
                    "declare-function",
                    "export-function",
                    "function"
                  ],
                  "fallbackSort": { "type": "unsorted" },
                  "partitionByComment": false,
                  "partitionByNewLine": false,
                  "newlinesBetween": "ignore",
                  "specialCharacters": "keep",
                  "type": "alphabetical",
                  "ignoreCase": true,
                  "customGroups": [],
                  "locales": "en-US",
                  "alphabet": "",
                  "order": "asc"
                }
              ],
              "meta": {
                "schema": [
                  {
                    "properties": {
                      "customGroups": {
                        "items": {
                          "oneOf": [
                            {
                              "properties": {
                                "newlinesInside": {
                                  "description": "Specifies how to handle new lines between members of the custom group.",
                                  "enum": ["always", "never"],
                                  "type": "string"
                                },
                                "fallbackSort": {
                                  "properties": {},
                                  "description": "Fallback sort order.",
                                  "additionalProperties": false,
                                  "minProperties": 1,
                                  "type": "object"
                                },
                                "groupName": {
                                  "description": "Custom group name.",
                                  "type": "string"
                                },
                                "anyOf": {
                                  "items": {
                                    "properties": {
                                      "modifiers": {
                                        "items": {
                                          "enum": [
                                            "async",
                                            "declare",
                                            "decorated",
                                            "default",
                                            "export"
                                          ],
                                          "type": "string"
                                        },
                                        "description": "Modifier filters.",
                                        "type": "array"
                                      },
                                      "selector": {
                                        "description": "Selector filter.",
                                        "enum": [
                                          "enum",
                                          "function",
                                          "interface",
                                          "type",
                                          "class"
                                        ],
                                        "type": "string"
                                      }
                                    },
                                    "description": "Custom group.",
                                    "additionalProperties": false,
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              },
                              "description": "Custom group block.",
                              "additionalProperties": false,
                              "required": ["groupName"],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "newlinesInside": {
                                  "description": "Specifies how to handle new lines between members of the custom group.",
                                  "enum": ["always", "never"],
                                  "type": "string"
                                },
                                "fallbackSort": {
                                  "properties": {},
                                  "description": "Fallback sort order.",
                                  "additionalProperties": false,
                                  "minProperties": 1,
                                  "type": "object"
                                },
                                "groupName": {
                                  "description": "Custom group name.",
                                  "type": "string"
                                }
                              },
                              "description": "Custom group.",
                              "additionalProperties": false,
                              "required": ["groupName"],
                              "type": "object"
                            }
                          ]
                        },
                        "description": "Defines custom groups to match specific members.",
                        "type": "array"
                      }
                    },
                    "additionalProperties": false,
                    "type": "object"
                  }
                ],
                "messages": {
                  "unexpectedModulesDependencyOrder": "Expected dependency \"{{right}}\" to come before \"{{nodeDependentOnRight}}\".",
                  "missedSpacingBetweenModulesMembers": "Missed spacing between \"{{left}}\" and \"{{right}}\".",
                  "extraSpacingBetweenModulesMembers": "Extra spacing between \"{{left}}\" and \"{{right}}\" objects.",
                  "unexpectedModulesGroupOrder": "Expected \"{{right}}\" ({{rightGroup}}) to come before \"{{left}}\" ({{leftGroup}}).",
                  "unexpectedModulesOrder": "Expected \"{{right}}\" to come before \"{{left}}\"."
                },
                "docs": {
                  "url": "https://perfectionist.dev/rules/sort-modules",
                  "description": "Enforce sorted modules.",
                  "recommended": true
                },
                "type": "suggestion",
                "fixable": "code"
              }
            },
            "sort-classes": {
              "defaultOptions": [
                {
                  "groups": [
                    "index-signature",
                    ["static-property", "static-accessor-property"],
                    ["static-get-method", "static-set-method"],
                    [
                      "protected-static-property",
                      "protected-static-accessor-property"
                    ],
                    [
                      "protected-static-get-method",
                      "protected-static-set-method"
                    ],
                    [
                      "private-static-property",
                      "private-static-accessor-property"
                    ],
                    ["private-static-get-method", "private-static-set-method"],
                    "static-block",
                    ["property", "accessor-property"],
                    ["get-method", "set-method"],
                    ["protected-property", "protected-accessor-property"],
                    ["protected-get-method", "protected-set-method"],
                    ["private-property", "private-accessor-property"],
                    ["private-get-method", "private-set-method"],
                    "constructor",
                    ["static-method", "static-function-property"],
                    [
                      "protected-static-method",
                      "protected-static-function-property"
                    ],
                    [
                      "private-static-method",
                      "private-static-function-property"
                    ],
                    ["method", "function-property"],
                    ["protected-method", "protected-function-property"],
                    ["private-method", "private-function-property"],
                    "unknown"
                  ],
                  "ignoreCallbackDependenciesPatterns": [],
                  "fallbackSort": { "type": "unsorted" },
                  "partitionByComment": false,
                  "partitionByNewLine": false,
                  "newlinesBetween": "ignore",
                  "specialCharacters": "keep",
                  "type": "alphabetical",
                  "ignoreCase": true,
                  "customGroups": [],
                  "locales": "en-US",
                  "alphabet": "",
                  "order": "asc"
                }
              ],
              "meta": {
                "schema": [
                  {
                    "properties": {
                      "customGroups": {
                        "items": {
                          "oneOf": [
                            {
                              "properties": {
                                "newlinesInside": {
                                  "description": "Specifies how to handle new lines between members of the custom group.",
                                  "enum": ["always", "never"],
                                  "type": "string"
                                },
                                "fallbackSort": {
                                  "properties": {},
                                  "description": "Fallback sort order.",
                                  "additionalProperties": false,
                                  "minProperties": 1,
                                  "type": "object"
                                },
                                "groupName": {
                                  "description": "Custom group name.",
                                  "type": "string"
                                },
                                "anyOf": {
                                  "items": {
                                    "properties": {
                                      "modifiers": {
                                        "items": {
                                          "enum": [
                                            "async",
                                            "protected",
                                            "private",
                                            "public",
                                            "static",
                                            "abstract",
                                            "override",
                                            "readonly",
                                            "decorated",
                                            "declare",
                                            "optional"
                                          ],
                                          "type": "string"
                                        },
                                        "description": "Modifier filters.",
                                        "type": "array"
                                      },
                                      "selector": {
                                        "description": "Selector filter.",
                                        "enum": [
                                          "accessor-property",
                                          "index-signature",
                                          "constructor",
                                          "static-block",
                                          "get-method",
                                          "set-method",
                                          "function-property",
                                          "property",
                                          "method"
                                        ],
                                        "type": "string"
                                      }
                                    },
                                    "description": "Custom group.",
                                    "additionalProperties": false,
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              },
                              "description": "Custom group block.",
                              "additionalProperties": false,
                              "required": ["groupName"],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "newlinesInside": {
                                  "description": "Specifies how to handle new lines between members of the custom group.",
                                  "enum": ["always", "never"],
                                  "type": "string"
                                },
                                "fallbackSort": {
                                  "properties": {},
                                  "description": "Fallback sort order.",
                                  "additionalProperties": false,
                                  "minProperties": 1,
                                  "type": "object"
                                },
                                "groupName": {
                                  "description": "Custom group name.",
                                  "type": "string"
                                }
                              },
                              "description": "Custom group.",
                              "additionalProperties": false,
                              "required": ["groupName"],
                              "type": "object"
                            }
                          ]
                        },
                        "description": "Defines custom groups to match specific members.",
                        "type": "array"
                      }
                    },
                    "additionalProperties": false,
                    "type": "object"
                  }
                ],
                "messages": {
                  "unexpectedClassesDependencyOrder": "Expected dependency \"{{right}}\" to come before \"{{nodeDependentOnRight}}\".",
                  "missedSpacingBetweenClassMembers": "Missed spacing between \"{{left}}\" and \"{{right}}\".",
                  "extraSpacingBetweenClassMembers": "Extra spacing between \"{{left}}\" and \"{{right}}\" objects.",
                  "unexpectedClassesGroupOrder": "Expected \"{{right}}\" ({{rightGroup}}) to come before \"{{left}}\" ({{leftGroup}}).",
                  "unexpectedClassesOrder": "Expected \"{{right}}\" to come before \"{{left}}\"."
                },
                "docs": {
                  "url": "https://perfectionist.dev/rules/sort-classes",
                  "description": "Enforce sorted classes.",
                  "recommended": true
                },
                "type": "suggestion",
                "fixable": "code"
              }
            },
            "sort-imports": {
              "defaultOptions": [
                {
                  "groups": [
                    "type-import",
                    ["value-builtin", "value-external"],
                    "type-internal",
                    "value-internal",
                    ["type-parent", "type-sibling", "type-index"],
                    ["value-parent", "value-sibling", "value-index"],
                    "ts-equals-import",
                    "unknown"
                  ],
                  "internalPattern": ["^~/.+", "^@/.+"],
                  "fallbackSort": { "type": "unsorted" },
                  "partitionByComment": false,
                  "partitionByNewLine": false,
                  "newlinesBetween": "always",
                  "specialCharacters": "keep",
                  "sortSideEffects": false,
                  "type": "alphabetical",
                  "environment": "node",
                  "customGroups": [],
                  "ignoreCase": true,
                  "locales": "en-US",
                  "alphabet": "",
                  "order": "asc"
                }
              ],
              "meta": {
                "schema": {
                  "items": {
                    "properties": {
                      "customGroups": {
                        "oneOf": [
                          {
                            "properties": {
                              "value": {
                                "description": "Specifies custom groups for value imports.",
                                "type": "object"
                              },
                              "type": {
                                "description": "Specifies custom groups for type imports.",
                                "type": "object"
                              }
                            },
                            "description": "Specifies custom groups.",
                            "additionalProperties": false,
                            "type": "object"
                          },
                          {
                            "items": {
                              "oneOf": [
                                {
                                  "properties": {
                                    "newlinesInside": {
                                      "description": "Specifies how to handle new lines between members of the custom group.",
                                      "enum": ["always", "never"],
                                      "type": "string"
                                    },
                                    "fallbackSort": {
                                      "properties": {},
                                      "description": "Fallback sort order.",
                                      "additionalProperties": false,
                                      "minProperties": 1,
                                      "type": "object"
                                    },
                                    "groupName": {
                                      "description": "Custom group name.",
                                      "type": "string"
                                    },
                                    "anyOf": {
                                      "items": {
                                        "properties": {
                                          "modifiers": {
                                            "items": {
                                              "enum": [
                                                "default",
                                                "named",
                                                "require",
                                                "side-effect",
                                                "ts-equals",
                                                "type",
                                                "value",
                                                "wildcard"
                                              ],
                                              "type": "string"
                                            },
                                            "description": "Modifier filters.",
                                            "type": "array"
                                          },
                                          "selector": {
                                            "description": "Selector filter.",
                                            "enum": [
                                              "side-effect-style",
                                              "tsconfig-path",
                                              "side-effect",
                                              "external",
                                              "internal",
                                              "builtin",
                                              "sibling",
                                              "subpath",
                                              "import",
                                              "parent",
                                              "index",
                                              "style",
                                              "type"
                                            ],
                                            "type": "string"
                                          }
                                        },
                                        "description": "Custom group.",
                                        "additionalProperties": false,
                                        "type": "object"
                                      },
                                      "type": "array"
                                    }
                                  },
                                  "description": "Custom group block.",
                                  "additionalProperties": false,
                                  "required": ["groupName"],
                                  "type": "object"
                                },
                                {
                                  "properties": {
                                    "newlinesInside": {
                                      "description": "Specifies how to handle new lines between members of the custom group.",
                                      "enum": ["always", "never"],
                                      "type": "string"
                                    },
                                    "fallbackSort": {
                                      "properties": {},
                                      "description": "Fallback sort order.",
                                      "additionalProperties": false,
                                      "minProperties": 1,
                                      "type": "object"
                                    },
                                    "groupName": {
                                      "description": "Custom group name.",
                                      "type": "string"
                                    }
                                  },
                                  "description": "Custom group.",
                                  "additionalProperties": false,
                                  "required": ["groupName"],
                                  "type": "object"
                                }
                              ]
                            },
                            "description": "Defines custom groups to match specific members.",
                            "type": "array"
                          }
                        ]
                      },
                      "tsconfig": {
                        "properties": {
                          "rootDir": {
                            "description": "Specifies the tsConfig root directory.",
                            "type": "string"
                          },
                          "filename": {
                            "description": "Specifies the tsConfig filename.",
                            "type": "string"
                          }
                        },
                        "additionalProperties": false,
                        "required": ["rootDir"],
                        "type": "object"
                      },
                      "maxLineLength": {
                        "description": "Specifies the maximum line length.",
                        "exclusiveMinimum": true,
                        "type": "integer",
                        "minimum": 0
                      },
                      "sortSideEffects": {
                        "description": "Controls whether side-effect imports should be sorted.",
                        "type": "boolean"
                      },
                      "environment": {
                        "description": "Specifies the environment.",
                        "enum": ["node", "bun"],
                        "type": "string"
                      },
                      "tsconfigRootDir": {
                        "description": "Specifies the tsConfig root directory.",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false,
                    "type": "object"
                  },
                  "uniqueItems": true,
                  "type": "array"
                },
                "messages": {
                  "unexpectedImportsDependencyOrder": "Expected dependency \"{{right}}\" to come before \"{{nodeDependentOnRight}}\".",
                  "missedCommentAboveImport": "Missed comment \"{{missedCommentAbove}}\" above \"{{right}}\".",
                  "missedSpacingBetweenImports": "Missed spacing between \"{{left}}\" and \"{{right}}\".",
                  "extraSpacingBetweenImports": "Extra spacing between \"{{left}}\" and \"{{right}}\" objects.",
                  "unexpectedImportsGroupOrder": "Expected \"{{right}}\" ({{rightGroup}}) to come before \"{{left}}\" ({{leftGroup}}).",
                  "unexpectedImportsOrder": "Expected \"{{right}}\" to come before \"{{left}}\"."
                },
                "docs": {
                  "url": "https://perfectionist.dev/rules/sort-imports",
                  "description": "Enforce sorted imports.",
                  "recommended": true
                },
                "type": "suggestion",
                "fixable": "code"
              }
            },
            "sort-exports": {
              "defaultOptions": [
                {
                  "fallbackSort": { "type": "unsorted" },
                  "specialCharacters": "keep",
                  "partitionByComment": false,
                  "newlinesBetween": "ignore",
                  "partitionByNewLine": false,
                  "type": "alphabetical",
                  "groupKind": "mixed",
                  "customGroups": [],
                  "ignoreCase": true,
                  "locales": "en-US",
                  "alphabet": "",
                  "order": "asc",
                  "groups": []
                }
              ],
              "meta": {
                "schema": {
                  "items": {
                    "properties": {
                      "groupKind": {
                        "description": "[DEPRECATED] Specifies top-level groups.",
                        "enum": ["mixed", "values-first", "types-first"],
                        "type": "string"
                      },
                      "customGroups": {
                        "items": {
                          "oneOf": [
                            {
                              "properties": {
                                "newlinesInside": {
                                  "description": "Specifies how to handle new lines between members of the custom group.",
                                  "enum": ["always", "never"],
                                  "type": "string"
                                },
                                "fallbackSort": {
                                  "properties": {},
                                  "description": "Fallback sort order.",
                                  "additionalProperties": false,
                                  "minProperties": 1,
                                  "type": "object"
                                },
                                "groupName": {
                                  "description": "Custom group name.",
                                  "type": "string"
                                },
                                "anyOf": {
                                  "items": {
                                    "properties": {
                                      "modifiers": {
                                        "items": {
                                          "enum": ["value", "type"],
                                          "type": "string"
                                        },
                                        "description": "Modifier filters.",
                                        "type": "array"
                                      },
                                      "selector": {
                                        "description": "Selector filter.",
                                        "enum": ["export"],
                                        "type": "string"
                                      }
                                    },
                                    "description": "Custom group.",
                                    "additionalProperties": false,
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              },
                              "description": "Custom group block.",
                              "additionalProperties": false,
                              "required": ["groupName"],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "newlinesInside": {
                                  "description": "Specifies how to handle new lines between members of the custom group.",
                                  "enum": ["always", "never"],
                                  "type": "string"
                                },
                                "fallbackSort": {
                                  "properties": {},
                                  "description": "Fallback sort order.",
                                  "additionalProperties": false,
                                  "minProperties": 1,
                                  "type": "object"
                                },
                                "groupName": {
                                  "description": "Custom group name.",
                                  "type": "string"
                                }
                              },
                              "description": "Custom group.",
                              "additionalProperties": false,
                              "required": ["groupName"],
                              "type": "object"
                            }
                          ]
                        },
                        "description": "Defines custom groups to match specific members.",
                        "type": "array"
                      }
                    },
                    "additionalProperties": false,
                    "type": "object"
                  },
                  "uniqueItems": true,
                  "type": "array"
                },
                "messages": {
                  "missedCommentAboveExport": "Missed comment \"{{missedCommentAbove}}\" above \"{{right}}\".",
                  "missedSpacingBetweenExports": "Missed spacing between \"{{left}}\" and \"{{right}}\".",
                  "extraSpacingBetweenExports": "Extra spacing between \"{{left}}\" and \"{{right}}\" objects.",
                  "unexpectedExportsGroupOrder": "Expected \"{{right}}\" ({{rightGroup}}) to come before \"{{left}}\" ({{leftGroup}}).",
                  "unexpectedExportsOrder": "Expected \"{{right}}\" to come before \"{{left}}\"."
                },
                "docs": {
                  "url": "https://perfectionist.dev/rules/sort-exports",
                  "description": "Enforce sorted exports.",
                  "recommended": true
                },
                "type": "suggestion",
                "fixable": "code"
              }
            },
            "sort-objects": {
              "defaultOptions": [
                {
                  "fallbackSort": { "type": "unsorted" },
                  "partitionByNewLine": false,
                  "partitionByComment": false,
                  "newlinesBetween": "ignore",
                  "specialCharacters": "keep",
                  "destructuredObjects": true,
                  "objectDeclarations": true,
                  "styledComponents": true,
                  "destructureOnly": false,
                  "useConfigurationIf": {},
                  "type": "alphabetical",
                  "ignorePattern": [],
                  "ignoreCase": true,
                  "customGroups": {},
                  "locales": "en-US",
                  "alphabet": "",
                  "order": "asc",
                  "groups": []
                }
              ],
              "meta": {
                "schema": {
                  "items": {
                    "properties": {
                      "destructuredObjects": {
                        "oneOf": [
                          { "type": "boolean" },
                          {
                            "properties": {
                              "groups": {
                                "description": "Controls whether to use groups to sort destructured objects.",
                                "type": "boolean"
                              }
                            },
                            "additionalProperties": false,
                            "type": "object"
                          }
                        ],
                        "description": "Controls whether to sort destructured objects."
                      },
                      "customGroups": {
                        "oneOf": [
                          null,
                          {
                            "items": {
                              "oneOf": [
                                {
                                  "properties": {
                                    "newlinesInside": {
                                      "description": "Specifies how to handle new lines between members of the custom group.",
                                      "enum": ["always", "never"],
                                      "type": "string"
                                    },
                                    "fallbackSort": {
                                      "properties": {},
                                      "description": "Fallback sort order.",
                                      "additionalProperties": false,
                                      "minProperties": 1,
                                      "type": "object"
                                    },
                                    "groupName": {
                                      "description": "Custom group name.",
                                      "type": "string"
                                    },
                                    "anyOf": {
                                      "items": {
                                        "properties": {
                                          "modifiers": {
                                            "items": {
                                              "enum": [
                                                "optional",
                                                "required",
                                                "multiline"
                                              ],
                                              "type": "string"
                                            },
                                            "description": "Modifier filters.",
                                            "type": "array"
                                          },
                                          "selector": {
                                            "description": "Selector filter.",
                                            "enum": [
                                              "member",
                                              "method",
                                              "multiline",
                                              "property"
                                            ],
                                            "type": "string"
                                          }
                                        },
                                        "description": "Custom group.",
                                        "additionalProperties": false,
                                        "type": "object"
                                      },
                                      "type": "array"
                                    }
                                  },
                                  "description": "Custom group block.",
                                  "additionalProperties": false,
                                  "required": ["groupName"],
                                  "type": "object"
                                },
                                {
                                  "properties": {
                                    "newlinesInside": {
                                      "description": "Specifies how to handle new lines between members of the custom group.",
                                      "enum": ["always", "never"],
                                      "type": "string"
                                    },
                                    "fallbackSort": {
                                      "properties": {},
                                      "description": "Fallback sort order.",
                                      "additionalProperties": false,
                                      "minProperties": 1,
                                      "type": "object"
                                    },
                                    "groupName": {
                                      "description": "Custom group name.",
                                      "type": "string"
                                    }
                                  },
                                  "description": "Custom group.",
                                  "additionalProperties": false,
                                  "required": ["groupName"],
                                  "type": "object"
                                }
                              ]
                            },
                            "description": "Defines custom groups to match specific members.",
                            "type": "array"
                          }
                        ]
                      },
                      "useConfigurationIf": {
                        "description": "Specifies filters to match a particular options configuration for a given element to sort.",
                        "properties": {},
                        "additionalProperties": false,
                        "type": "object"
                      },
                      "destructureOnly": {
                        "description": "[DEPRECATED] Controls whether to sort only destructured objects.",
                        "type": "boolean"
                      },
                      "objectDeclarations": {
                        "description": "Controls whether to sort object declarations.",
                        "type": "boolean"
                      },
                      "styledComponents": {
                        "description": "Controls whether to sort styled components.",
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false,
                    "type": "object"
                  },
                  "uniqueItems": true,
                  "type": "array"
                },
                "messages": {
                  "unexpectedObjectsDependencyOrder": "Expected dependency \"{{right}}\" to come before \"{{nodeDependentOnRight}}\".",
                  "missedSpacingBetweenObjectMembers": "Missed spacing between \"{{left}}\" and \"{{right}}\".",
                  "extraSpacingBetweenObjectMembers": "Extra spacing between \"{{left}}\" and \"{{right}}\" objects.",
                  "unexpectedObjectsGroupOrder": "Expected \"{{right}}\" ({{rightGroup}}) to come before \"{{left}}\" ({{leftGroup}}).",
                  "unexpectedObjectsOrder": "Expected \"{{right}}\" to come before \"{{left}}\"."
                },
                "docs": {
                  "url": "https://perfectionist.dev/rules/sort-objects",
                  "description": "Enforce sorted objects.",
                  "recommended": true
                },
                "type": "suggestion",
                "fixable": "code"
              }
            },
            "sort-enums": {
              "defaultOptions": [
                {
                  "fallbackSort": { "type": "unsorted" },
                  "partitionByComment": false,
                  "partitionByNewLine": false,
                  "specialCharacters": "keep",
                  "newlinesBetween": "ignore",
                  "forceNumericSort": false,
                  "type": "alphabetical",
                  "sortByValue": false,
                  "ignoreCase": true,
                  "locales": "en-US",
                  "customGroups": [],
                  "alphabet": "",
                  "order": "asc",
                  "groups": []
                }
              ],
              "meta": {
                "schema": [
                  {
                    "properties": {
                      "customGroups": {
                        "oneOf": [
                          null,
                          {
                            "items": {
                              "oneOf": [
                                {
                                  "properties": {
                                    "newlinesInside": {
                                      "description": "Specifies how to handle new lines between members of the custom group.",
                                      "enum": ["always", "never"],
                                      "type": "string"
                                    },
                                    "fallbackSort": {
                                      "properties": {},
                                      "description": "Fallback sort order.",
                                      "additionalProperties": false,
                                      "minProperties": 1,
                                      "type": "object"
                                    },
                                    "groupName": {
                                      "description": "Custom group name.",
                                      "type": "string"
                                    },
                                    "anyOf": {
                                      "items": {
                                        "properties": {},
                                        "description": "Custom group.",
                                        "additionalProperties": false,
                                        "type": "object"
                                      },
                                      "type": "array"
                                    }
                                  },
                                  "description": "Custom group block.",
                                  "additionalProperties": false,
                                  "required": ["groupName"],
                                  "type": "object"
                                },
                                {
                                  "properties": {
                                    "newlinesInside": {
                                      "description": "Specifies how to handle new lines between members of the custom group.",
                                      "enum": ["always", "never"],
                                      "type": "string"
                                    },
                                    "fallbackSort": {
                                      "properties": {},
                                      "description": "Fallback sort order.",
                                      "additionalProperties": false,
                                      "minProperties": 1,
                                      "type": "object"
                                    },
                                    "groupName": {
                                      "description": "Custom group name.",
                                      "type": "string"
                                    }
                                  },
                                  "description": "Custom group.",
                                  "additionalProperties": false,
                                  "required": ["groupName"],
                                  "type": "object"
                                }
                              ]
                            },
                            "description": "Defines custom groups to match specific members.",
                            "type": "array"
                          }
                        ]
                      },
                      "forceNumericSort": {
                        "description": "Will always sort numeric enums by their value regardless of the sort type specified.",
                        "type": "boolean"
                      },
                      "sortByValue": {
                        "description": "Compare enum values instead of names.",
                        "type": "boolean"
                      }
                    },
                    "additionalProperties": false,
                    "type": "object"
                  }
                ],
                "messages": {
                  "unexpectedEnumsDependencyOrder": "Expected dependency \"{{right}}\" to come before \"{{nodeDependentOnRight}}\".",
                  "missedSpacingBetweenEnumsMembers": "Missed spacing between \"{{left}}\" and \"{{right}}\".",
                  "extraSpacingBetweenEnumsMembers": "Extra spacing between \"{{left}}\" and \"{{right}}\" objects.",
                  "unexpectedEnumsGroupOrder": "Expected \"{{right}}\" ({{rightGroup}}) to come before \"{{left}}\" ({{leftGroup}}).",
                  "unexpectedEnumsOrder": "Expected \"{{right}}\" to come before \"{{left}}\"."
                },
                "docs": {
                  "url": "https://perfectionist.dev/rules/sort-enums",
                  "description": "Enforce sorted TypeScript enums.",
                  "recommended": true
                },
                "type": "suggestion",
                "fixable": "code"
              }
            },
            "sort-sets": {
              "defaultOptions": [null],
              "meta": {
                "messages": {
                  "missedSpacingBetweenSetsMembers": "Missed spacing between \"{{left}}\" and \"{{right}}\".",
                  "extraSpacingBetweenSetsMembers": "Extra spacing between \"{{left}}\" and \"{{right}}\" objects.",
                  "unexpectedSetsGroupOrder": "Expected \"{{right}}\" ({{rightGroup}}) to come before \"{{left}}\" ({{leftGroup}}).",
                  "unexpectedSetsOrder": "Expected \"{{right}}\" to come before \"{{left}}\"."
                },
                "docs": {
                  "url": "https://perfectionist.dev/rules/sort-sets",
                  "description": "Enforce sorted sets.",
                  "recommended": true
                },
                "type": "suggestion",
                "fixable": "code"
              }
            },
            "sort-maps": {
              "defaultOptions": [
                {
                  "fallbackSort": { "type": "unsorted" },
                  "specialCharacters": "keep",
                  "partitionByComment": false,
                  "partitionByNewLine": false,
                  "newlinesBetween": "ignore",
                  "useConfigurationIf": {},
                  "type": "alphabetical",
                  "ignoreCase": true,
                  "customGroups": [],
                  "locales": "en-US",
                  "alphabet": "",
                  "order": "asc",
                  "groups": []
                }
              ],
              "meta": {
                "schema": {
                  "items": {
                    "properties": {
                      "customGroups": {
                        "items": {
                          "oneOf": [
                            {
                              "properties": {
                                "newlinesInside": {
                                  "description": "Specifies how to handle new lines between members of the custom group.",
                                  "enum": ["always", "never"],
                                  "type": "string"
                                },
                                "fallbackSort": {
                                  "properties": {},
                                  "description": "Fallback sort order.",
                                  "additionalProperties": false,
                                  "minProperties": 1,
                                  "type": "object"
                                },
                                "groupName": {
                                  "description": "Custom group name.",
                                  "type": "string"
                                },
                                "anyOf": {
                                  "items": {
                                    "properties": {},
                                    "description": "Custom group.",
                                    "additionalProperties": false,
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              },
                              "description": "Custom group block.",
                              "additionalProperties": false,
                              "required": ["groupName"],
                              "type": "object"
                            },
                            {
                              "properties": {
                                "newlinesInside": {
                                  "description": "Specifies how to handle new lines between members of the custom group.",
                                  "enum": ["always", "never"],
                                  "type": "string"
                                },
                                "fallbackSort": {
                                  "properties": {},
                                  "description": "Fallback sort order.",
                                  "additionalProperties": false,
                                  "minProperties": 1,
                                  "type": "object"
                                },
                                "groupName": {
                                  "description": "Custom group name.",
                                  "type": "string"
                                }
                              },
                              "description": "Custom group.",
                              "additionalProperties": false,
                              "required": ["groupName"],
                              "type": "object"
                            }
                          ]
                        },
                        "description": "Defines custom groups to match specific members.",
                        "type": "array"
                      },
                      "useConfigurationIf": {
                        "description": "Specifies filters to match a particular options configuration for a given element to sort.",
                        "properties": {},
                        "additionalProperties": false,
                        "type": "object"
                      }
                    },
                    "additionalProperties": false,
                    "type": "object"
                  },
                  "uniqueItems": true,
                  "type": "array"
                },
                "messages": {
                  "missedSpacingBetweenMapElementsMembers": "Missed spacing between \"{{left}}\" and \"{{right}}\".",
                  "extraSpacingBetweenMapElementsMembers": "Extra spacing between \"{{left}}\" and \"{{right}}\" objects.",
                  "unexpectedMapElementsGroupOrder": "Expected \"{{right}}\" ({{rightGroup}}) to come before \"{{left}}\" ({{leftGroup}}).",
                  "unexpectedMapElementsOrder": "Expected \"{{right}}\" to come before \"{{left}}\"."
                },
                "docs": {
                  "url": "https://perfectionist.dev/rules/sort-maps",
                  "description": "Enforce sorted Map elements.",
                  "recommended": true
                },
                "type": "suggestion",
                "fixable": "code"
              }
            }
          },
          "meta": { "version": "4.14.0", "name": "eslint-plugin-perfectionist" }
        }
      },
      "rules": {
        "perfectionist/sort-variable-declarations": [
          "error",
          { "type": "natural", "order": "asc" }
        ],
        "perfectionist/sort-intersection-types": ["error", null],
        "perfectionist/sort-heritage-clauses": ["error", null],
        "perfectionist/sort-array-includes": ["error", null],
        "perfectionist/sort-named-imports": ["error", null],
        "perfectionist/sort-named-exports": ["error", null],
        "perfectionist/sort-object-types": ["error", null],
        "perfectionist/sort-union-types": ["error", null],
        "perfectionist/sort-switch-case": ["error", null],
        "perfectionist/sort-decorators": ["error", null],
        "perfectionist/sort-interfaces": ["error", null],
        "perfectionist/sort-jsx-props": ["error", null],
        "perfectionist/sort-modules": ["error", null],
        "perfectionist/sort-classes": ["error", null],
        "perfectionist/sort-imports": ["error", null],
        "perfectionist/sort-exports": ["error", null],
        "perfectionist/sort-objects": ["error", null],
        "perfectionist/sort-enums": ["error", null],
        "perfectionist/sort-sets": ["error", null],
        "perfectionist/sort-maps": ["error", null]
      },
      "name": "@repo/eslint-config/base__@virtual-live-lab/eslint-config/stylistic"
    },
    {
      "name": "@repo/eslint-config/base__@virtual-live-lab/eslint-config/stylistic",
      "rules": {
        "perfectionist/sort-modules": "off",
        "perfectionist/sort-object-types": [
          "error",
          {
            "ignoreCase": true,
            "order": "asc",
            "partitionByNewLine": true,
            "type": "natural"
          }
        ],
        "perfectionist/sort-objects": [
          "error",
          {
            "ignoreCase": true,
            "order": "asc",
            "partitionByNewLine": true,
            "type": "natural"
          }
        ],
        "perfectionist/sort-union-types": [
          "error",
          {
            "groups": [
              "conditional",
              "function",
              "import",
              "intersection",
              "keyword",
              "literal",
              "named",
              "object",
              "operator",
              "tuple",
              "union",
              "nullish"
            ],
            "order": "asc",
            "type": "natural"
          }
        ]
      }
    },
    {
      "name": "@repo/eslint-config/base__@virtual-live-lab/eslint-config/typescript__typescript-eslint/base",
      "languageOptions": {
        "parser": {
          "meta": { "name": "typescript-eslint/parser", "version": "8.33.1" }
        },
        "sourceType": "module"
      },
      "plugins": {
        "@typescript-eslint": {
          "configs": {
            "all": {
              "extends": [
                "./configs/eslintrc/base",
                "./configs/eslintrc/eslint-recommended"
              ],
              "rules": {
                "@typescript-eslint/adjacent-overload-signatures": "error",
                "@typescript-eslint/array-type": "error",
                "@typescript-eslint/await-thenable": "error",
                "@typescript-eslint/ban-ts-comment": "error",
                "@typescript-eslint/ban-tslint-comment": "error",
                "@typescript-eslint/class-literal-property-style": "error",
                "class-methods-use-this": "off",
                "@typescript-eslint/class-methods-use-this": "error",
                "@typescript-eslint/consistent-generic-constructors": "error",
                "@typescript-eslint/consistent-indexed-object-style": "error",
                "consistent-return": "off",
                "@typescript-eslint/consistent-return": "error",
                "@typescript-eslint/consistent-type-assertions": "error",
                "@typescript-eslint/consistent-type-definitions": "error",
                "@typescript-eslint/consistent-type-exports": "error",
                "@typescript-eslint/consistent-type-imports": "error",
                "default-param-last": "off",
                "@typescript-eslint/default-param-last": "error",
                "dot-notation": "off",
                "@typescript-eslint/dot-notation": "error",
                "@typescript-eslint/explicit-function-return-type": "error",
                "@typescript-eslint/explicit-member-accessibility": "error",
                "@typescript-eslint/explicit-module-boundary-types": "error",
                "init-declarations": "off",
                "@typescript-eslint/init-declarations": "error",
                "max-params": "off",
                "@typescript-eslint/max-params": "error",
                "@typescript-eslint/member-ordering": "error",
                "@typescript-eslint/method-signature-style": "error",
                "@typescript-eslint/naming-convention": "error",
                "no-array-constructor": "off",
                "@typescript-eslint/no-array-constructor": "error",
                "@typescript-eslint/no-array-delete": "error",
                "@typescript-eslint/no-base-to-string": "error",
                "@typescript-eslint/no-confusing-non-null-assertion": "error",
                "@typescript-eslint/no-confusing-void-expression": "error",
                "@typescript-eslint/no-deprecated": "error",
                "no-dupe-class-members": "off",
                "@typescript-eslint/no-dupe-class-members": "error",
                "@typescript-eslint/no-duplicate-enum-values": "error",
                "@typescript-eslint/no-duplicate-type-constituents": "error",
                "@typescript-eslint/no-dynamic-delete": "error",
                "no-empty-function": "off",
                "@typescript-eslint/no-empty-function": "error",
                "@typescript-eslint/no-empty-object-type": "error",
                "@typescript-eslint/no-explicit-any": "error",
                "@typescript-eslint/no-extra-non-null-assertion": "error",
                "@typescript-eslint/no-extraneous-class": "error",
                "@typescript-eslint/no-floating-promises": "error",
                "@typescript-eslint/no-for-in-array": "error",
                "no-implied-eval": "off",
                "@typescript-eslint/no-implied-eval": "error",
                "@typescript-eslint/no-import-type-side-effects": "error",
                "@typescript-eslint/no-inferrable-types": "error",
                "no-invalid-this": "off",
                "@typescript-eslint/no-invalid-this": "error",
                "@typescript-eslint/no-invalid-void-type": "error",
                "no-loop-func": "off",
                "@typescript-eslint/no-loop-func": "error",
                "no-magic-numbers": "off",
                "@typescript-eslint/no-magic-numbers": "error",
                "@typescript-eslint/no-meaningless-void-operator": "error",
                "@typescript-eslint/no-misused-new": "error",
                "@typescript-eslint/no-misused-promises": "error",
                "@typescript-eslint/no-misused-spread": "error",
                "@typescript-eslint/no-mixed-enums": "error",
                "@typescript-eslint/no-namespace": "error",
                "@typescript-eslint/no-non-null-asserted-nullish-coalescing": "error",
                "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
                "@typescript-eslint/no-non-null-assertion": "error",
                "no-redeclare": "off",
                "@typescript-eslint/no-redeclare": "error",
                "@typescript-eslint/no-redundant-type-constituents": "error",
                "@typescript-eslint/no-require-imports": "error",
                "no-restricted-imports": "off",
                "@typescript-eslint/no-restricted-imports": "error",
                "@typescript-eslint/no-restricted-types": "error",
                "no-shadow": "off",
                "@typescript-eslint/no-shadow": "error",
                "@typescript-eslint/no-this-alias": "error",
                "@typescript-eslint/no-unnecessary-boolean-literal-compare": "error",
                "@typescript-eslint/no-unnecessary-condition": "error",
                "@typescript-eslint/no-unnecessary-parameter-property-assignment": "error",
                "@typescript-eslint/no-unnecessary-qualifier": "error",
                "@typescript-eslint/no-unnecessary-template-expression": "error",
                "@typescript-eslint/no-unnecessary-type-arguments": "error",
                "@typescript-eslint/no-unnecessary-type-assertion": "error",
                "@typescript-eslint/no-unnecessary-type-constraint": "error",
                "@typescript-eslint/no-unnecessary-type-conversion": "error",
                "@typescript-eslint/no-unnecessary-type-parameters": "error",
                "@typescript-eslint/no-unsafe-argument": "error",
                "@typescript-eslint/no-unsafe-assignment": "error",
                "@typescript-eslint/no-unsafe-call": "error",
                "@typescript-eslint/no-unsafe-declaration-merging": "error",
                "@typescript-eslint/no-unsafe-enum-comparison": "error",
                "@typescript-eslint/no-unsafe-function-type": "error",
                "@typescript-eslint/no-unsafe-member-access": "error",
                "@typescript-eslint/no-unsafe-return": "error",
                "@typescript-eslint/no-unsafe-type-assertion": "error",
                "@typescript-eslint/no-unsafe-unary-minus": "error",
                "no-unused-expressions": "off",
                "@typescript-eslint/no-unused-expressions": "error",
                "no-unused-vars": "off",
                "@typescript-eslint/no-unused-vars": "error",
                "no-use-before-define": "off",
                "@typescript-eslint/no-use-before-define": "error",
                "no-useless-constructor": "off",
                "@typescript-eslint/no-useless-constructor": "error",
                "@typescript-eslint/no-useless-empty-export": "error",
                "@typescript-eslint/no-wrapper-object-types": "error",
                "@typescript-eslint/non-nullable-type-assertion-style": "error",
                "no-throw-literal": "off",
                "@typescript-eslint/only-throw-error": "error",
                "@typescript-eslint/parameter-properties": "error",
                "@typescript-eslint/prefer-as-const": "error",
                "prefer-destructuring": "off",
                "@typescript-eslint/prefer-destructuring": "error",
                "@typescript-eslint/prefer-enum-initializers": "error",
                "@typescript-eslint/prefer-find": "error",
                "@typescript-eslint/prefer-for-of": "error",
                "@typescript-eslint/prefer-function-type": "error",
                "@typescript-eslint/prefer-includes": "error",
                "@typescript-eslint/prefer-literal-enum-member": "error",
                "@typescript-eslint/prefer-namespace-keyword": "error",
                "@typescript-eslint/prefer-nullish-coalescing": "error",
                "@typescript-eslint/prefer-optional-chain": "error",
                "prefer-promise-reject-errors": "off",
                "@typescript-eslint/prefer-promise-reject-errors": "error",
                "@typescript-eslint/prefer-readonly": "error",
                "@typescript-eslint/prefer-readonly-parameter-types": "error",
                "@typescript-eslint/prefer-reduce-type-parameter": "error",
                "@typescript-eslint/prefer-regexp-exec": "error",
                "@typescript-eslint/prefer-return-this-type": "error",
                "@typescript-eslint/prefer-string-starts-ends-with": "error",
                "@typescript-eslint/promise-function-async": "error",
                "@typescript-eslint/related-getter-setter-pairs": "error",
                "@typescript-eslint/require-array-sort-compare": "error",
                "require-await": "off",
                "@typescript-eslint/require-await": "error",
                "@typescript-eslint/restrict-plus-operands": "error",
                "@typescript-eslint/restrict-template-expressions": "error",
                "no-return-await": "off",
                "@typescript-eslint/return-await": "error",
                "@typescript-eslint/strict-boolean-expressions": "error",
                "@typescript-eslint/switch-exhaustiveness-check": "error",
                "@typescript-eslint/triple-slash-reference": "error",
                "@typescript-eslint/unbound-method": "error",
                "@typescript-eslint/unified-signatures": "error",
                "@typescript-eslint/use-unknown-in-catch-callback-variable": "error"
              }
            },
            "base": {
              "parser": "@typescript-eslint/parser",
              "parserOptions": { "sourceType": "module" },
              "plugins": ["@typescript-eslint"]
            },
            "disable-type-checked": {
              "parserOptions": {
                "program": null,
                "project": false,
                "projectService": false
              },
              "rules": {
                "@typescript-eslint/await-thenable": "off",
                "@typescript-eslint/consistent-return": "off",
                "@typescript-eslint/consistent-type-exports": "off",
                "@typescript-eslint/dot-notation": "off",
                "@typescript-eslint/naming-convention": "off",
                "@typescript-eslint/no-array-delete": "off",
                "@typescript-eslint/no-base-to-string": "off",
                "@typescript-eslint/no-confusing-void-expression": "off",
                "@typescript-eslint/no-deprecated": "off",
                "@typescript-eslint/no-duplicate-type-constituents": "off",
                "@typescript-eslint/no-floating-promises": "off",
                "@typescript-eslint/no-for-in-array": "off",
                "@typescript-eslint/no-implied-eval": "off",
                "@typescript-eslint/no-meaningless-void-operator": "off",
                "@typescript-eslint/no-misused-promises": "off",
                "@typescript-eslint/no-misused-spread": "off",
                "@typescript-eslint/no-mixed-enums": "off",
                "@typescript-eslint/no-redundant-type-constituents": "off",
                "@typescript-eslint/no-unnecessary-boolean-literal-compare": "off",
                "@typescript-eslint/no-unnecessary-condition": "off",
                "@typescript-eslint/no-unnecessary-qualifier": "off",
                "@typescript-eslint/no-unnecessary-template-expression": "off",
                "@typescript-eslint/no-unnecessary-type-arguments": "off",
                "@typescript-eslint/no-unnecessary-type-assertion": "off",
                "@typescript-eslint/no-unnecessary-type-conversion": "off",
                "@typescript-eslint/no-unnecessary-type-parameters": "off",
                "@typescript-eslint/no-unsafe-argument": "off",
                "@typescript-eslint/no-unsafe-assignment": "off",
                "@typescript-eslint/no-unsafe-call": "off",
                "@typescript-eslint/no-unsafe-enum-comparison": "off",
                "@typescript-eslint/no-unsafe-member-access": "off",
                "@typescript-eslint/no-unsafe-return": "off",
                "@typescript-eslint/no-unsafe-type-assertion": "off",
                "@typescript-eslint/no-unsafe-unary-minus": "off",
                "@typescript-eslint/non-nullable-type-assertion-style": "off",
                "@typescript-eslint/only-throw-error": "off",
                "@typescript-eslint/prefer-destructuring": "off",
                "@typescript-eslint/prefer-find": "off",
                "@typescript-eslint/prefer-includes": "off",
                "@typescript-eslint/prefer-nullish-coalescing": "off",
                "@typescript-eslint/prefer-optional-chain": "off",
                "@typescript-eslint/prefer-promise-reject-errors": "off",
                "@typescript-eslint/prefer-readonly": "off",
                "@typescript-eslint/prefer-readonly-parameter-types": "off",
                "@typescript-eslint/prefer-reduce-type-parameter": "off",
                "@typescript-eslint/prefer-regexp-exec": "off",
                "@typescript-eslint/prefer-return-this-type": "off",
                "@typescript-eslint/prefer-string-starts-ends-with": "off",
                "@typescript-eslint/promise-function-async": "off",
                "@typescript-eslint/related-getter-setter-pairs": "off",
                "@typescript-eslint/require-array-sort-compare": "off",
                "@typescript-eslint/require-await": "off",
                "@typescript-eslint/restrict-plus-operands": "off",
                "@typescript-eslint/restrict-template-expressions": "off",
                "@typescript-eslint/return-await": "off",
                "@typescript-eslint/strict-boolean-expressions": "off",
                "@typescript-eslint/switch-exhaustiveness-check": "off",
                "@typescript-eslint/unbound-method": "off",
                "@typescript-eslint/use-unknown-in-catch-callback-variable": "off"
              }
            },
            "eslint-recommended": {
              "overrides": [
                {
                  "files": ["*.ts", "*.tsx", "*.mts", "*.cts"],
                  "rules": {
                    "constructor-super": "off",
                    "getter-return": "off",
                    "no-class-assign": "off",
                    "no-const-assign": "off",
                    "no-dupe-args": "off",
                    "no-dupe-class-members": "off",
                    "no-dupe-keys": "off",
                    "no-func-assign": "off",
                    "no-import-assign": "off",
                    "no-new-native-nonconstructor": "off",
                    "no-new-symbol": "off",
                    "no-obj-calls": "off",
                    "no-redeclare": "off",
                    "no-setter-return": "off",
                    "no-this-before-super": "off",
                    "no-undef": "off",
                    "no-unreachable": "off",
                    "no-unsafe-negation": "off",
                    "no-var": "error",
                    "no-with": "off",
                    "prefer-const": "error",
                    "prefer-rest-params": "error",
                    "prefer-spread": "error"
                  }
                }
              ]
            },
            "recommended": {
              "extends": [
                "./configs/eslintrc/base",
                "./configs/eslintrc/eslint-recommended"
              ],
              "rules": {
                "@typescript-eslint/ban-ts-comment": "error",
                "no-array-constructor": "off",
                "@typescript-eslint/no-array-constructor": "error",
                "@typescript-eslint/no-duplicate-enum-values": "error",
                "@typescript-eslint/no-empty-object-type": "error",
                "@typescript-eslint/no-explicit-any": "error",
                "@typescript-eslint/no-extra-non-null-assertion": "error",
                "@typescript-eslint/no-misused-new": "error",
                "@typescript-eslint/no-namespace": "error",
                "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
                "@typescript-eslint/no-require-imports": "error",
                "@typescript-eslint/no-this-alias": "error",
                "@typescript-eslint/no-unnecessary-type-constraint": "error",
                "@typescript-eslint/no-unsafe-declaration-merging": "error",
                "@typescript-eslint/no-unsafe-function-type": "error",
                "no-unused-expressions": "off",
                "@typescript-eslint/no-unused-expressions": "error",
                "no-unused-vars": "off",
                "@typescript-eslint/no-unused-vars": "error",
                "@typescript-eslint/no-wrapper-object-types": "error",
                "@typescript-eslint/prefer-as-const": "error",
                "@typescript-eslint/prefer-namespace-keyword": "error",
                "@typescript-eslint/triple-slash-reference": "error"
              }
            },
            "recommended-requiring-type-checking": {
              "extends": [
                "./configs/eslintrc/base",
                "./configs/eslintrc/eslint-recommended"
              ],
              "rules": {
                "@typescript-eslint/await-thenable": "error",
                "@typescript-eslint/ban-ts-comment": "error",
                "no-array-constructor": "off",
                "@typescript-eslint/no-array-constructor": "error",
                "@typescript-eslint/no-array-delete": "error",
                "@typescript-eslint/no-base-to-string": "error",
                "@typescript-eslint/no-duplicate-enum-values": "error",
                "@typescript-eslint/no-duplicate-type-constituents": "error",
                "@typescript-eslint/no-empty-object-type": "error",
                "@typescript-eslint/no-explicit-any": "error",
                "@typescript-eslint/no-extra-non-null-assertion": "error",
                "@typescript-eslint/no-floating-promises": "error",
                "@typescript-eslint/no-for-in-array": "error",
                "no-implied-eval": "off",
                "@typescript-eslint/no-implied-eval": "error",
                "@typescript-eslint/no-misused-new": "error",
                "@typescript-eslint/no-misused-promises": "error",
                "@typescript-eslint/no-namespace": "error",
                "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
                "@typescript-eslint/no-redundant-type-constituents": "error",
                "@typescript-eslint/no-require-imports": "error",
                "@typescript-eslint/no-this-alias": "error",
                "@typescript-eslint/no-unnecessary-type-assertion": "error",
                "@typescript-eslint/no-unnecessary-type-constraint": "error",
                "@typescript-eslint/no-unsafe-argument": "error",
                "@typescript-eslint/no-unsafe-assignment": "error",
                "@typescript-eslint/no-unsafe-call": "error",
                "@typescript-eslint/no-unsafe-declaration-merging": "error",
                "@typescript-eslint/no-unsafe-enum-comparison": "error",
                "@typescript-eslint/no-unsafe-function-type": "error",
                "@typescript-eslint/no-unsafe-member-access": "error",
                "@typescript-eslint/no-unsafe-return": "error",
                "@typescript-eslint/no-unsafe-unary-minus": "error",
                "no-unused-expressions": "off",
                "@typescript-eslint/no-unused-expressions": "error",
                "no-unused-vars": "off",
                "@typescript-eslint/no-unused-vars": "error",
                "@typescript-eslint/no-wrapper-object-types": "error",
                "no-throw-literal": "off",
                "@typescript-eslint/only-throw-error": "error",
                "@typescript-eslint/prefer-as-const": "error",
                "@typescript-eslint/prefer-namespace-keyword": "error",
                "prefer-promise-reject-errors": "off",
                "@typescript-eslint/prefer-promise-reject-errors": "error",
                "require-await": "off",
                "@typescript-eslint/require-await": "error",
                "@typescript-eslint/restrict-plus-operands": "error",
                "@typescript-eslint/restrict-template-expressions": "error",
                "@typescript-eslint/triple-slash-reference": "error",
                "@typescript-eslint/unbound-method": "error"
              }
            },
            "recommended-type-checked-only": {
              "extends": [
                "./configs/eslintrc/base",
                "./configs/eslintrc/eslint-recommended"
              ],
              "rules": {
                "@typescript-eslint/await-thenable": "error",
                "@typescript-eslint/no-array-delete": "error",
                "@typescript-eslint/no-base-to-string": "error",
                "@typescript-eslint/no-duplicate-type-constituents": "error",
                "@typescript-eslint/no-floating-promises": "error",
                "@typescript-eslint/no-for-in-array": "error",
                "no-implied-eval": "off",
                "@typescript-eslint/no-implied-eval": "error",
                "@typescript-eslint/no-misused-promises": "error",
                "@typescript-eslint/no-redundant-type-constituents": "error",
                "@typescript-eslint/no-unnecessary-type-assertion": "error",
                "@typescript-eslint/no-unsafe-argument": "error",
                "@typescript-eslint/no-unsafe-assignment": "error",
                "@typescript-eslint/no-unsafe-call": "error",
                "@typescript-eslint/no-unsafe-enum-comparison": "error",
                "@typescript-eslint/no-unsafe-member-access": "error",
                "@typescript-eslint/no-unsafe-return": "error",
                "@typescript-eslint/no-unsafe-unary-minus": "error",
                "no-throw-literal": "off",
                "@typescript-eslint/only-throw-error": "error",
                "prefer-promise-reject-errors": "off",
                "@typescript-eslint/prefer-promise-reject-errors": "error",
                "require-await": "off",
                "@typescript-eslint/require-await": "error",
                "@typescript-eslint/restrict-plus-operands": "error",
                "@typescript-eslint/restrict-template-expressions": "error",
                "@typescript-eslint/unbound-method": "error"
              }
            },
            "strict": {
              "extends": [
                "./configs/eslintrc/base",
                "./configs/eslintrc/eslint-recommended"
              ],
              "rules": {
                "@typescript-eslint/ban-ts-comment": [
                  "error",
                  { "minimumDescriptionLength": 10 }
                ],
                "no-array-constructor": "off",
                "@typescript-eslint/no-array-constructor": "error",
                "@typescript-eslint/no-duplicate-enum-values": "error",
                "@typescript-eslint/no-dynamic-delete": "error",
                "@typescript-eslint/no-empty-object-type": "error",
                "@typescript-eslint/no-explicit-any": "error",
                "@typescript-eslint/no-extra-non-null-assertion": "error",
                "@typescript-eslint/no-extraneous-class": "error",
                "@typescript-eslint/no-invalid-void-type": "error",
                "@typescript-eslint/no-misused-new": "error",
                "@typescript-eslint/no-namespace": "error",
                "@typescript-eslint/no-non-null-asserted-nullish-coalescing": "error",
                "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
                "@typescript-eslint/no-non-null-assertion": "error",
                "@typescript-eslint/no-require-imports": "error",
                "@typescript-eslint/no-this-alias": "error",
                "@typescript-eslint/no-unnecessary-type-constraint": "error",
                "@typescript-eslint/no-unsafe-declaration-merging": "error",
                "@typescript-eslint/no-unsafe-function-type": "error",
                "no-unused-expressions": "off",
                "@typescript-eslint/no-unused-expressions": "error",
                "no-unused-vars": "off",
                "@typescript-eslint/no-unused-vars": "error",
                "no-useless-constructor": "off",
                "@typescript-eslint/no-useless-constructor": "error",
                "@typescript-eslint/no-wrapper-object-types": "error",
                "@typescript-eslint/prefer-as-const": "error",
                "@typescript-eslint/prefer-literal-enum-member": "error",
                "@typescript-eslint/prefer-namespace-keyword": "error",
                "@typescript-eslint/triple-slash-reference": "error",
                "@typescript-eslint/unified-signatures": "error"
              }
            },
            "strict-type-checked": {
              "extends": [
                "./configs/eslintrc/base",
                "./configs/eslintrc/eslint-recommended"
              ],
              "rules": {
                "@typescript-eslint/await-thenable": "error",
                "@typescript-eslint/ban-ts-comment": [
                  "error",
                  { "minimumDescriptionLength": 10 }
                ],
                "no-array-constructor": "off",
                "@typescript-eslint/no-array-constructor": "error",
                "@typescript-eslint/no-array-delete": "error",
                "@typescript-eslint/no-base-to-string": "error",
                "@typescript-eslint/no-confusing-void-expression": "error",
                "@typescript-eslint/no-deprecated": "error",
                "@typescript-eslint/no-duplicate-enum-values": "error",
                "@typescript-eslint/no-duplicate-type-constituents": "error",
                "@typescript-eslint/no-dynamic-delete": "error",
                "@typescript-eslint/no-empty-object-type": "error",
                "@typescript-eslint/no-explicit-any": "error",
                "@typescript-eslint/no-extra-non-null-assertion": "error",
                "@typescript-eslint/no-extraneous-class": "error",
                "@typescript-eslint/no-floating-promises": "error",
                "@typescript-eslint/no-for-in-array": "error",
                "no-implied-eval": "off",
                "@typescript-eslint/no-implied-eval": "error",
                "@typescript-eslint/no-invalid-void-type": "error",
                "@typescript-eslint/no-meaningless-void-operator": "error",
                "@typescript-eslint/no-misused-new": "error",
                "@typescript-eslint/no-misused-promises": "error",
                "@typescript-eslint/no-misused-spread": "error",
                "@typescript-eslint/no-mixed-enums": "error",
                "@typescript-eslint/no-namespace": "error",
                "@typescript-eslint/no-non-null-asserted-nullish-coalescing": "error",
                "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
                "@typescript-eslint/no-non-null-assertion": "error",
                "@typescript-eslint/no-redundant-type-constituents": "error",
                "@typescript-eslint/no-require-imports": "error",
                "@typescript-eslint/no-this-alias": "error",
                "@typescript-eslint/no-unnecessary-boolean-literal-compare": "error",
                "@typescript-eslint/no-unnecessary-condition": "error",
                "@typescript-eslint/no-unnecessary-template-expression": "error",
                "@typescript-eslint/no-unnecessary-type-arguments": "error",
                "@typescript-eslint/no-unnecessary-type-assertion": "error",
                "@typescript-eslint/no-unnecessary-type-constraint": "error",
                "@typescript-eslint/no-unnecessary-type-parameters": "error",
                "@typescript-eslint/no-unsafe-argument": "error",
                "@typescript-eslint/no-unsafe-assignment": "error",
                "@typescript-eslint/no-unsafe-call": "error",
                "@typescript-eslint/no-unsafe-declaration-merging": "error",
                "@typescript-eslint/no-unsafe-enum-comparison": "error",
                "@typescript-eslint/no-unsafe-function-type": "error",
                "@typescript-eslint/no-unsafe-member-access": "error",
                "@typescript-eslint/no-unsafe-return": "error",
                "@typescript-eslint/no-unsafe-unary-minus": "error",
                "no-unused-expressions": "off",
                "@typescript-eslint/no-unused-expressions": "error",
                "no-unused-vars": "off",
                "@typescript-eslint/no-unused-vars": "error",
                "no-useless-constructor": "off",
                "@typescript-eslint/no-useless-constructor": "error",
                "@typescript-eslint/no-wrapper-object-types": "error",
                "no-throw-literal": "off",
                "@typescript-eslint/only-throw-error": "error",
                "@typescript-eslint/prefer-as-const": "error",
                "@typescript-eslint/prefer-literal-enum-member": "error",
                "@typescript-eslint/prefer-namespace-keyword": "error",
                "prefer-promise-reject-errors": "off",
                "@typescript-eslint/prefer-promise-reject-errors": "error",
                "@typescript-eslint/prefer-reduce-type-parameter": "error",
                "@typescript-eslint/prefer-return-this-type": "error",
                "@typescript-eslint/related-getter-setter-pairs": "error",
                "require-await": "off",
                "@typescript-eslint/require-await": "error",
                "@typescript-eslint/restrict-plus-operands": [
                  "error",
                  {
                    "allowAny": false,
                    "allowBoolean": false,
                    "allowNullish": false,
                    "allowNumberAndString": false,
                    "allowRegExp": false
                  }
                ],
                "@typescript-eslint/restrict-template-expressions": [
                  "error",
                  {
                    "allowAny": false,
                    "allowBoolean": false,
                    "allowNever": false,
                    "allowNullish": false,
                    "allowNumber": false,
                    "allowRegExp": false
                  }
                ],
                "no-return-await": "off",
                "@typescript-eslint/return-await": [
                  "error",
                  "error-handling-correctness-only"
                ],
                "@typescript-eslint/triple-slash-reference": "error",
                "@typescript-eslint/unbound-method": "error",
                "@typescript-eslint/unified-signatures": "error",
                "@typescript-eslint/use-unknown-in-catch-callback-variable": "error"
              }
            },
            "strict-type-checked-only": {
              "extends": [
                "./configs/eslintrc/base",
                "./configs/eslintrc/eslint-recommended"
              ],
              "rules": {
                "@typescript-eslint/await-thenable": "error",
                "@typescript-eslint/no-array-delete": "error",
                "@typescript-eslint/no-base-to-string": "error",
                "@typescript-eslint/no-confusing-void-expression": "error",
                "@typescript-eslint/no-deprecated": "error",
                "@typescript-eslint/no-duplicate-type-constituents": "error",
                "@typescript-eslint/no-floating-promises": "error",
                "@typescript-eslint/no-for-in-array": "error",
                "no-implied-eval": "off",
                "@typescript-eslint/no-implied-eval": "error",
                "@typescript-eslint/no-meaningless-void-operator": "error",
                "@typescript-eslint/no-misused-promises": "error",
                "@typescript-eslint/no-misused-spread": "error",
                "@typescript-eslint/no-mixed-enums": "error",
                "@typescript-eslint/no-redundant-type-constituents": "error",
                "@typescript-eslint/no-unnecessary-boolean-literal-compare": "error",
                "@typescript-eslint/no-unnecessary-condition": "error",
                "@typescript-eslint/no-unnecessary-template-expression": "error",
                "@typescript-eslint/no-unnecessary-type-arguments": "error",
                "@typescript-eslint/no-unnecessary-type-assertion": "error",
                "@typescript-eslint/no-unnecessary-type-parameters": "error",
                "@typescript-eslint/no-unsafe-argument": "error",
                "@typescript-eslint/no-unsafe-assignment": "error",
                "@typescript-eslint/no-unsafe-call": "error",
                "@typescript-eslint/no-unsafe-enum-comparison": "error",
                "@typescript-eslint/no-unsafe-member-access": "error",
                "@typescript-eslint/no-unsafe-return": "error",
                "@typescript-eslint/no-unsafe-unary-minus": "error",
                "no-throw-literal": "off",
                "@typescript-eslint/only-throw-error": "error",
                "prefer-promise-reject-errors": "off",
                "@typescript-eslint/prefer-promise-reject-errors": "error",
                "@typescript-eslint/prefer-reduce-type-parameter": "error",
                "@typescript-eslint/prefer-return-this-type": "error",
                "@typescript-eslint/related-getter-setter-pairs": "error",
                "require-await": "off",
                "@typescript-eslint/require-await": "error",
                "@typescript-eslint/restrict-plus-operands": [
                  "error",
                  {
                    "allowAny": false,
                    "allowBoolean": false,
                    "allowNullish": false,
                    "allowNumberAndString": false,
                    "allowRegExp": false
                  }
                ],
                "@typescript-eslint/restrict-template-expressions": [
                  "error",
                  {
                    "allowAny": false,
                    "allowBoolean": false,
                    "allowNever": false,
                    "allowNullish": false,
                    "allowNumber": false,
                    "allowRegExp": false
                  }
                ],
                "no-return-await": "off",
                "@typescript-eslint/return-await": [
                  "error",
                  "error-handling-correctness-only"
                ],
                "@typescript-eslint/unbound-method": "error",
                "@typescript-eslint/use-unknown-in-catch-callback-variable": "error"
              }
            },
            "stylistic": {
              "extends": [
                "./configs/eslintrc/base",
                "./configs/eslintrc/eslint-recommended"
              ],
              "rules": {
                "@typescript-eslint/adjacent-overload-signatures": "error",
                "@typescript-eslint/array-type": "error",
                "@typescript-eslint/ban-tslint-comment": "error",
                "@typescript-eslint/class-literal-property-style": "error",
                "@typescript-eslint/consistent-generic-constructors": "error",
                "@typescript-eslint/consistent-indexed-object-style": "error",
                "@typescript-eslint/consistent-type-assertions": "error",
                "@typescript-eslint/consistent-type-definitions": "error",
                "@typescript-eslint/no-confusing-non-null-assertion": "error",
                "no-empty-function": "off",
                "@typescript-eslint/no-empty-function": "error",
                "@typescript-eslint/no-inferrable-types": "error",
                "@typescript-eslint/prefer-for-of": "error",
                "@typescript-eslint/prefer-function-type": "error"
              }
            },
            "stylistic-type-checked": {
              "extends": [
                "./configs/eslintrc/base",
                "./configs/eslintrc/eslint-recommended"
              ],
              "rules": {
                "@typescript-eslint/adjacent-overload-signatures": "error",
                "@typescript-eslint/array-type": "error",
                "@typescript-eslint/ban-tslint-comment": "error",
                "@typescript-eslint/class-literal-property-style": "error",
                "@typescript-eslint/consistent-generic-constructors": "error",
                "@typescript-eslint/consistent-indexed-object-style": "error",
                "@typescript-eslint/consistent-type-assertions": "error",
                "@typescript-eslint/consistent-type-definitions": "error",
                "dot-notation": "off",
                "@typescript-eslint/dot-notation": "error",
                "@typescript-eslint/no-confusing-non-null-assertion": "error",
                "no-empty-function": "off",
                "@typescript-eslint/no-empty-function": "error",
                "@typescript-eslint/no-inferrable-types": "error",
                "@typescript-eslint/non-nullable-type-assertion-style": "error",
                "@typescript-eslint/prefer-find": "error",
                "@typescript-eslint/prefer-for-of": "error",
                "@typescript-eslint/prefer-function-type": "error",
                "@typescript-eslint/prefer-includes": "error",
                "@typescript-eslint/prefer-nullish-coalescing": "error",
                "@typescript-eslint/prefer-optional-chain": "error",
                "@typescript-eslint/prefer-regexp-exec": "error",
                "@typescript-eslint/prefer-string-starts-ends-with": "error"
              }
            },
            "stylistic-type-checked-only": {
              "extends": [
                "./configs/eslintrc/base",
                "./configs/eslintrc/eslint-recommended"
              ],
              "rules": {
                "dot-notation": "off",
                "@typescript-eslint/dot-notation": "error",
                "@typescript-eslint/non-nullable-type-assertion-style": "error",
                "@typescript-eslint/prefer-find": "error",
                "@typescript-eslint/prefer-includes": "error",
                "@typescript-eslint/prefer-nullish-coalescing": "error",
                "@typescript-eslint/prefer-optional-chain": "error",
                "@typescript-eslint/prefer-regexp-exec": "error",
                "@typescript-eslint/prefer-string-starts-ends-with": "error"
              }
            },
            "flat/all": [
              {
                "name": "typescript-eslint/base",
                "languageOptions": { "sourceType": "module" },
                "plugins": {}
              },
              {
                "files": ["**/*.ts", "**/*.tsx", "**/*.mts", "**/*.cts"],
                "rules": {
                  "constructor-super": "off",
                  "getter-return": "off",
                  "no-class-assign": "off",
                  "no-const-assign": "off",
                  "no-dupe-args": "off",
                  "no-dupe-class-members": "off",
                  "no-dupe-keys": "off",
                  "no-func-assign": "off",
                  "no-import-assign": "off",
                  "no-new-native-nonconstructor": "off",
                  "no-new-symbol": "off",
                  "no-obj-calls": "off",
                  "no-redeclare": "off",
                  "no-setter-return": "off",
                  "no-this-before-super": "off",
                  "no-undef": "off",
                  "no-unreachable": "off",
                  "no-unsafe-negation": "off",
                  "no-var": "error",
                  "no-with": "off",
                  "prefer-const": "error",
                  "prefer-rest-params": "error",
                  "prefer-spread": "error"
                },
                "name": "typescript-eslint/eslint-recommended"
              },
              {
                "name": "typescript-eslint/all",
                "rules": {
                  "@typescript-eslint/adjacent-overload-signatures": "error",
                  "@typescript-eslint/array-type": "error",
                  "@typescript-eslint/await-thenable": "error",
                  "@typescript-eslint/ban-ts-comment": "error",
                  "@typescript-eslint/ban-tslint-comment": "error",
                  "@typescript-eslint/class-literal-property-style": "error",
                  "class-methods-use-this": "off",
                  "@typescript-eslint/class-methods-use-this": "error",
                  "@typescript-eslint/consistent-generic-constructors": "error",
                  "@typescript-eslint/consistent-indexed-object-style": "error",
                  "consistent-return": "off",
                  "@typescript-eslint/consistent-return": "error",
                  "@typescript-eslint/consistent-type-assertions": "error",
                  "@typescript-eslint/consistent-type-definitions": "error",
                  "@typescript-eslint/consistent-type-exports": "error",
                  "@typescript-eslint/consistent-type-imports": "error",
                  "default-param-last": "off",
                  "@typescript-eslint/default-param-last": "error",
                  "dot-notation": "off",
                  "@typescript-eslint/dot-notation": "error",
                  "@typescript-eslint/explicit-function-return-type": "error",
                  "@typescript-eslint/explicit-member-accessibility": "error",
                  "@typescript-eslint/explicit-module-boundary-types": "error",
                  "init-declarations": "off",
                  "@typescript-eslint/init-declarations": "error",
                  "max-params": "off",
                  "@typescript-eslint/max-params": "error",
                  "@typescript-eslint/member-ordering": "error",
                  "@typescript-eslint/method-signature-style": "error",
                  "@typescript-eslint/naming-convention": "error",
                  "no-array-constructor": "off",
                  "@typescript-eslint/no-array-constructor": "error",
                  "@typescript-eslint/no-array-delete": "error",
                  "@typescript-eslint/no-base-to-string": "error",
                  "@typescript-eslint/no-confusing-non-null-assertion": "error",
                  "@typescript-eslint/no-confusing-void-expression": "error",
                  "@typescript-eslint/no-deprecated": "error",
                  "no-dupe-class-members": "off",
                  "@typescript-eslint/no-dupe-class-members": "error",
                  "@typescript-eslint/no-duplicate-enum-values": "error",
                  "@typescript-eslint/no-duplicate-type-constituents": "error",
                  "@typescript-eslint/no-dynamic-delete": "error",
                  "no-empty-function": "off",
                  "@typescript-eslint/no-empty-function": "error",
                  "@typescript-eslint/no-empty-object-type": "error",
                  "@typescript-eslint/no-explicit-any": "error",
                  "@typescript-eslint/no-extra-non-null-assertion": "error",
                  "@typescript-eslint/no-extraneous-class": "error",
                  "@typescript-eslint/no-floating-promises": "error",
                  "@typescript-eslint/no-for-in-array": "error",
                  "no-implied-eval": "off",
                  "@typescript-eslint/no-implied-eval": "error",
                  "@typescript-eslint/no-import-type-side-effects": "error",
                  "@typescript-eslint/no-inferrable-types": "error",
                  "no-invalid-this": "off",
                  "@typescript-eslint/no-invalid-this": "error",
                  "@typescript-eslint/no-invalid-void-type": "error",
                  "no-loop-func": "off",
                  "@typescript-eslint/no-loop-func": "error",
                  "no-magic-numbers": "off",
                  "@typescript-eslint/no-magic-numbers": "error",
                  "@typescript-eslint/no-meaningless-void-operator": "error",
                  "@typescript-eslint/no-misused-new": "error",
                  "@typescript-eslint/no-misused-promises": "error",
                  "@typescript-eslint/no-misused-spread": "error",
                  "@typescript-eslint/no-mixed-enums": "error",
                  "@typescript-eslint/no-namespace": "error",
                  "@typescript-eslint/no-non-null-asserted-nullish-coalescing": "error",
                  "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
                  "@typescript-eslint/no-non-null-assertion": "error",
                  "no-redeclare": "off",
                  "@typescript-eslint/no-redeclare": "error",
                  "@typescript-eslint/no-redundant-type-constituents": "error",
                  "@typescript-eslint/no-require-imports": "error",
                  "no-restricted-imports": "off",
                  "@typescript-eslint/no-restricted-imports": "error",
                  "@typescript-eslint/no-restricted-types": "error",
                  "no-shadow": "off",
                  "@typescript-eslint/no-shadow": "error",
                  "@typescript-eslint/no-this-alias": "error",
                  "@typescript-eslint/no-unnecessary-boolean-literal-compare": "error",
                  "@typescript-eslint/no-unnecessary-condition": "error",
                  "@typescript-eslint/no-unnecessary-parameter-property-assignment": "error",
                  "@typescript-eslint/no-unnecessary-qualifier": "error",
                  "@typescript-eslint/no-unnecessary-template-expression": "error",
                  "@typescript-eslint/no-unnecessary-type-arguments": "error",
                  "@typescript-eslint/no-unnecessary-type-assertion": "error",
                  "@typescript-eslint/no-unnecessary-type-constraint": "error",
                  "@typescript-eslint/no-unnecessary-type-conversion": "error",
                  "@typescript-eslint/no-unnecessary-type-parameters": "error",
                  "@typescript-eslint/no-unsafe-argument": "error",
                  "@typescript-eslint/no-unsafe-assignment": "error",
                  "@typescript-eslint/no-unsafe-call": "error",
                  "@typescript-eslint/no-unsafe-declaration-merging": "error",
                  "@typescript-eslint/no-unsafe-enum-comparison": "error",
                  "@typescript-eslint/no-unsafe-function-type": "error",
                  "@typescript-eslint/no-unsafe-member-access": "error",
                  "@typescript-eslint/no-unsafe-return": "error",
                  "@typescript-eslint/no-unsafe-type-assertion": "error",
                  "@typescript-eslint/no-unsafe-unary-minus": "error",
                  "no-unused-expressions": "off",
                  "@typescript-eslint/no-unused-expressions": "error",
                  "no-unused-vars": "off",
                  "@typescript-eslint/no-unused-vars": "error",
                  "no-use-before-define": "off",
                  "@typescript-eslint/no-use-before-define": "error",
                  "no-useless-constructor": "off",
                  "@typescript-eslint/no-useless-constructor": "error",
                  "@typescript-eslint/no-useless-empty-export": "error",
                  "@typescript-eslint/no-wrapper-object-types": "error",
                  "@typescript-eslint/non-nullable-type-assertion-style": "error",
                  "no-throw-literal": "off",
                  "@typescript-eslint/only-throw-error": "error",
                  "@typescript-eslint/parameter-properties": "error",
                  "@typescript-eslint/prefer-as-const": "error",
                  "prefer-destructuring": "off",
                  "@typescript-eslint/prefer-destructuring": "error",
                  "@typescript-eslint/prefer-enum-initializers": "error",
                  "@typescript-eslint/prefer-find": "error",
                  "@typescript-eslint/prefer-for-of": "error",
                  "@typescript-eslint/prefer-function-type": "error",
                  "@typescript-eslint/prefer-includes": "error",
                  "@typescript-eslint/prefer-literal-enum-member": "error",
                  "@typescript-eslint/prefer-namespace-keyword": "error",
                  "@typescript-eslint/prefer-nullish-coalescing": "error",
                  "@typescript-eslint/prefer-optional-chain": "error",
                  "prefer-promise-reject-errors": "off",
                  "@typescript-eslint/prefer-promise-reject-errors": "error",
                  "@typescript-eslint/prefer-readonly": "error",
                  "@typescript-eslint/prefer-readonly-parameter-types": "error",
                  "@typescript-eslint/prefer-reduce-type-parameter": "error",
                  "@typescript-eslint/prefer-regexp-exec": "error",
                  "@typescript-eslint/prefer-return-this-type": "error",
                  "@typescript-eslint/prefer-string-starts-ends-with": "error",
                  "@typescript-eslint/promise-function-async": "error",
                  "@typescript-eslint/related-getter-setter-pairs": "error",
                  "@typescript-eslint/require-array-sort-compare": "error",
                  "require-await": "off",
                  "@typescript-eslint/require-await": "error",
                  "@typescript-eslint/restrict-plus-operands": "error",
                  "@typescript-eslint/restrict-template-expressions": "error",
                  "no-return-await": "off",
                  "@typescript-eslint/return-await": "error",
                  "@typescript-eslint/strict-boolean-expressions": "error",
                  "@typescript-eslint/switch-exhaustiveness-check": "error",
                  "@typescript-eslint/triple-slash-reference": "error",
                  "@typescript-eslint/unbound-method": "error",
                  "@typescript-eslint/unified-signatures": "error",
                  "@typescript-eslint/use-unknown-in-catch-callback-variable": "error"
                }
              }
            ],
            "flat/base": {
              "name": "typescript-eslint/base",
              "languageOptions": { "sourceType": "module" },
              "plugins": {}
            },
            "flat/disable-type-checked": {
              "name": "typescript-eslint/disable-type-checked",
              "rules": {
                "@typescript-eslint/await-thenable": "off",
                "@typescript-eslint/consistent-return": "off",
                "@typescript-eslint/consistent-type-exports": "off",
                "@typescript-eslint/dot-notation": "off",
                "@typescript-eslint/naming-convention": "off",
                "@typescript-eslint/no-array-delete": "off",
                "@typescript-eslint/no-base-to-string": "off",
                "@typescript-eslint/no-confusing-void-expression": "off",
                "@typescript-eslint/no-deprecated": "off",
                "@typescript-eslint/no-duplicate-type-constituents": "off",
                "@typescript-eslint/no-floating-promises": "off",
                "@typescript-eslint/no-for-in-array": "off",
                "@typescript-eslint/no-implied-eval": "off",
                "@typescript-eslint/no-meaningless-void-operator": "off",
                "@typescript-eslint/no-misused-promises": "off",
                "@typescript-eslint/no-misused-spread": "off",
                "@typescript-eslint/no-mixed-enums": "off",
                "@typescript-eslint/no-redundant-type-constituents": "off",
                "@typescript-eslint/no-unnecessary-boolean-literal-compare": "off",
                "@typescript-eslint/no-unnecessary-condition": "off",
                "@typescript-eslint/no-unnecessary-qualifier": "off",
                "@typescript-eslint/no-unnecessary-template-expression": "off",
                "@typescript-eslint/no-unnecessary-type-arguments": "off",
                "@typescript-eslint/no-unnecessary-type-assertion": "off",
                "@typescript-eslint/no-unnecessary-type-conversion": "off",
                "@typescript-eslint/no-unnecessary-type-parameters": "off",
                "@typescript-eslint/no-unsafe-argument": "off",
                "@typescript-eslint/no-unsafe-assignment": "off",
                "@typescript-eslint/no-unsafe-call": "off",
                "@typescript-eslint/no-unsafe-enum-comparison": "off",
                "@typescript-eslint/no-unsafe-member-access": "off",
                "@typescript-eslint/no-unsafe-return": "off",
                "@typescript-eslint/no-unsafe-type-assertion": "off",
                "@typescript-eslint/no-unsafe-unary-minus": "off",
                "@typescript-eslint/non-nullable-type-assertion-style": "off",
                "@typescript-eslint/only-throw-error": "off",
                "@typescript-eslint/prefer-destructuring": "off",
                "@typescript-eslint/prefer-find": "off",
                "@typescript-eslint/prefer-includes": "off",
                "@typescript-eslint/prefer-nullish-coalescing": "off",
                "@typescript-eslint/prefer-optional-chain": "off",
                "@typescript-eslint/prefer-promise-reject-errors": "off",
                "@typescript-eslint/prefer-readonly": "off",
                "@typescript-eslint/prefer-readonly-parameter-types": "off",
                "@typescript-eslint/prefer-reduce-type-parameter": "off",
                "@typescript-eslint/prefer-regexp-exec": "off",
                "@typescript-eslint/prefer-return-this-type": "off",
                "@typescript-eslint/prefer-string-starts-ends-with": "off",
                "@typescript-eslint/promise-function-async": "off",
                "@typescript-eslint/related-getter-setter-pairs": "off",
                "@typescript-eslint/require-array-sort-compare": "off",
                "@typescript-eslint/require-await": "off",
                "@typescript-eslint/restrict-plus-operands": "off",
                "@typescript-eslint/restrict-template-expressions": "off",
                "@typescript-eslint/return-await": "off",
                "@typescript-eslint/strict-boolean-expressions": "off",
                "@typescript-eslint/switch-exhaustiveness-check": "off",
                "@typescript-eslint/unbound-method": "off",
                "@typescript-eslint/use-unknown-in-catch-callback-variable": "off"
              },
              "languageOptions": {
                "parserOptions": {
                  "program": null,
                  "project": false,
                  "projectService": false
                }
              }
            },
            "flat/eslint-recommended": {
              "files": ["**/*.ts", "**/*.tsx", "**/*.mts", "**/*.cts"],
              "rules": {
                "constructor-super": "off",
                "getter-return": "off",
                "no-class-assign": "off",
                "no-const-assign": "off",
                "no-dupe-args": "off",
                "no-dupe-class-members": "off",
                "no-dupe-keys": "off",
                "no-func-assign": "off",
                "no-import-assign": "off",
                "no-new-native-nonconstructor": "off",
                "no-new-symbol": "off",
                "no-obj-calls": "off",
                "no-redeclare": "off",
                "no-setter-return": "off",
                "no-this-before-super": "off",
                "no-undef": "off",
                "no-unreachable": "off",
                "no-unsafe-negation": "off",
                "no-var": "error",
                "no-with": "off",
                "prefer-const": "error",
                "prefer-rest-params": "error",
                "prefer-spread": "error"
              },
              "name": "typescript-eslint/eslint-recommended"
            },
            "flat/recommended": [
              {
                "name": "typescript-eslint/base",
                "languageOptions": { "sourceType": "module" },
                "plugins": {}
              },
              {
                "files": ["**/*.ts", "**/*.tsx", "**/*.mts", "**/*.cts"],
                "rules": {
                  "constructor-super": "off",
                  "getter-return": "off",
                  "no-class-assign": "off",
                  "no-const-assign": "off",
                  "no-dupe-args": "off",
                  "no-dupe-class-members": "off",
                  "no-dupe-keys": "off",
                  "no-func-assign": "off",
                  "no-import-assign": "off",
                  "no-new-native-nonconstructor": "off",
                  "no-new-symbol": "off",
                  "no-obj-calls": "off",
                  "no-redeclare": "off",
                  "no-setter-return": "off",
                  "no-this-before-super": "off",
                  "no-undef": "off",
                  "no-unreachable": "off",
                  "no-unsafe-negation": "off",
                  "no-var": "error",
                  "no-with": "off",
                  "prefer-const": "error",
                  "prefer-rest-params": "error",
                  "prefer-spread": "error"
                },
                "name": "typescript-eslint/eslint-recommended"
              },
              {
                "name": "typescript-eslint/recommended",
                "rules": {
                  "@typescript-eslint/ban-ts-comment": "error",
                  "no-array-constructor": "off",
                  "@typescript-eslint/no-array-constructor": "error",
                  "@typescript-eslint/no-duplicate-enum-values": "error",
                  "@typescript-eslint/no-empty-object-type": "error",
                  "@typescript-eslint/no-explicit-any": "error",
                  "@typescript-eslint/no-extra-non-null-assertion": "error",
                  "@typescript-eslint/no-misused-new": "error",
                  "@typescript-eslint/no-namespace": "error",
                  "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
                  "@typescript-eslint/no-require-imports": "error",
                  "@typescript-eslint/no-this-alias": "error",
                  "@typescript-eslint/no-unnecessary-type-constraint": "error",
                  "@typescript-eslint/no-unsafe-declaration-merging": "error",
                  "@typescript-eslint/no-unsafe-function-type": "error",
                  "no-unused-expressions": "off",
                  "@typescript-eslint/no-unused-expressions": "error",
                  "no-unused-vars": "off",
                  "@typescript-eslint/no-unused-vars": "error",
                  "@typescript-eslint/no-wrapper-object-types": "error",
                  "@typescript-eslint/prefer-as-const": "error",
                  "@typescript-eslint/prefer-namespace-keyword": "error",
                  "@typescript-eslint/triple-slash-reference": "error"
                }
              }
            ],
            "flat/recommended-type-checked": [
              { "name": "typescript-eslint/base", "plugins": {} },
              {
                "files": ["**/*.ts", "**/*.tsx", "**/*.mts", "**/*.cts"],
                "rules": {
                  "constructor-super": "off",
                  "getter-return": "off",
                  "no-class-assign": "off",
                  "no-const-assign": "off",
                  "no-dupe-args": "off",
                  "no-dupe-class-members": "off",
                  "no-dupe-keys": "off",
                  "no-func-assign": "off",
                  "no-import-assign": "off",
                  "no-new-native-nonconstructor": "off",
                  "no-new-symbol": "off",
                  "no-obj-calls": "off",
                  "no-redeclare": "off",
                  "no-setter-return": "off",
                  "no-this-before-super": "off",
                  "no-undef": "off",
                  "no-unreachable": "off",
                  "no-unsafe-negation": "off",
                  "no-var": "error",
                  "no-with": "off",
                  "prefer-const": "error",
                  "prefer-rest-params": "error",
                  "prefer-spread": "error"
                },
                "name": "typescript-eslint/eslint-recommended"
              },
              {
                "name": "typescript-eslint/recommended-type-checked",
                "rules": {
                  "@typescript-eslint/await-thenable": "error",
                  "@typescript-eslint/ban-ts-comment": "error",
                  "no-array-constructor": "off",
                  "@typescript-eslint/no-array-constructor": "error",
                  "@typescript-eslint/no-array-delete": "error",
                  "@typescript-eslint/no-base-to-string": "error",
                  "@typescript-eslint/no-duplicate-enum-values": "error",
                  "@typescript-eslint/no-duplicate-type-constituents": "error",
                  "@typescript-eslint/no-empty-object-type": "error",
                  "@typescript-eslint/no-explicit-any": "error",
                  "@typescript-eslint/no-extra-non-null-assertion": "error",
                  "@typescript-eslint/no-floating-promises": "error",
                  "@typescript-eslint/no-for-in-array": "error",
                  "no-implied-eval": "off",
                  "@typescript-eslint/no-implied-eval": "error",
                  "@typescript-eslint/no-misused-new": "error",
                  "@typescript-eslint/no-misused-promises": "error",
                  "@typescript-eslint/no-namespace": "error",
                  "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
                  "@typescript-eslint/no-redundant-type-constituents": "error",
                  "@typescript-eslint/no-require-imports": "error",
                  "@typescript-eslint/no-this-alias": "error",
                  "@typescript-eslint/no-unnecessary-type-assertion": "error",
                  "@typescript-eslint/no-unnecessary-type-constraint": "error",
                  "@typescript-eslint/no-unsafe-argument": "error",
                  "@typescript-eslint/no-unsafe-assignment": "error",
                  "@typescript-eslint/no-unsafe-call": "error",
                  "@typescript-eslint/no-unsafe-declaration-merging": "error",
                  "@typescript-eslint/no-unsafe-enum-comparison": "error",
                  "@typescript-eslint/no-unsafe-function-type": "error",
                  "@typescript-eslint/no-unsafe-member-access": "error",
                  "@typescript-eslint/no-unsafe-return": "error",
                  "@typescript-eslint/no-unsafe-unary-minus": "error",
                  "no-unused-expressions": "off",
                  "@typescript-eslint/no-unused-expressions": "error",
                  "no-unused-vars": "off",
                  "@typescript-eslint/no-unused-vars": "error",
                  "@typescript-eslint/no-wrapper-object-types": "error",
                  "no-throw-literal": "off",
                  "@typescript-eslint/only-throw-error": "error",
                  "@typescript-eslint/prefer-as-const": "error",
                  "@typescript-eslint/prefer-namespace-keyword": "error",
                  "prefer-promise-reject-errors": "off",
                  "@typescript-eslint/prefer-promise-reject-errors": "error",
                  "require-await": "off",
                  "@typescript-eslint/require-await": "error",
                  "@typescript-eslint/restrict-plus-operands": "error",
                  "@typescript-eslint/restrict-template-expressions": "error",
                  "@typescript-eslint/triple-slash-reference": "error",
                  "@typescript-eslint/unbound-method": "error"
                }
              }
            ],
            "flat/recommended-type-checked-only": [
              {
                "name": "typescript-eslint/base",
                "languageOptions": { "sourceType": "module" },
                "plugins": {}
              },
              {
                "files": ["**/*.ts", "**/*.tsx", "**/*.mts", "**/*.cts"],
                "rules": {
                  "constructor-super": "off",
                  "getter-return": "off",
                  "no-class-assign": "off",
                  "no-const-assign": "off",
                  "no-dupe-args": "off",
                  "no-dupe-class-members": "off",
                  "no-dupe-keys": "off",
                  "no-func-assign": "off",
                  "no-import-assign": "off",
                  "no-new-native-nonconstructor": "off",
                  "no-new-symbol": "off",
                  "no-obj-calls": "off",
                  "no-redeclare": "off",
                  "no-setter-return": "off",
                  "no-this-before-super": "off",
                  "no-undef": "off",
                  "no-unreachable": "off",
                  "no-unsafe-negation": "off",
                  "no-var": "error",
                  "no-with": "off",
                  "prefer-const": "error",
                  "prefer-rest-params": "error",
                  "prefer-spread": "error"
                },
                "name": "typescript-eslint/eslint-recommended"
              },
              {
                "name": "typescript-eslint/recommended-type-checked-only",
                "rules": {
                  "@typescript-eslint/await-thenable": "error",
                  "@typescript-eslint/no-array-delete": "error",
                  "@typescript-eslint/no-base-to-string": "error",
                  "@typescript-eslint/no-duplicate-type-constituents": "error",
                  "@typescript-eslint/no-floating-promises": "error",
                  "@typescript-eslint/no-for-in-array": "error",
                  "no-implied-eval": "off",
                  "@typescript-eslint/no-implied-eval": "error",
                  "@typescript-eslint/no-misused-promises": "error",
                  "@typescript-eslint/no-redundant-type-constituents": "error",
                  "@typescript-eslint/no-unnecessary-type-assertion": "error",
                  "@typescript-eslint/no-unsafe-argument": "error",
                  "@typescript-eslint/no-unsafe-assignment": "error",
                  "@typescript-eslint/no-unsafe-call": "error",
                  "@typescript-eslint/no-unsafe-enum-comparison": "error",
                  "@typescript-eslint/no-unsafe-member-access": "error",
                  "@typescript-eslint/no-unsafe-return": "error",
                  "@typescript-eslint/no-unsafe-unary-minus": "error",
                  "no-throw-literal": "off",
                  "@typescript-eslint/only-throw-error": "error",
                  "prefer-promise-reject-errors": "off",
                  "@typescript-eslint/prefer-promise-reject-errors": "error",
                  "require-await": "off",
                  "@typescript-eslint/require-await": "error",
                  "@typescript-eslint/restrict-plus-operands": "error",
                  "@typescript-eslint/restrict-template-expressions": "error",
                  "@typescript-eslint/unbound-method": "error"
                }
              }
            ],
            "flat/strict": [
              {
                "name": "typescript-eslint/base",
                "languageOptions": { "sourceType": "module" },
                "plugins": {}
              },
              {
                "files": ["**/*.ts", "**/*.tsx", "**/*.mts", "**/*.cts"],
                "rules": {
                  "constructor-super": "off",
                  "getter-return": "off",
                  "no-class-assign": "off",
                  "no-const-assign": "off",
                  "no-dupe-args": "off",
                  "no-dupe-class-members": "off",
                  "no-dupe-keys": "off",
                  "no-func-assign": "off",
                  "no-import-assign": "off",
                  "no-new-native-nonconstructor": "off",
                  "no-new-symbol": "off",
                  "no-obj-calls": "off",
                  "no-redeclare": "off",
                  "no-setter-return": "off",
                  "no-this-before-super": "off",
                  "no-undef": "off",
                  "no-unreachable": "off",
                  "no-unsafe-negation": "off",
                  "no-var": "error",
                  "no-with": "off",
                  "prefer-const": "error",
                  "prefer-rest-params": "error",
                  "prefer-spread": "error"
                },
                "name": "typescript-eslint/eslint-recommended"
              },
              {
                "name": "typescript-eslint/strict",
                "rules": {
                  "@typescript-eslint/ban-ts-comment": [
                    "error",
                    { "minimumDescriptionLength": 10 }
                  ],
                  "no-array-constructor": "off",
                  "@typescript-eslint/no-array-constructor": "error",
                  "@typescript-eslint/no-duplicate-enum-values": "error",
                  "@typescript-eslint/no-dynamic-delete": "error",
                  "@typescript-eslint/no-empty-object-type": "error",
                  "@typescript-eslint/no-explicit-any": "error",
                  "@typescript-eslint/no-extra-non-null-assertion": "error",
                  "@typescript-eslint/no-extraneous-class": "error",
                  "@typescript-eslint/no-invalid-void-type": "error",
                  "@typescript-eslint/no-misused-new": "error",
                  "@typescript-eslint/no-namespace": "error",
                  "@typescript-eslint/no-non-null-asserted-nullish-coalescing": "error",
                  "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
                  "@typescript-eslint/no-non-null-assertion": "error",
                  "@typescript-eslint/no-require-imports": "error",
                  "@typescript-eslint/no-this-alias": "error",
                  "@typescript-eslint/no-unnecessary-type-constraint": "error",
                  "@typescript-eslint/no-unsafe-declaration-merging": "error",
                  "@typescript-eslint/no-unsafe-function-type": "error",
                  "no-unused-expressions": "off",
                  "@typescript-eslint/no-unused-expressions": "error",
                  "no-unused-vars": "off",
                  "@typescript-eslint/no-unused-vars": "error",
                  "no-useless-constructor": "off",
                  "@typescript-eslint/no-useless-constructor": "error",
                  "@typescript-eslint/no-wrapper-object-types": "error",
                  "@typescript-eslint/prefer-as-const": "error",
                  "@typescript-eslint/prefer-literal-enum-member": "error",
                  "@typescript-eslint/prefer-namespace-keyword": "error",
                  "@typescript-eslint/triple-slash-reference": "error",
                  "@typescript-eslint/unified-signatures": "error"
                }
              }
            ],
            "flat/strict-type-checked": [
              {
                "name": "typescript-eslint/base",
                "languageOptions": { "sourceType": "module" },
                "plugins": {}
              },
              {
                "files": ["**/*.ts", "**/*.tsx", "**/*.mts", "**/*.cts"],
                "rules": {
                  "constructor-super": "off",
                  "getter-return": "off",
                  "no-class-assign": "off",
                  "no-const-assign": "off",
                  "no-dupe-args": "off",
                  "no-dupe-class-members": "off",
                  "no-dupe-keys": "off",
                  "no-func-assign": "off",
                  "no-import-assign": "off",
                  "no-new-native-nonconstructor": "off",
                  "no-new-symbol": "off",
                  "no-obj-calls": "off",
                  "no-redeclare": "off",
                  "no-setter-return": "off",
                  "no-this-before-super": "off",
                  "no-undef": "off",
                  "no-unreachable": "off",
                  "no-unsafe-negation": "off",
                  "no-var": "error",
                  "no-with": "off",
                  "prefer-const": "error",
                  "prefer-rest-params": "error",
                  "prefer-spread": "error"
                },
                "name": "typescript-eslint/eslint-recommended"
              },
              {
                "name": "typescript-eslint/strict-type-checked",
                "rules": {
                  "@typescript-eslint/await-thenable": "error",
                  "@typescript-eslint/ban-ts-comment": [
                    "error",
                    { "minimumDescriptionLength": 10 }
                  ],
                  "no-array-constructor": "off",
                  "@typescript-eslint/no-array-constructor": "error",
                  "@typescript-eslint/no-array-delete": "error",
                  "@typescript-eslint/no-base-to-string": "error",
                  "@typescript-eslint/no-confusing-void-expression": "error",
                  "@typescript-eslint/no-deprecated": "error",
                  "@typescript-eslint/no-duplicate-enum-values": "error",
                  "@typescript-eslint/no-duplicate-type-constituents": "error",
                  "@typescript-eslint/no-dynamic-delete": "error",
                  "@typescript-eslint/no-empty-object-type": "error",
                  "@typescript-eslint/no-explicit-any": "error",
                  "@typescript-eslint/no-extra-non-null-assertion": "error",
                  "@typescript-eslint/no-extraneous-class": "error",
                  "@typescript-eslint/no-floating-promises": "error",
                  "@typescript-eslint/no-for-in-array": "error",
                  "no-implied-eval": "off",
                  "@typescript-eslint/no-implied-eval": "error",
                  "@typescript-eslint/no-invalid-void-type": "error",
                  "@typescript-eslint/no-meaningless-void-operator": "error",
                  "@typescript-eslint/no-misused-new": "error",
                  "@typescript-eslint/no-misused-promises": "error",
                  "@typescript-eslint/no-misused-spread": "error",
                  "@typescript-eslint/no-mixed-enums": "error",
                  "@typescript-eslint/no-namespace": "error",
                  "@typescript-eslint/no-non-null-asserted-nullish-coalescing": "error",
                  "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
                  "@typescript-eslint/no-non-null-assertion": "error",
                  "@typescript-eslint/no-redundant-type-constituents": "error",
                  "@typescript-eslint/no-require-imports": "error",
                  "@typescript-eslint/no-this-alias": "error",
                  "@typescript-eslint/no-unnecessary-boolean-literal-compare": "error",
                  "@typescript-eslint/no-unnecessary-condition": "error",
                  "@typescript-eslint/no-unnecessary-template-expression": "error",
                  "@typescript-eslint/no-unnecessary-type-arguments": "error",
                  "@typescript-eslint/no-unnecessary-type-assertion": "error",
                  "@typescript-eslint/no-unnecessary-type-constraint": "error",
                  "@typescript-eslint/no-unnecessary-type-parameters": "error",
                  "@typescript-eslint/no-unsafe-argument": "error",
                  "@typescript-eslint/no-unsafe-assignment": "error",
                  "@typescript-eslint/no-unsafe-call": "error",
                  "@typescript-eslint/no-unsafe-declaration-merging": "error",
                  "@typescript-eslint/no-unsafe-enum-comparison": "error",
                  "@typescript-eslint/no-unsafe-function-type": "error",
                  "@typescript-eslint/no-unsafe-member-access": "error",
                  "@typescript-eslint/no-unsafe-return": "error",
                  "@typescript-eslint/no-unsafe-unary-minus": "error",
                  "no-unused-expressions": "off",
                  "@typescript-eslint/no-unused-expressions": "error",
                  "no-unused-vars": "off",
                  "@typescript-eslint/no-unused-vars": "error",
                  "no-useless-constructor": "off",
                  "@typescript-eslint/no-useless-constructor": "error",
                  "@typescript-eslint/no-wrapper-object-types": "error",
                  "no-throw-literal": "off",
                  "@typescript-eslint/only-throw-error": "error",
                  "@typescript-eslint/prefer-as-const": "error",
                  "@typescript-eslint/prefer-literal-enum-member": "error",
                  "@typescript-eslint/prefer-namespace-keyword": "error",
                  "prefer-promise-reject-errors": "off",
                  "@typescript-eslint/prefer-promise-reject-errors": "error",
                  "@typescript-eslint/prefer-reduce-type-parameter": "error",
                  "@typescript-eslint/prefer-return-this-type": "error",
                  "@typescript-eslint/related-getter-setter-pairs": "error",
                  "require-await": "off",
                  "@typescript-eslint/require-await": "error",
                  "@typescript-eslint/restrict-plus-operands": [
                    "error",
                    {
                      "allowAny": false,
                      "allowBoolean": false,
                      "allowNullish": false,
                      "allowNumberAndString": false,
                      "allowRegExp": false
                    }
                  ],
                  "@typescript-eslint/restrict-template-expressions": [
                    "error",
                    {
                      "allowAny": false,
                      "allowBoolean": false,
                      "allowNever": false,
                      "allowNullish": false,
                      "allowNumber": false,
                      "allowRegExp": false
                    }
                  ],
                  "no-return-await": "off",
                  "@typescript-eslint/return-await": [
                    "error",
                    "error-handling-correctness-only"
                  ],
                  "@typescript-eslint/triple-slash-reference": "error",
                  "@typescript-eslint/unbound-method": "error",
                  "@typescript-eslint/unified-signatures": "error",
                  "@typescript-eslint/use-unknown-in-catch-callback-variable": "error"
                }
              }
            ],
            "flat/strict-type-checked-only": [
              {
                "name": "typescript-eslint/base",
                "languageOptions": { "sourceType": "module" },
                "plugins": {}
              },
              {
                "files": ["**/*.ts", "**/*.tsx", "**/*.mts", "**/*.cts"],
                "rules": {
                  "constructor-super": "off",
                  "getter-return": "off",
                  "no-class-assign": "off",
                  "no-const-assign": "off",
                  "no-dupe-args": "off",
                  "no-dupe-class-members": "off",
                  "no-dupe-keys": "off",
                  "no-func-assign": "off",
                  "no-import-assign": "off",
                  "no-new-native-nonconstructor": "off",
                  "no-new-symbol": "off",
                  "no-obj-calls": "off",
                  "no-redeclare": "off",
                  "no-setter-return": "off",
                  "no-this-before-super": "off",
                  "no-undef": "off",
                  "no-unreachable": "off",
                  "no-unsafe-negation": "off",
                  "no-var": "error",
                  "no-with": "off",
                  "prefer-const": "error",
                  "prefer-rest-params": "error",
                  "prefer-spread": "error"
                },
                "name": "typescript-eslint/eslint-recommended"
              },
              {
                "name": "typescript-eslint/strict-type-checked-only",
                "rules": {
                  "@typescript-eslint/await-thenable": "error",
                  "@typescript-eslint/no-array-delete": "error",
                  "@typescript-eslint/no-base-to-string": "error",
                  "@typescript-eslint/no-confusing-void-expression": "error",
                  "@typescript-eslint/no-deprecated": "error",
                  "@typescript-eslint/no-duplicate-type-constituents": "error",
                  "@typescript-eslint/no-floating-promises": "error",
                  "@typescript-eslint/no-for-in-array": "error",
                  "no-implied-eval": "off",
                  "@typescript-eslint/no-implied-eval": "error",
                  "@typescript-eslint/no-meaningless-void-operator": "error",
                  "@typescript-eslint/no-misused-promises": "error",
                  "@typescript-eslint/no-misused-spread": "error",
                  "@typescript-eslint/no-mixed-enums": "error",
                  "@typescript-eslint/no-redundant-type-constituents": "error",
                  "@typescript-eslint/no-unnecessary-boolean-literal-compare": "error",
                  "@typescript-eslint/no-unnecessary-condition": "error",
                  "@typescript-eslint/no-unnecessary-template-expression": "error",
                  "@typescript-eslint/no-unnecessary-type-arguments": "error",
                  "@typescript-eslint/no-unnecessary-type-assertion": "error",
                  "@typescript-eslint/no-unnecessary-type-parameters": "error",
                  "@typescript-eslint/no-unsafe-argument": "error",
                  "@typescript-eslint/no-unsafe-assignment": "error",
                  "@typescript-eslint/no-unsafe-call": "error",
                  "@typescript-eslint/no-unsafe-enum-comparison": "error",
                  "@typescript-eslint/no-unsafe-member-access": "error",
                  "@typescript-eslint/no-unsafe-return": "error",
                  "@typescript-eslint/no-unsafe-unary-minus": "error",
                  "no-throw-literal": "off",
                  "@typescript-eslint/only-throw-error": "error",
                  "prefer-promise-reject-errors": "off",
                  "@typescript-eslint/prefer-promise-reject-errors": "error",
                  "@typescript-eslint/prefer-reduce-type-parameter": "error",
                  "@typescript-eslint/prefer-return-this-type": "error",
                  "@typescript-eslint/related-getter-setter-pairs": "error",
                  "require-await": "off",
                  "@typescript-eslint/require-await": "error",
                  "@typescript-eslint/restrict-plus-operands": [
                    "error",
                    {
                      "allowAny": false,
                      "allowBoolean": false,
                      "allowNullish": false,
                      "allowNumberAndString": false,
                      "allowRegExp": false
                    }
                  ],
                  "@typescript-eslint/restrict-template-expressions": [
                    "error",
                    {
                      "allowAny": false,
                      "allowBoolean": false,
                      "allowNever": false,
                      "allowNullish": false,
                      "allowNumber": false,
                      "allowRegExp": false
                    }
                  ],
                  "no-return-await": "off",
                  "@typescript-eslint/return-await": [
                    "error",
                    "error-handling-correctness-only"
                  ],
                  "@typescript-eslint/unbound-method": "error",
                  "@typescript-eslint/use-unknown-in-catch-callback-variable": "error"
                }
              }
            ],
            "flat/stylistic": [
              {
                "name": "typescript-eslint/base",
                "languageOptions": { "sourceType": "module" },
                "plugins": {}
              },
              {
                "files": ["**/*.ts", "**/*.tsx", "**/*.mts", "**/*.cts"],
                "rules": {
                  "constructor-super": "off",
                  "getter-return": "off",
                  "no-class-assign": "off",
                  "no-const-assign": "off",
                  "no-dupe-args": "off",
                  "no-dupe-class-members": "off",
                  "no-dupe-keys": "off",
                  "no-func-assign": "off",
                  "no-import-assign": "off",
                  "no-new-native-nonconstructor": "off",
                  "no-new-symbol": "off",
                  "no-obj-calls": "off",
                  "no-redeclare": "off",
                  "no-setter-return": "off",
                  "no-this-before-super": "off",
                  "no-undef": "off",
                  "no-unreachable": "off",
                  "no-unsafe-negation": "off",
                  "no-var": "error",
                  "no-with": "off",
                  "prefer-const": "error",
                  "prefer-rest-params": "error",
                  "prefer-spread": "error"
                },
                "name": "typescript-eslint/eslint-recommended"
              },
              {
                "name": "typescript-eslint/stylistic",
                "rules": {
                  "@typescript-eslint/adjacent-overload-signatures": "error",
                  "@typescript-eslint/array-type": "error",
                  "@typescript-eslint/ban-tslint-comment": "error",
                  "@typescript-eslint/class-literal-property-style": "error",
                  "@typescript-eslint/consistent-generic-constructors": "error",
                  "@typescript-eslint/consistent-indexed-object-style": "error",
                  "@typescript-eslint/consistent-type-assertions": "error",
                  "@typescript-eslint/consistent-type-definitions": "error",
                  "@typescript-eslint/no-confusing-non-null-assertion": "error",
                  "no-empty-function": "off",
                  "@typescript-eslint/no-empty-function": "error",
                  "@typescript-eslint/no-inferrable-types": "error",
                  "@typescript-eslint/prefer-for-of": "error",
                  "@typescript-eslint/prefer-function-type": "error"
                }
              }
            ],
            "flat/stylistic-type-checked": [
              {
                "name": "typescript-eslint/base",
                "languageOptions": { "sourceType": "module" },
                "plugins": {}
              },
              {
                "files": ["**/*.ts", "**/*.tsx", "**/*.mts", "**/*.cts"],
                "rules": {
                  "constructor-super": "off",
                  "getter-return": "off",
                  "no-class-assign": "off",
                  "no-const-assign": "off",
                  "no-dupe-args": "off",
                  "no-dupe-class-members": "off",
                  "no-dupe-keys": "off",
                  "no-func-assign": "off",
                  "no-import-assign": "off",
                  "no-new-native-nonconstructor": "off",
                  "no-new-symbol": "off",
                  "no-obj-calls": "off",
                  "no-redeclare": "off",
                  "no-setter-return": "off",
                  "no-this-before-super": "off",
                  "no-undef": "off",
                  "no-unreachable": "off",
                  "no-unsafe-negation": "off",
                  "no-var": "error",
                  "no-with": "off",
                  "prefer-const": "error",
                  "prefer-rest-params": "error",
                  "prefer-spread": "error"
                },
                "name": "typescript-eslint/eslint-recommended"
              },
              {
                "name": "typescript-eslint/stylistic-type-checked",
                "rules": {
                  "@typescript-eslint/adjacent-overload-signatures": "error",
                  "@typescript-eslint/array-type": "error",
                  "@typescript-eslint/ban-tslint-comment": "error",
                  "@typescript-eslint/class-literal-property-style": "error",
                  "@typescript-eslint/consistent-generic-constructors": "error",
                  "@typescript-eslint/consistent-indexed-object-style": "error",
                  "@typescript-eslint/consistent-type-assertions": "error",
                  "@typescript-eslint/consistent-type-definitions": "error",
                  "dot-notation": "off",
                  "@typescript-eslint/dot-notation": "error",
                  "@typescript-eslint/no-confusing-non-null-assertion": "error",
                  "no-empty-function": "off",
                  "@typescript-eslint/no-empty-function": "error",
                  "@typescript-eslint/no-inferrable-types": "error",
                  "@typescript-eslint/non-nullable-type-assertion-style": "error",
                  "@typescript-eslint/prefer-find": "error",
                  "@typescript-eslint/prefer-for-of": "error",
                  "@typescript-eslint/prefer-function-type": "error",
                  "@typescript-eslint/prefer-includes": "error",
                  "@typescript-eslint/prefer-nullish-coalescing": "error",
                  "@typescript-eslint/prefer-optional-chain": "error",
                  "@typescript-eslint/prefer-regexp-exec": "error",
                  "@typescript-eslint/prefer-string-starts-ends-with": "error"
                }
              }
            ],
            "flat/stylistic-type-checked-only": [
              {
                "name": "typescript-eslint/base",
                "languageOptions": { "sourceType": "module" },
                "plugins": {}
              },
              {
                "files": ["**/*.ts", "**/*.tsx", "**/*.mts", "**/*.cts"],
                "rules": {
                  "constructor-super": "off",
                  "getter-return": "off",
                  "no-class-assign": "off",
                  "no-const-assign": "off",
                  "no-dupe-args": "off",
                  "no-dupe-class-members": "off",
                  "no-dupe-keys": "off",
                  "no-func-assign": "off",
                  "no-import-assign": "off",
                  "no-new-native-nonconstructor": "off",
                  "no-new-symbol": "off",
                  "no-obj-calls": "off",
                  "no-redeclare": "off",
                  "no-setter-return": "off",
                  "no-this-before-super": "off",
                  "no-undef": "off",
                  "no-unreachable": "off",
                  "no-unsafe-negation": "off",
                  "no-var": "error",
                  "no-with": "off",
                  "prefer-const": "error",
                  "prefer-rest-params": "error",
                  "prefer-spread": "error"
                },
                "name": "typescript-eslint/eslint-recommended"
              },
              {
                "name": "typescript-eslint/stylistic-type-checked-only",
                "rules": {
                  "dot-notation": "off",
                  "@typescript-eslint/dot-notation": "error",
                  "@typescript-eslint/non-nullable-type-assertion-style": "error",
                  "@typescript-eslint/prefer-find": "error",
                  "@typescript-eslint/prefer-includes": "error",
                  "@typescript-eslint/prefer-nullish-coalescing": "error",
                  "@typescript-eslint/prefer-optional-chain": "error",
                  "@typescript-eslint/prefer-regexp-exec": "error",
                  "@typescript-eslint/prefer-string-starts-ends-with": "error"
                }
              }
            ]
          },
          "meta": {
            "name": "@typescript-eslint/eslint-plugin",
            "version": "8.33.1"
          },
          "rules": {
            "adjacent-overload-signatures": {
              "defaultOptions": [],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "Require that function overload signatures be consecutive",
                  "recommended": "stylistic",
                  "url": "https://typescript-eslint.io/rules/adjacent-overload-signatures"
                },
                "messages": {
                  "adjacentSignature": "All {{name}} signatures should be adjacent."
                },
                "schema": []
              }
            },
            "array-type": {
              "defaultOptions": [{ "default": "array" }],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "Require consistently using either `T[]` or `Array<T>` for arrays",
                  "recommended": "stylistic",
                  "url": "https://typescript-eslint.io/rules/array-type"
                },
                "fixable": "code",
                "messages": {
                  "errorStringArray": "Array type using '{{className}}<{{type}}>' is forbidden. Use '{{readonlyPrefix}}{{type}}[]' instead.",
                  "errorStringArrayReadonly": "Array type using '{{className}}<{{type}}>' is forbidden. Use '{{readonlyPrefix}}{{type}}' instead.",
                  "errorStringArraySimple": "Array type using '{{className}}<{{type}}>' is forbidden for simple types. Use '{{readonlyPrefix}}{{type}}[]' instead.",
                  "errorStringArraySimpleReadonly": "Array type using '{{className}}<{{type}}>' is forbidden for simple types. Use '{{readonlyPrefix}}{{type}}' instead.",
                  "errorStringGeneric": "Array type using '{{readonlyPrefix}}{{type}}[]' is forbidden. Use '{{className}}<{{type}}>' instead.",
                  "errorStringGenericSimple": "Array type using '{{readonlyPrefix}}{{type}}[]' is forbidden for non-simple types. Use '{{className}}<{{type}}>' instead."
                },
                "schema": [
                  {
                    "type": "object",
                    "$defs": {
                      "arrayOption": {
                        "type": "string",
                        "enum": ["array", "generic", "array-simple"]
                      }
                    },
                    "additionalProperties": false,
                    "properties": {
                      "default": {
                        "$ref": "#/items/0/$defs/arrayOption",
                        "description": "The array type expected for mutable cases."
                      },
                      "readonly": {
                        "$ref": "#/items/0/$defs/arrayOption",
                        "description": "The array type expected for readonly cases. If omitted, the value for `default` will be used."
                      }
                    }
                  }
                ]
              }
            },
            "await-thenable": {
              "defaultOptions": [],
              "meta": {
                "type": "problem",
                "docs": {
                  "description": "Disallow awaiting a value that is not a Thenable",
                  "recommended": "recommended",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/await-thenable"
                },
                "hasSuggestions": true,
                "messages": {
                  "await": "Unexpected `await` of a non-Promise (non-\"Thenable\") value.",
                  "awaitUsingOfNonAsyncDisposable": "Unexpected `await using` of a value that is not async disposable.",
                  "convertToOrdinaryFor": "Convert to an ordinary `for...of` loop.",
                  "forAwaitOfNonAsyncIterable": "Unexpected `for await...of` of a value that is not async iterable.",
                  "removeAwait": "Remove unnecessary `await`."
                },
                "schema": []
              }
            },
            "ban-ts-comment": {
              "defaultOptions": [
                {
                  "minimumDescriptionLength": 3,
                  "ts-check": false,
                  "ts-expect-error": "allow-with-description",
                  "ts-ignore": true,
                  "ts-nocheck": true
                }
              ],
              "meta": {
                "type": "problem",
                "docs": {
                  "description": "Disallow `@ts-<directive>` comments or require descriptions after directives",
                  "recommended": {
                    "recommended": true,
                    "strict": [{ "minimumDescriptionLength": 10 }]
                  },
                  "url": "https://typescript-eslint.io/rules/ban-ts-comment"
                },
                "hasSuggestions": true,
                "messages": {
                  "replaceTsIgnoreWithTsExpectError": "Replace \"@ts-ignore\" with \"@ts-expect-error\".",
                  "tsDirectiveComment": "Do not use \"@ts-{{directive}}\" because it alters compilation errors.",
                  "tsDirectiveCommentDescriptionNotMatchPattern": "The description for the \"@ts-{{directive}}\" directive must match the {{format}} format.",
                  "tsDirectiveCommentRequiresDescription": "Include a description after the \"@ts-{{directive}}\" directive to explain why the @ts-{{directive}} is necessary. The description must be {{minimumDescriptionLength}} characters or longer.",
                  "tsIgnoreInsteadOfExpectError": "Use \"@ts-expect-error\" instead of \"@ts-ignore\", as \"@ts-ignore\" will do nothing if the following line is error-free."
                },
                "schema": [
                  {
                    "type": "object",
                    "$defs": {
                      "directiveConfigSchema": {
                        "oneOf": [
                          { "type": "boolean", "default": true },
                          {
                            "type": "string",
                            "enum": ["allow-with-description"]
                          },
                          {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                              "descriptionFormat": { "type": "string" }
                            }
                          }
                        ]
                      }
                    },
                    "additionalProperties": false,
                    "properties": {
                      "minimumDescriptionLength": {
                        "type": "number",
                        "default": 3,
                        "description": "A minimum character length for descriptions when `allow-with-description` is enabled."
                      },
                      "ts-check": {
                        "$ref": "#/items/0/$defs/directiveConfigSchema"
                      },
                      "ts-expect-error": {
                        "$ref": "#/items/0/$defs/directiveConfigSchema"
                      },
                      "ts-ignore": {
                        "$ref": "#/items/0/$defs/directiveConfigSchema"
                      },
                      "ts-nocheck": {
                        "$ref": "#/items/0/$defs/directiveConfigSchema"
                      }
                    }
                  }
                ]
              }
            },
            "ban-tslint-comment": {
              "defaultOptions": [],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "Disallow `// tslint:<rule-flag>` comments",
                  "recommended": "stylistic",
                  "url": "https://typescript-eslint.io/rules/ban-tslint-comment"
                },
                "fixable": "code",
                "messages": {
                  "commentDetected": "tslint comment detected: \"{{ text }}\""
                },
                "schema": []
              }
            },
            "class-literal-property-style": {
              "defaultOptions": ["fields"],
              "meta": {
                "type": "problem",
                "docs": {
                  "description": "Enforce that literals on classes are exposed in a consistent style",
                  "recommended": "stylistic",
                  "url": "https://typescript-eslint.io/rules/class-literal-property-style"
                },
                "hasSuggestions": true,
                "messages": {
                  "preferFieldStyle": "Literals should be exposed using readonly fields.",
                  "preferFieldStyleSuggestion": "Replace the literals with readonly fields.",
                  "preferGetterStyle": "Literals should be exposed using getters.",
                  "preferGetterStyleSuggestion": "Replace the literals with getters."
                },
                "schema": [
                  {
                    "type": "string",
                    "description": "Which literal class member syntax to prefer.",
                    "enum": ["fields", "getters"]
                  }
                ]
              }
            },
            "class-methods-use-this": {
              "defaultOptions": [
                {
                  "enforceForClassFields": true,
                  "exceptMethods": [],
                  "ignoreClassesThatImplementAnInterface": false,
                  "ignoreOverrideMethods": false
                }
              ],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "Enforce that class methods utilize `this`",
                  "extendsBaseRule": true,
                  "requiresTypeChecking": false,
                  "url": "https://typescript-eslint.io/rules/class-methods-use-this"
                },
                "messages": {
                  "missingThis": "Expected 'this' to be used by class {{name}}."
                },
                "schema": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "enforceForClassFields": {
                        "type": "boolean",
                        "default": true,
                        "description": "Enforces that functions used as instance field initializers utilize `this`."
                      },
                      "exceptMethods": {
                        "type": "array",
                        "description": "Allows specified method names to be ignored with this rule.",
                        "items": { "type": "string" }
                      },
                      "ignoreClassesThatImplementAnInterface": {
                        "description": "Whether to ignore class members that are defined within a class that `implements` a type.",
                        "oneOf": [
                          {
                            "type": "boolean",
                            "description": "Ignore all classes that implement an interface"
                          },
                          {
                            "type": "string",
                            "description": "Ignore only the public fields of classes that implement an interface",
                            "enum": ["public-fields"]
                          }
                        ]
                      },
                      "ignoreOverrideMethods": {
                        "type": "boolean",
                        "description": "Whether to ignore members marked with the `override` modifier."
                      }
                    }
                  }
                ]
              }
            },
            "consistent-generic-constructors": {
              "defaultOptions": ["constructor"],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "Enforce specifying generic type arguments on type annotation or constructor name of a constructor call",
                  "recommended": "stylistic",
                  "url": "https://typescript-eslint.io/rules/consistent-generic-constructors"
                },
                "fixable": "code",
                "messages": {
                  "preferConstructor": "The generic type arguments should be specified as part of the constructor type arguments.",
                  "preferTypeAnnotation": "The generic type arguments should be specified as part of the type annotation."
                },
                "schema": [
                  {
                    "type": "string",
                    "description": "Which constructor call syntax to prefer.",
                    "enum": ["type-annotation", "constructor"]
                  }
                ]
              }
            },
            "consistent-indexed-object-style": {
              "defaultOptions": ["record"],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "Require or disallow the `Record` type",
                  "recommended": "stylistic",
                  "url": "https://typescript-eslint.io/rules/consistent-indexed-object-style"
                },
                "fixable": "code",
                "hasSuggestions": true,
                "messages": {
                  "preferIndexSignature": "An index signature is preferred over a record.",
                  "preferIndexSignatureSuggestion": "Change into an index signature instead of a record.",
                  "preferRecord": "A record is preferred over an index signature."
                },
                "schema": [
                  {
                    "type": "string",
                    "description": "Which indexed object syntax to prefer.",
                    "enum": ["record", "index-signature"]
                  }
                ]
              }
            },
            "consistent-return": {
              "defaultOptions": [{ "treatUndefinedAsUnspecified": false }],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "Require `return` statements to either always or never specify values",
                  "extendsBaseRule": true,
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/consistent-return"
                },
                "messages": {
                  "missingReturn": "Expected to return a value at the end of {{name}}.",
                  "missingReturnValue": "{{name}} expected a return value.",
                  "unexpectedReturnValue": "{{name}} expected no return value."
                },
                "schema": [
                  {
                    "type": "object",
                    "properties": {
                      "treatUndefinedAsUnspecified": { "type": "boolean" }
                    },
                    "additionalProperties": false
                  }
                ]
              }
            },
            "consistent-type-assertions": {
              "defaultOptions": [
                {
                  "arrayLiteralTypeAssertions": "allow",
                  "assertionStyle": "as",
                  "objectLiteralTypeAssertions": "allow"
                }
              ],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "Enforce consistent usage of type assertions",
                  "recommended": "stylistic",
                  "url": "https://typescript-eslint.io/rules/consistent-type-assertions"
                },
                "fixable": "code",
                "hasSuggestions": true,
                "messages": {
                  "angle-bracket": "Use '<{{cast}}>' instead of 'as {{cast}}'.",
                  "as": "Use 'as {{cast}}' instead of '<{{cast}}>'.",
                  "never": "Do not use any type assertions.",
                  "replaceArrayTypeAssertionWithAnnotation": "Use const x: {{cast}} = [ ... ] instead.",
                  "replaceArrayTypeAssertionWithSatisfies": "Use const x = [ ... ] satisfies {{cast}} instead.",
                  "replaceObjectTypeAssertionWithAnnotation": "Use const x: {{cast}} = { ... } instead.",
                  "replaceObjectTypeAssertionWithSatisfies": "Use const x = { ... } satisfies {{cast}} instead.",
                  "unexpectedArrayTypeAssertion": "Always prefer const x: T[] = [ ... ].",
                  "unexpectedObjectTypeAssertion": "Always prefer const x: T = { ... }."
                },
                "schema": [
                  {
                    "oneOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "assertionStyle": {
                            "type": "string",
                            "description": "The expected assertion style to enforce.",
                            "enum": ["never"]
                          }
                        },
                        "required": ["assertionStyle"]
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "arrayLiteralTypeAssertions": {
                            "type": "string",
                            "description": "Whether to always prefer type declarations for array literals used as variable initializers, rather than type assertions.",
                            "enum": ["allow", "allow-as-parameter", "never"]
                          },
                          "assertionStyle": {
                            "type": "string",
                            "description": "The expected assertion style to enforce.",
                            "enum": ["as", "angle-bracket"]
                          },
                          "objectLiteralTypeAssertions": {
                            "type": "string",
                            "description": "Whether to always prefer type declarations for object literals used as variable initializers, rather than type assertions.",
                            "enum": ["allow", "allow-as-parameter", "never"]
                          }
                        }
                      }
                    ]
                  }
                ]
              }
            },
            "consistent-type-definitions": {
              "defaultOptions": ["interface"],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "Enforce type definitions to consistently use either `interface` or `type`",
                  "recommended": "stylistic",
                  "url": "https://typescript-eslint.io/rules/consistent-type-definitions"
                },
                "fixable": "code",
                "messages": {
                  "interfaceOverType": "Use an `interface` instead of a `type`.",
                  "typeOverInterface": "Use a `type` instead of an `interface`."
                },
                "schema": [
                  {
                    "type": "string",
                    "description": "Which type definition syntax to prefer.",
                    "enum": ["interface", "type"]
                  }
                ]
              }
            },
            "consistent-type-exports": {
              "defaultOptions": [
                { "fixMixedExportsWithInlineTypeSpecifier": false }
              ],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "Enforce consistent usage of type exports",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/consistent-type-exports"
                },
                "fixable": "code",
                "messages": {
                  "multipleExportsAreTypes": "Type exports {{exportNames}} are not values and should be exported using `export type`.",
                  "singleExportIsType": "Type export {{exportNames}} is not a value and should be exported using `export type`.",
                  "typeOverValue": "All exports in the declaration are only used as types. Use `export type`."
                },
                "schema": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "fixMixedExportsWithInlineTypeSpecifier": {
                        "type": "boolean",
                        "description": "Whether the rule will autofix \"mixed\" export cases using TS inline type specifiers."
                      }
                    }
                  }
                ]
              }
            },
            "consistent-type-imports": {
              "defaultOptions": [
                {
                  "disallowTypeAnnotations": true,
                  "fixStyle": "separate-type-imports",
                  "prefer": "type-imports"
                }
              ],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "Enforce consistent usage of type imports",
                  "url": "https://typescript-eslint.io/rules/consistent-type-imports"
                },
                "fixable": "code",
                "messages": {
                  "avoidImportType": "Use an `import` instead of an `import type`.",
                  "noImportTypeAnnotations": "`import()` type annotations are forbidden.",
                  "someImportsAreOnlyTypes": "Imports {{typeImports}} are only used as type.",
                  "typeOverValue": "All imports in the declaration are only used as types. Use `import type`."
                },
                "schema": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "disallowTypeAnnotations": {
                        "type": "boolean",
                        "description": "Whether to disallow type imports in type annotations (`import()`)."
                      },
                      "fixStyle": {
                        "type": "string",
                        "description": "The expected type modifier to be added when an import is detected as used only in the type position.",
                        "enum": ["separate-type-imports", "inline-type-imports"]
                      },
                      "prefer": {
                        "type": "string",
                        "description": "The expected import kind for type-only imports.",
                        "enum": ["type-imports", "no-type-imports"]
                      }
                    }
                  }
                ]
              }
            },
            "default-param-last": {
              "defaultOptions": [],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "Enforce default parameters to be last",
                  "extendsBaseRule": true,
                  "url": "https://typescript-eslint.io/rules/default-param-last"
                },
                "messages": {
                  "shouldBeLast": "Default parameters should be last."
                },
                "schema": []
              }
            },
            "dot-notation": {
              "defaultOptions": [
                {
                  "allowIndexSignaturePropertyAccess": false,
                  "allowKeywords": true,
                  "allowPattern": "",
                  "allowPrivateClassPropertyAccess": false,
                  "allowProtectedClassPropertyAccess": false
                }
              ],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "Enforce dot notation whenever possible",
                  "extendsBaseRule": true,
                  "recommended": "stylistic",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/dot-notation"
                },
                "fixable": "code",
                "messages": {
                  "useDot": "[{{key}}] is better written in dot notation.",
                  "useBrackets": ".{{key}} is a syntax error."
                },
                "schema": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "allowIndexSignaturePropertyAccess": {
                        "type": "boolean",
                        "default": false,
                        "description": "Whether to allow accessing properties matching an index signature with array notation."
                      },
                      "allowKeywords": {
                        "type": "boolean",
                        "default": true,
                        "description": "Whether to allow keywords such as [\"class\"]`."
                      },
                      "allowPattern": {
                        "type": "string",
                        "default": "",
                        "description": "Regular expression of names to allow."
                      },
                      "allowPrivateClassPropertyAccess": {
                        "type": "boolean",
                        "default": false,
                        "description": "Whether to allow accessing class members marked as `private` with array notation."
                      },
                      "allowProtectedClassPropertyAccess": {
                        "type": "boolean",
                        "default": false,
                        "description": "Whether to allow accessing class members marked as `protected` with array notation."
                      }
                    }
                  }
                ]
              }
            },
            "explicit-function-return-type": {
              "defaultOptions": [
                {
                  "allowConciseArrowFunctionExpressionsStartingWithVoid": false,
                  "allowDirectConstAssertionInArrowFunctions": true,
                  "allowedNames": [],
                  "allowExpressions": false,
                  "allowFunctionsWithoutTypeParameters": false,
                  "allowHigherOrderFunctions": true,
                  "allowIIFEs": false,
                  "allowTypedFunctionExpressions": true
                }
              ],
              "meta": {
                "type": "problem",
                "docs": {
                  "description": "Require explicit return types on functions and class methods",
                  "url": "https://typescript-eslint.io/rules/explicit-function-return-type"
                },
                "messages": {
                  "missingReturnType": "Missing return type on function."
                },
                "schema": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "allowConciseArrowFunctionExpressionsStartingWithVoid": {
                        "type": "boolean",
                        "description": "Whether to allow arrow functions that start with the `void` keyword."
                      },
                      "allowDirectConstAssertionInArrowFunctions": {
                        "type": "boolean",
                        "description": "Whether to ignore arrow functions immediately returning a `as const` value."
                      },
                      "allowedNames": {
                        "type": "array",
                        "description": "An array of function/method names that will not have their arguments or return values checked.",
                        "items": { "type": "string" }
                      },
                      "allowExpressions": {
                        "type": "boolean",
                        "description": "Whether to ignore function expressions (functions which are not part of a declaration)."
                      },
                      "allowFunctionsWithoutTypeParameters": {
                        "type": "boolean",
                        "description": "Whether to ignore functions that don't have generic type parameters."
                      },
                      "allowHigherOrderFunctions": {
                        "type": "boolean",
                        "description": "Whether to ignore functions immediately returning another function expression."
                      },
                      "allowIIFEs": {
                        "type": "boolean",
                        "description": "Whether to ignore immediately invoked function expressions (IIFEs)."
                      },
                      "allowTypedFunctionExpressions": {
                        "type": "boolean",
                        "description": "Whether to ignore type annotations on the variable of function expressions."
                      }
                    }
                  }
                ]
              }
            },
            "explicit-member-accessibility": {
              "defaultOptions": [{ "accessibility": "explicit" }],
              "meta": {
                "type": "problem",
                "docs": {
                  "description": "Require explicit accessibility modifiers on class properties and methods",
                  "url": "https://typescript-eslint.io/rules/explicit-member-accessibility"
                },
                "fixable": "code",
                "hasSuggestions": true,
                "messages": {
                  "addExplicitAccessibility": "Add '{{ type }}' accessibility modifier",
                  "missingAccessibility": "Missing accessibility modifier on {{type}} {{name}}.",
                  "unwantedPublicAccessibility": "Public accessibility modifier on {{type}} {{name}}."
                },
                "schema": [
                  {
                    "type": "object",
                    "$defs": {
                      "accessibilityLevel": {
                        "oneOf": [
                          {
                            "type": "string",
                            "description": "Always require an accessor.",
                            "enum": ["explicit"]
                          },
                          {
                            "type": "string",
                            "description": "Require an accessor except when public.",
                            "enum": ["no-public"]
                          },
                          {
                            "type": "string",
                            "description": "Never check whether there is an accessor.",
                            "enum": ["off"]
                          }
                        ]
                      }
                    },
                    "additionalProperties": false,
                    "properties": {
                      "accessibility": {
                        "$ref": "#/items/0/$defs/accessibilityLevel",
                        "description": "Which accessibility modifier is required to exist or not exist."
                      },
                      "ignoredMethodNames": {
                        "type": "array",
                        "description": "Specific method names that may be ignored.",
                        "items": { "type": "string" }
                      },
                      "overrides": {
                        "type": "object",
                        "additionalProperties": false,
                        "description": "Changes to required accessibility modifiers for specific kinds of class members.",
                        "properties": {
                          "accessors": {
                            "$ref": "#/items/0/$defs/accessibilityLevel"
                          },
                          "constructors": {
                            "$ref": "#/items/0/$defs/accessibilityLevel"
                          },
                          "methods": {
                            "$ref": "#/items/0/$defs/accessibilityLevel"
                          },
                          "parameterProperties": {
                            "$ref": "#/items/0/$defs/accessibilityLevel"
                          },
                          "properties": {
                            "$ref": "#/items/0/$defs/accessibilityLevel"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            },
            "explicit-module-boundary-types": {
              "defaultOptions": [
                {
                  "allowArgumentsExplicitlyTypedAsAny": false,
                  "allowDirectConstAssertionInArrowFunctions": true,
                  "allowedNames": [],
                  "allowHigherOrderFunctions": true,
                  "allowOverloadFunctions": false,
                  "allowTypedFunctionExpressions": true
                }
              ],
              "meta": {
                "type": "problem",
                "docs": {
                  "description": "Require explicit return and argument types on exported functions' and classes' public class methods",
                  "url": "https://typescript-eslint.io/rules/explicit-module-boundary-types"
                },
                "messages": {
                  "anyTypedArg": "Argument '{{name}}' should be typed with a non-any type.",
                  "anyTypedArgUnnamed": "{{type}} argument should be typed with a non-any type.",
                  "missingArgType": "Argument '{{name}}' should be typed.",
                  "missingArgTypeUnnamed": "{{type}} argument should be typed.",
                  "missingReturnType": "Missing return type on function."
                },
                "schema": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "allowArgumentsExplicitlyTypedAsAny": {
                        "type": "boolean",
                        "description": "Whether to ignore arguments that are explicitly typed as `any`."
                      },
                      "allowDirectConstAssertionInArrowFunctions": {
                        "type": "boolean",
                        "description": "Whether to ignore return type annotations on body-less arrow functions that return an `as const` type assertion.\nYou must still type the parameters of the function."
                      },
                      "allowedNames": {
                        "type": "array",
                        "description": "An array of function/method names that will not have their arguments or return values checked.",
                        "items": { "type": "string" }
                      },
                      "allowHigherOrderFunctions": {
                        "type": "boolean",
                        "description": "Whether to ignore return type annotations on functions immediately returning another function expression.\nYou must still type the parameters of the function."
                      },
                      "allowOverloadFunctions": {
                        "type": "boolean",
                        "description": "Whether to ignore return type annotations on functions with overload signatures."
                      },
                      "allowTypedFunctionExpressions": {
                        "type": "boolean",
                        "description": "Whether to ignore type annotations on the variable of a function expression."
                      }
                    }
                  }
                ]
              }
            },
            "init-declarations": {
              "defaultOptions": ["always"],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "Require or disallow initialization in variable declarations",
                  "extendsBaseRule": true,
                  "url": "https://typescript-eslint.io/rules/init-declarations"
                },
                "messages": {
                  "initialized": "Variable '{{idName}}' should be initialized on declaration.",
                  "notInitialized": "Variable '{{idName}}' should not be initialized on declaration."
                },
                "schema": {
                  "anyOf": [
                    {
                      "type": "array",
                      "items": [{ "enum": ["always"] }],
                      "minItems": 0,
                      "maxItems": 1
                    },
                    {
                      "type": "array",
                      "items": [
                        { "enum": ["never"] },
                        {
                          "type": "object",
                          "properties": {
                            "ignoreForLoopInit": { "type": "boolean" }
                          },
                          "additionalProperties": false
                        }
                      ],
                      "minItems": 0,
                      "maxItems": 2
                    }
                  ]
                }
              }
            },
            "max-params": {
              "defaultOptions": [{ "countVoidThis": false, "max": 3 }],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "Enforce a maximum number of parameters in function definitions",
                  "extendsBaseRule": true,
                  "url": "https://typescript-eslint.io/rules/max-params"
                },
                "messages": {
                  "exceed": "{{name}} has too many parameters ({{count}}). Maximum allowed is {{max}}."
                },
                "schema": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "countVoidThis": {
                        "type": "boolean",
                        "description": "Whether to count a `this` declaration when the type is `void`."
                      },
                      "max": {
                        "type": "integer",
                        "description": "A maximum number of parameters in function definitions.",
                        "minimum": 0
                      },
                      "maximum": {
                        "type": "integer",
                        "description": "(deprecated) A maximum number of parameters in function definitions.",
                        "minimum": 0
                      }
                    }
                  }
                ]
              }
            },
            "member-ordering": {
              "defaultOptions": [
                {
                  "default": {
                    "memberTypes": [
                      "signature",
                      "call-signature",
                      "public-static-field",
                      "protected-static-field",
                      "private-static-field",
                      "#private-static-field",
                      "public-decorated-field",
                      "protected-decorated-field",
                      "private-decorated-field",
                      "public-instance-field",
                      "protected-instance-field",
                      "private-instance-field",
                      "#private-instance-field",
                      "public-abstract-field",
                      "protected-abstract-field",
                      "public-field",
                      "protected-field",
                      "private-field",
                      "#private-field",
                      "static-field",
                      "instance-field",
                      "abstract-field",
                      "decorated-field",
                      "field",
                      "static-initialization",
                      "public-constructor",
                      "protected-constructor",
                      "private-constructor",
                      "constructor",
                      "public-static-accessor",
                      "protected-static-accessor",
                      "private-static-accessor",
                      "#private-static-accessor",
                      "public-decorated-accessor",
                      "protected-decorated-accessor",
                      "private-decorated-accessor",
                      "public-instance-accessor",
                      "protected-instance-accessor",
                      "private-instance-accessor",
                      "#private-instance-accessor",
                      "public-abstract-accessor",
                      "protected-abstract-accessor",
                      "public-accessor",
                      "protected-accessor",
                      "private-accessor",
                      "#private-accessor",
                      "static-accessor",
                      "instance-accessor",
                      "abstract-accessor",
                      "decorated-accessor",
                      "accessor",
                      "public-static-get",
                      "protected-static-get",
                      "private-static-get",
                      "#private-static-get",
                      "public-decorated-get",
                      "protected-decorated-get",
                      "private-decorated-get",
                      "public-instance-get",
                      "protected-instance-get",
                      "private-instance-get",
                      "#private-instance-get",
                      "public-abstract-get",
                      "protected-abstract-get",
                      "public-get",
                      "protected-get",
                      "private-get",
                      "#private-get",
                      "static-get",
                      "instance-get",
                      "abstract-get",
                      "decorated-get",
                      "get",
                      "public-static-set",
                      "protected-static-set",
                      "private-static-set",
                      "#private-static-set",
                      "public-decorated-set",
                      "protected-decorated-set",
                      "private-decorated-set",
                      "public-instance-set",
                      "protected-instance-set",
                      "private-instance-set",
                      "#private-instance-set",
                      "public-abstract-set",
                      "protected-abstract-set",
                      "public-set",
                      "protected-set",
                      "private-set",
                      "#private-set",
                      "static-set",
                      "instance-set",
                      "abstract-set",
                      "decorated-set",
                      "set",
                      "public-static-method",
                      "protected-static-method",
                      "private-static-method",
                      "#private-static-method",
                      "public-decorated-method",
                      "protected-decorated-method",
                      "private-decorated-method",
                      "public-instance-method",
                      "protected-instance-method",
                      "private-instance-method",
                      "#private-instance-method",
                      "public-abstract-method",
                      "protected-abstract-method",
                      "public-method",
                      "protected-method",
                      "private-method",
                      "#private-method",
                      "static-method",
                      "instance-method",
                      "abstract-method",
                      "decorated-method",
                      "method"
                    ]
                  }
                }
              ],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "Require a consistent member declaration order",
                  "url": "https://typescript-eslint.io/rules/member-ordering"
                },
                "messages": {
                  "incorrectGroupOrder": "Member {{name}} should be declared before all {{rank}} definitions.",
                  "incorrectOrder": "Member {{member}} should be declared before member {{beforeMember}}.",
                  "incorrectRequiredMembersOrder": "Member {{member}} should be declared after all {{optionalOrRequired}} members."
                },
                "schema": [
                  {
                    "type": "object",
                    "$defs": {
                      "allItems": {
                        "type": "string",
                        "enum": [
                          "readonly-signature",
                          "signature",
                          "readonly-field",
                          "public-readonly-field",
                          "public-decorated-readonly-field",
                          "decorated-readonly-field",
                          "static-readonly-field",
                          "public-static-readonly-field",
                          "instance-readonly-field",
                          "public-instance-readonly-field",
                          "abstract-readonly-field",
                          "public-abstract-readonly-field",
                          "protected-readonly-field",
                          "protected-decorated-readonly-field",
                          "protected-static-readonly-field",
                          "protected-instance-readonly-field",
                          "protected-abstract-readonly-field",
                          "private-readonly-field",
                          "private-decorated-readonly-field",
                          "private-static-readonly-field",
                          "private-instance-readonly-field",
                          "#private-readonly-field",
                          "#private-static-readonly-field",
                          "#private-instance-readonly-field",
                          "field",
                          "public-field",
                          "public-decorated-field",
                          "decorated-field",
                          "static-field",
                          "public-static-field",
                          "instance-field",
                          "public-instance-field",
                          "abstract-field",
                          "public-abstract-field",
                          "protected-field",
                          "protected-decorated-field",
                          "protected-static-field",
                          "protected-instance-field",
                          "protected-abstract-field",
                          "private-field",
                          "private-decorated-field",
                          "private-static-field",
                          "private-instance-field",
                          "#private-field",
                          "#private-static-field",
                          "#private-instance-field",
                          "method",
                          "public-method",
                          "public-decorated-method",
                          "decorated-method",
                          "static-method",
                          "public-static-method",
                          "instance-method",
                          "public-instance-method",
                          "abstract-method",
                          "public-abstract-method",
                          "protected-method",
                          "protected-decorated-method",
                          "protected-static-method",
                          "protected-instance-method",
                          "protected-abstract-method",
                          "private-method",
                          "private-decorated-method",
                          "private-static-method",
                          "private-instance-method",
                          "#private-method",
                          "#private-static-method",
                          "#private-instance-method",
                          "call-signature",
                          "constructor",
                          "public-constructor",
                          "protected-constructor",
                          "private-constructor",
                          "accessor",
                          "public-accessor",
                          "public-decorated-accessor",
                          "decorated-accessor",
                          "static-accessor",
                          "public-static-accessor",
                          "instance-accessor",
                          "public-instance-accessor",
                          "abstract-accessor",
                          "public-abstract-accessor",
                          "protected-accessor",
                          "protected-decorated-accessor",
                          "protected-static-accessor",
                          "protected-instance-accessor",
                          "protected-abstract-accessor",
                          "private-accessor",
                          "private-decorated-accessor",
                          "private-static-accessor",
                          "private-instance-accessor",
                          "#private-accessor",
                          "#private-static-accessor",
                          "#private-instance-accessor",
                          "get",
                          "public-get",
                          "public-decorated-get",
                          "decorated-get",
                          "static-get",
                          "public-static-get",
                          "instance-get",
                          "public-instance-get",
                          "abstract-get",
                          "public-abstract-get",
                          "protected-get",
                          "protected-decorated-get",
                          "protected-static-get",
                          "protected-instance-get",
                          "protected-abstract-get",
                          "private-get",
                          "private-decorated-get",
                          "private-static-get",
                          "private-instance-get",
                          "#private-get",
                          "#private-static-get",
                          "#private-instance-get",
                          "set",
                          "public-set",
                          "public-decorated-set",
                          "decorated-set",
                          "static-set",
                          "public-static-set",
                          "instance-set",
                          "public-instance-set",
                          "abstract-set",
                          "public-abstract-set",
                          "protected-set",
                          "protected-decorated-set",
                          "protected-static-set",
                          "protected-instance-set",
                          "protected-abstract-set",
                          "private-set",
                          "private-decorated-set",
                          "private-static-set",
                          "private-instance-set",
                          "#private-set",
                          "#private-static-set",
                          "#private-instance-set",
                          "static-initialization",
                          "static-static-initialization",
                          "public-static-static-initialization",
                          "instance-static-initialization",
                          "public-instance-static-initialization",
                          "abstract-static-initialization",
                          "public-abstract-static-initialization",
                          "protected-static-static-initialization",
                          "protected-instance-static-initialization",
                          "protected-abstract-static-initialization",
                          "private-static-static-initialization",
                          "private-instance-static-initialization",
                          "#private-static-static-initialization",
                          "#private-instance-static-initialization"
                        ]
                      },
                      "optionalityOrderOptions": {
                        "type": "string",
                        "enum": ["optional-first", "required-first"]
                      },
                      "orderOptions": {
                        "type": "string",
                        "enum": [
                          "alphabetically",
                          "alphabetically-case-insensitive",
                          "as-written",
                          "natural",
                          "natural-case-insensitive"
                        ]
                      },
                      "typeItems": {
                        "type": "string",
                        "enum": [
                          "readonly-signature",
                          "signature",
                          "readonly-field",
                          "field",
                          "method",
                          "constructor"
                        ]
                      },
                      "baseConfig": {
                        "oneOf": [
                          { "type": "string", "enum": ["never"] },
                          {
                            "type": "array",
                            "items": {
                              "oneOf": [
                                { "$ref": "#/items/0/$defs/allItems" },
                                {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/items/0/$defs/allItems"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                              "memberTypes": {
                                "oneOf": [
                                  {
                                    "type": "array",
                                    "items": {
                                      "oneOf": [
                                        { "$ref": "#/items/0/$defs/allItems" },
                                        {
                                          "type": "array",
                                          "items": {
                                            "$ref": "#/items/0/$defs/allItems"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  null
                                ]
                              },
                              "optionalityOrder": {
                                "$ref": "#/items/0/$defs/optionalityOrderOptions"
                              },
                              "order": {
                                "$ref": "#/items/0/$defs/orderOptions"
                              }
                            }
                          }
                        ]
                      },
                      "typesConfig": {
                        "oneOf": [
                          null,
                          {
                            "type": "array",
                            "items": {
                              "oneOf": [
                                { "$ref": "#/items/0/$defs/typeItems" },
                                {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/items/0/$defs/typeItems"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                              "memberTypes": {
                                "oneOf": [
                                  {
                                    "type": "array",
                                    "items": {
                                      "oneOf": [
                                        { "$ref": "#/items/0/$defs/typeItems" },
                                        {
                                          "type": "array",
                                          "items": {
                                            "$ref": "#/items/0/$defs/typeItems"
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  null
                                ]
                              },
                              "optionalityOrder": {
                                "$ref": "#/items/0/$defs/optionalityOrderOptions"
                              },
                              "order": {
                                "$ref": "#/items/0/$defs/orderOptions"
                              }
                            }
                          }
                        ]
                      }
                    },
                    "additionalProperties": false,
                    "properties": {
                      "classes": { "$ref": "#/items/0/$defs/baseConfig" },
                      "classExpressions": {
                        "$ref": "#/items/0/$defs/baseConfig"
                      },
                      "default": { "$ref": "#/items/0/$defs/baseConfig" },
                      "interfaces": { "$ref": "#/items/0/$defs/typesConfig" },
                      "typeLiterals": { "$ref": "#/items/0/$defs/typesConfig" }
                    }
                  }
                ]
              }
            },
            "method-signature-style": {
              "defaultOptions": ["property"],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "Enforce using a particular method signature syntax",
                  "url": "https://typescript-eslint.io/rules/method-signature-style"
                },
                "fixable": "code",
                "messages": {
                  "errorMethod": "Shorthand method signature is forbidden. Use a function property instead.",
                  "errorProperty": "Function property signature is forbidden. Use a method shorthand instead."
                },
                "schema": [{ "type": "string", "enum": ["property", "method"] }]
              }
            },
            "naming-convention": {
              "defaultOptions": [
                {
                  "format": ["camelCase"],
                  "leadingUnderscore": "allow",
                  "selector": "default",
                  "trailingUnderscore": "allow"
                },
                { "format": ["camelCase", "PascalCase"], "selector": "import" },
                {
                  "format": ["camelCase", "UPPER_CASE"],
                  "leadingUnderscore": "allow",
                  "selector": "variable",
                  "trailingUnderscore": "allow"
                },
                { "format": ["PascalCase"], "selector": "typeLike" }
              ],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "Enforce naming conventions for everything across a codebase",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/naming-convention"
                },
                "messages": {
                  "doesNotMatchFormat": "{{type}} name `{{name}}` must match one of the following formats: {{formats}}",
                  "doesNotMatchFormatTrimmed": "{{type}} name `{{name}}` trimmed as `{{processedName}}` must match one of the following formats: {{formats}}",
                  "missingAffix": "{{type}} name `{{name}}` must have one of the following {{position}}es: {{affixes}}",
                  "missingUnderscore": "{{type}} name `{{name}}` must have {{count}} {{position}} underscore(s).",
                  "satisfyCustom": "{{type}} name `{{name}}` must {{regexMatch}} the RegExp: {{regex}}",
                  "unexpectedUnderscore": "{{type}} name `{{name}}` must not have a {{position}} underscore."
                },
                "schema": {
                  "$defs": {
                    "predefinedFormats": {
                      "enum": [
                        "camelCase",
                        "strictCamelCase",
                        "PascalCase",
                        "StrictPascalCase",
                        "snake_case",
                        "UPPER_CASE"
                      ],
                      "type": "string"
                    },
                    "typeModifiers": {
                      "enum": [
                        "boolean",
                        "string",
                        "number",
                        "function",
                        "array"
                      ],
                      "type": "string"
                    },
                    "underscoreOptions": {
                      "enum": [
                        "forbid",
                        "allow",
                        "require",
                        "requireDouble",
                        "allowDouble",
                        "allowSingleOrDouble"
                      ],
                      "type": "string"
                    },
                    "formatOptionsConfig": {
                      "oneOf": [
                        {
                          "additionalItems": false,
                          "items": { "$ref": "#/$defs/predefinedFormats" },
                          "type": "array"
                        },
                        { "type": "null" }
                      ]
                    },
                    "matchRegexConfig": {
                      "additionalProperties": false,
                      "properties": {
                        "match": { "type": "boolean" },
                        "regex": { "type": "string" }
                      },
                      "required": ["match", "regex"],
                      "type": "object"
                    },
                    "prefixSuffixConfig": {
                      "additionalItems": false,
                      "items": { "minLength": 1, "type": "string" },
                      "type": "array"
                    }
                  },
                  "additionalItems": false,
                  "items": {
                    "oneOf": [
                      {
                        "additionalProperties": false,
                        "description": "Multiple selectors in one config",
                        "properties": {
                          "custom": { "$ref": "#/$defs/matchRegexConfig" },
                          "failureMessage": { "type": "string" },
                          "format": { "$ref": "#/$defs/formatOptionsConfig" },
                          "leadingUnderscore": {
                            "$ref": "#/$defs/underscoreOptions"
                          },
                          "prefix": { "$ref": "#/$defs/prefixSuffixConfig" },
                          "filter": {
                            "oneOf": [
                              { "minLength": 1, "type": "string" },
                              null
                            ]
                          },
                          "modifiers": {
                            "additionalItems": false,
                            "items": {
                              "enum": [
                                "const",
                                "readonly",
                                "static",
                                "public",
                                "protected",
                                "private",
                                "#private",
                                "abstract",
                                "destructured",
                                "global",
                                "exported",
                                "unused",
                                "requiresQuotes",
                                "override",
                                "async",
                                "default",
                                "namespace"
                              ],
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "selector": {
                            "additionalItems": false,
                            "items": {
                              "enum": [
                                "default",
                                "variableLike",
                                "memberLike",
                                "typeLike",
                                "method",
                                "property",
                                "accessor",
                                "variable",
                                "function",
                                "parameter",
                                "parameterProperty",
                                "classicAccessor",
                                "enumMember",
                                "classMethod",
                                "objectLiteralMethod",
                                "typeMethod",
                                "classProperty",
                                "objectLiteralProperty",
                                "typeProperty",
                                "autoAccessor",
                                "class",
                                "interface",
                                "typeAlias",
                                "enum",
                                "typeParameter",
                                "import"
                              ],
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "types": {
                            "additionalItems": false,
                            "items": { "$ref": "#/$defs/typeModifiers" },
                            "type": "array"
                          }
                        },
                        "required": ["selector", "format"],
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "description": "Selector 'default'",
                        "properties": {
                          "filter": {
                            "oneOf": [
                              { "minLength": 1, "type": "string" },
                              null
                            ]
                          },
                          "selector": { "enum": ["default"], "type": "string" },
                          "modifiers": {
                            "additionalItems": false,
                            "items": {
                              "enum": [
                                "const",
                                "readonly",
                                "static",
                                "public",
                                "protected",
                                "private",
                                "#private",
                                "abstract",
                                "destructured",
                                "global",
                                "exported",
                                "unused",
                                "requiresQuotes",
                                "override",
                                "async",
                                "default",
                                "namespace"
                              ],
                              "type": "string"
                            },
                            "type": "array"
                          }
                        },
                        "required": ["selector", "format"],
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "description": "Selector 'variableLike'",
                        "properties": {
                          "filter": {
                            "oneOf": [
                              { "minLength": 1, "type": "string" },
                              null
                            ]
                          },
                          "selector": {
                            "enum": ["variableLike"],
                            "type": "string"
                          },
                          "modifiers": {
                            "additionalItems": false,
                            "items": {
                              "enum": ["unused", "async"],
                              "type": "string"
                            },
                            "type": "array"
                          }
                        },
                        "required": ["selector", "format"],
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "description": "Selector 'variable'",
                        "properties": {
                          "filter": {
                            "oneOf": [
                              { "minLength": 1, "type": "string" },
                              null
                            ]
                          },
                          "selector": {
                            "enum": ["variable"],
                            "type": "string"
                          },
                          "modifiers": {
                            "additionalItems": false,
                            "items": {
                              "enum": [
                                "const",
                                "destructured",
                                "exported",
                                "global",
                                "unused",
                                "async"
                              ],
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "types": {
                            "additionalItems": false,
                            "items": { "$ref": "#/$defs/typeModifiers" },
                            "type": "array"
                          }
                        },
                        "required": ["selector", "format"],
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "description": "Selector 'function'",
                        "properties": {
                          "filter": {
                            "oneOf": [
                              { "minLength": 1, "type": "string" },
                              null
                            ]
                          },
                          "selector": {
                            "enum": ["function"],
                            "type": "string"
                          },
                          "modifiers": {
                            "additionalItems": false,
                            "items": {
                              "enum": ["exported", "global", "unused", "async"],
                              "type": "string"
                            },
                            "type": "array"
                          }
                        },
                        "required": ["selector", "format"],
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "description": "Selector 'parameter'",
                        "properties": {
                          "filter": {
                            "oneOf": [
                              { "minLength": 1, "type": "string" },
                              null
                            ]
                          },
                          "selector": {
                            "enum": ["parameter"],
                            "type": "string"
                          },
                          "modifiers": {
                            "additionalItems": false,
                            "items": {
                              "enum": ["destructured", "unused"],
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "types": {
                            "additionalItems": false,
                            "items": { "$ref": "#/$defs/typeModifiers" },
                            "type": "array"
                          }
                        },
                        "required": ["selector", "format"],
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "description": "Selector 'memberLike'",
                        "properties": {
                          "filter": {
                            "oneOf": [
                              { "minLength": 1, "type": "string" },
                              null
                            ]
                          },
                          "selector": {
                            "enum": ["memberLike"],
                            "type": "string"
                          },
                          "modifiers": {
                            "additionalItems": false,
                            "items": {
                              "enum": [
                                "abstract",
                                "private",
                                "#private",
                                "protected",
                                "public",
                                "readonly",
                                "requiresQuotes",
                                "static",
                                "override",
                                "async"
                              ],
                              "type": "string"
                            },
                            "type": "array"
                          }
                        },
                        "required": ["selector", "format"],
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "description": "Selector 'classProperty'",
                        "properties": {
                          "filter": {
                            "oneOf": [
                              { "minLength": 1, "type": "string" },
                              null
                            ]
                          },
                          "selector": {
                            "enum": ["classProperty"],
                            "type": "string"
                          },
                          "modifiers": {
                            "additionalItems": false,
                            "items": {
                              "enum": [
                                "abstract",
                                "private",
                                "#private",
                                "protected",
                                "public",
                                "readonly",
                                "requiresQuotes",
                                "static",
                                "override"
                              ],
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "types": {
                            "additionalItems": false,
                            "items": { "$ref": "#/$defs/typeModifiers" },
                            "type": "array"
                          }
                        },
                        "required": ["selector", "format"],
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "description": "Selector 'objectLiteralProperty'",
                        "properties": {
                          "filter": {
                            "oneOf": [
                              { "minLength": 1, "type": "string" },
                              null
                            ]
                          },
                          "selector": {
                            "enum": ["objectLiteralProperty"],
                            "type": "string"
                          },
                          "modifiers": {
                            "additionalItems": false,
                            "items": {
                              "enum": ["public", "requiresQuotes"],
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "types": {
                            "additionalItems": false,
                            "items": { "$ref": "#/$defs/typeModifiers" },
                            "type": "array"
                          }
                        },
                        "required": ["selector", "format"],
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "description": "Selector 'typeProperty'",
                        "properties": {
                          "filter": {
                            "oneOf": [
                              { "minLength": 1, "type": "string" },
                              null
                            ]
                          },
                          "selector": {
                            "enum": ["typeProperty"],
                            "type": "string"
                          },
                          "modifiers": {
                            "additionalItems": false,
                            "items": {
                              "enum": ["public", "readonly", "requiresQuotes"],
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "types": {
                            "additionalItems": false,
                            "items": { "$ref": "#/$defs/typeModifiers" },
                            "type": "array"
                          }
                        },
                        "required": ["selector", "format"],
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "description": "Selector 'parameterProperty'",
                        "properties": {
                          "filter": {
                            "oneOf": [
                              { "minLength": 1, "type": "string" },
                              null
                            ]
                          },
                          "selector": {
                            "enum": ["parameterProperty"],
                            "type": "string"
                          },
                          "modifiers": {
                            "additionalItems": false,
                            "items": {
                              "enum": [
                                "private",
                                "protected",
                                "public",
                                "readonly"
                              ],
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "types": {
                            "additionalItems": false,
                            "items": { "$ref": "#/$defs/typeModifiers" },
                            "type": "array"
                          }
                        },
                        "required": ["selector", "format"],
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "description": "Selector 'property'",
                        "properties": {
                          "filter": {
                            "oneOf": [
                              { "minLength": 1, "type": "string" },
                              null
                            ]
                          },
                          "selector": {
                            "enum": ["property"],
                            "type": "string"
                          },
                          "modifiers": {
                            "additionalItems": false,
                            "items": {
                              "enum": [
                                "abstract",
                                "private",
                                "#private",
                                "protected",
                                "public",
                                "readonly",
                                "requiresQuotes",
                                "static",
                                "override",
                                "async"
                              ],
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "types": {
                            "additionalItems": false,
                            "items": { "$ref": "#/$defs/typeModifiers" },
                            "type": "array"
                          }
                        },
                        "required": ["selector", "format"],
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "description": "Selector 'classMethod'",
                        "properties": {
                          "filter": {
                            "oneOf": [
                              { "minLength": 1, "type": "string" },
                              null
                            ]
                          },
                          "selector": {
                            "enum": ["classMethod"],
                            "type": "string"
                          },
                          "modifiers": {
                            "additionalItems": false,
                            "items": {
                              "enum": [
                                "abstract",
                                "private",
                                "#private",
                                "protected",
                                "public",
                                "requiresQuotes",
                                "static",
                                "override",
                                "async"
                              ],
                              "type": "string"
                            },
                            "type": "array"
                          }
                        },
                        "required": ["selector", "format"],
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "description": "Selector 'objectLiteralMethod'",
                        "properties": {
                          "filter": {
                            "oneOf": [
                              { "minLength": 1, "type": "string" },
                              null
                            ]
                          },
                          "selector": {
                            "enum": ["objectLiteralMethod"],
                            "type": "string"
                          },
                          "modifiers": {
                            "additionalItems": false,
                            "items": {
                              "enum": ["public", "requiresQuotes", "async"],
                              "type": "string"
                            },
                            "type": "array"
                          }
                        },
                        "required": ["selector", "format"],
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "description": "Selector 'typeMethod'",
                        "properties": {
                          "filter": {
                            "oneOf": [
                              { "minLength": 1, "type": "string" },
                              null
                            ]
                          },
                          "selector": {
                            "enum": ["typeMethod"],
                            "type": "string"
                          },
                          "modifiers": {
                            "additionalItems": false,
                            "items": {
                              "enum": ["public", "requiresQuotes"],
                              "type": "string"
                            },
                            "type": "array"
                          }
                        },
                        "required": ["selector", "format"],
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "description": "Selector 'method'",
                        "properties": {
                          "filter": {
                            "oneOf": [
                              { "minLength": 1, "type": "string" },
                              null
                            ]
                          },
                          "selector": { "enum": ["method"], "type": "string" },
                          "modifiers": {
                            "additionalItems": false,
                            "items": {
                              "enum": [
                                "abstract",
                                "private",
                                "#private",
                                "protected",
                                "public",
                                "requiresQuotes",
                                "static",
                                "override",
                                "async"
                              ],
                              "type": "string"
                            },
                            "type": "array"
                          }
                        },
                        "required": ["selector", "format"],
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "description": "Selector 'classicAccessor'",
                        "properties": {
                          "filter": {
                            "oneOf": [
                              { "minLength": 1, "type": "string" },
                              null
                            ]
                          },
                          "selector": {
                            "enum": ["classicAccessor"],
                            "type": "string"
                          },
                          "modifiers": {
                            "additionalItems": false,
                            "items": {
                              "enum": [
                                "abstract",
                                "private",
                                "protected",
                                "public",
                                "requiresQuotes",
                                "static",
                                "override"
                              ],
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "types": {
                            "additionalItems": false,
                            "items": { "$ref": "#/$defs/typeModifiers" },
                            "type": "array"
                          }
                        },
                        "required": ["selector", "format"],
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "description": "Selector 'autoAccessor'",
                        "properties": {
                          "filter": {
                            "oneOf": [
                              { "minLength": 1, "type": "string" },
                              null
                            ]
                          },
                          "selector": {
                            "enum": ["autoAccessor"],
                            "type": "string"
                          },
                          "modifiers": {
                            "additionalItems": false,
                            "items": {
                              "enum": [
                                "abstract",
                                "private",
                                "protected",
                                "public",
                                "requiresQuotes",
                                "static",
                                "override"
                              ],
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "types": {
                            "additionalItems": false,
                            "items": { "$ref": "#/$defs/typeModifiers" },
                            "type": "array"
                          }
                        },
                        "required": ["selector", "format"],
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "description": "Selector 'accessor'",
                        "properties": {
                          "filter": {
                            "oneOf": [
                              { "minLength": 1, "type": "string" },
                              null
                            ]
                          },
                          "selector": {
                            "enum": ["accessor"],
                            "type": "string"
                          },
                          "modifiers": {
                            "additionalItems": false,
                            "items": {
                              "enum": [
                                "abstract",
                                "private",
                                "protected",
                                "public",
                                "requiresQuotes",
                                "static",
                                "override"
                              ],
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "types": {
                            "additionalItems": false,
                            "items": { "$ref": "#/$defs/typeModifiers" },
                            "type": "array"
                          }
                        },
                        "required": ["selector", "format"],
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "description": "Selector 'enumMember'",
                        "properties": {
                          "filter": {
                            "oneOf": [
                              { "minLength": 1, "type": "string" },
                              null
                            ]
                          },
                          "selector": {
                            "enum": ["enumMember"],
                            "type": "string"
                          },
                          "modifiers": {
                            "additionalItems": false,
                            "items": {
                              "enum": ["requiresQuotes"],
                              "type": "string"
                            },
                            "type": "array"
                          }
                        },
                        "required": ["selector", "format"],
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "description": "Selector 'typeLike'",
                        "properties": {
                          "filter": {
                            "oneOf": [
                              { "minLength": 1, "type": "string" },
                              null
                            ]
                          },
                          "selector": {
                            "enum": ["typeLike"],
                            "type": "string"
                          },
                          "modifiers": {
                            "additionalItems": false,
                            "items": {
                              "enum": ["abstract", "exported", "unused"],
                              "type": "string"
                            },
                            "type": "array"
                          }
                        },
                        "required": ["selector", "format"],
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "description": "Selector 'class'",
                        "properties": {
                          "filter": {
                            "oneOf": [
                              { "minLength": 1, "type": "string" },
                              null
                            ]
                          },
                          "selector": { "enum": ["class"], "type": "string" },
                          "modifiers": {
                            "additionalItems": false,
                            "items": {
                              "enum": ["abstract", "exported", "unused"],
                              "type": "string"
                            },
                            "type": "array"
                          }
                        },
                        "required": ["selector", "format"],
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "description": "Selector 'interface'",
                        "properties": {
                          "filter": {
                            "oneOf": [
                              { "minLength": 1, "type": "string" },
                              null
                            ]
                          },
                          "selector": {
                            "enum": ["interface"],
                            "type": "string"
                          },
                          "modifiers": {
                            "additionalItems": false,
                            "items": {
                              "enum": ["exported", "unused"],
                              "type": "string"
                            },
                            "type": "array"
                          }
                        },
                        "required": ["selector", "format"],
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "description": "Selector 'typeAlias'",
                        "properties": {
                          "filter": {
                            "oneOf": [
                              { "minLength": 1, "type": "string" },
                              null
                            ]
                          },
                          "selector": {
                            "enum": ["typeAlias"],
                            "type": "string"
                          },
                          "modifiers": {
                            "additionalItems": false,
                            "items": {
                              "enum": ["exported", "unused"],
                              "type": "string"
                            },
                            "type": "array"
                          }
                        },
                        "required": ["selector", "format"],
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "description": "Selector 'enum'",
                        "properties": {
                          "filter": {
                            "oneOf": [
                              { "minLength": 1, "type": "string" },
                              null
                            ]
                          },
                          "selector": { "enum": ["enum"], "type": "string" },
                          "modifiers": {
                            "additionalItems": false,
                            "items": {
                              "enum": ["exported", "unused"],
                              "type": "string"
                            },
                            "type": "array"
                          }
                        },
                        "required": ["selector", "format"],
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "description": "Selector 'typeParameter'",
                        "properties": {
                          "filter": {
                            "oneOf": [
                              { "minLength": 1, "type": "string" },
                              null
                            ]
                          },
                          "selector": {
                            "enum": ["typeParameter"],
                            "type": "string"
                          },
                          "modifiers": {
                            "additionalItems": false,
                            "items": { "enum": ["unused"], "type": "string" },
                            "type": "array"
                          }
                        },
                        "required": ["selector", "format"],
                        "type": "object"
                      },
                      {
                        "additionalProperties": false,
                        "description": "Selector 'import'",
                        "properties": {
                          "filter": {
                            "oneOf": [
                              { "minLength": 1, "type": "string" },
                              null
                            ]
                          },
                          "selector": { "enum": ["import"], "type": "string" },
                          "modifiers": {
                            "additionalItems": false,
                            "items": {
                              "enum": ["default", "namespace"],
                              "type": "string"
                            },
                            "type": "array"
                          }
                        },
                        "required": ["selector", "format"],
                        "type": "object"
                      }
                    ]
                  },
                  "type": "array"
                }
              }
            },
            "no-array-constructor": {
              "defaultOptions": [],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "Disallow generic `Array` constructors",
                  "extendsBaseRule": true,
                  "recommended": "recommended",
                  "url": "https://typescript-eslint.io/rules/no-array-constructor"
                },
                "fixable": "code",
                "messages": {
                  "useLiteral": "The array literal notation [] is preferable."
                },
                "schema": []
              }
            },
            "no-array-delete": {
              "defaultOptions": [],
              "meta": {
                "type": "problem",
                "docs": {
                  "description": "Disallow using the `delete` operator on array values",
                  "recommended": "recommended",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/no-array-delete"
                },
                "hasSuggestions": true,
                "messages": {
                  "noArrayDelete": "Using the `delete` operator with an array expression is unsafe.",
                  "useSplice": "Use `array.splice()` instead."
                },
                "schema": []
              }
            },
            "no-base-to-string": {
              "defaultOptions": [
                {
                  "ignoredTypeNames": [
                    "Error",
                    "RegExp",
                    "URL",
                    "URLSearchParams"
                  ]
                }
              ],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "Require `.toString()` and `.toLocaleString()` to only be called on objects which provide useful information when stringified",
                  "recommended": "recommended",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/no-base-to-string"
                },
                "messages": {
                  "baseArrayJoin": "Using `join()` for {{name}} {{certainty}} use Object's default stringification format ('[object Object]') when stringified.",
                  "baseToString": "'{{name}}' {{certainty}} use Object's default stringification format ('[object Object]') when stringified."
                },
                "schema": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "ignoredTypeNames": {
                        "type": "array",
                        "description": "Stringified regular expressions of type names to ignore.",
                        "items": { "type": "string" }
                      }
                    }
                  }
                ]
              }
            },
            "no-confusing-non-null-assertion": {
              "defaultOptions": [],
              "meta": {
                "type": "problem",
                "docs": {
                  "description": "Disallow non-null assertion in locations that may be confusing",
                  "recommended": "stylistic",
                  "url": "https://typescript-eslint.io/rules/no-confusing-non-null-assertion"
                },
                "hasSuggestions": true,
                "messages": {
                  "confusingAssign": "Confusing combination of non-null assertion and assignment like `a! = b`, which looks very similar to `a != b`.",
                  "confusingEqual": "Confusing combination of non-null assertion and equality test like `a! == b`, which looks very similar to `a !== b`.",
                  "confusingOperator": "Confusing combination of non-null assertion and `{{operator}}` operator like `a! {{operator}} b`, which might be misinterpreted as `!(a {{operator}} b)`.",
                  "notNeedInAssign": "Remove unnecessary non-null assertion (!) in assignment left-hand side.",
                  "notNeedInEqualTest": "Remove unnecessary non-null assertion (!) in equality test.",
                  "notNeedInOperator": "Remove possibly unnecessary non-null assertion (!) in the left operand of the `{{operator}}` operator.",
                  "wrapUpLeft": "Wrap the left-hand side in parentheses to avoid confusion with \"{{operator}}\" operator."
                },
                "schema": []
              }
            },
            "no-confusing-void-expression": {
              "defaultOptions": [
                {
                  "ignoreArrowShorthand": false,
                  "ignoreVoidOperator": false,
                  "ignoreVoidReturningFunctions": false
                }
              ],
              "meta": {
                "type": "problem",
                "docs": {
                  "description": "Require expressions of type void to appear in statement position",
                  "recommended": "strict",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/no-confusing-void-expression"
                },
                "fixable": "code",
                "hasSuggestions": true,
                "messages": {
                  "invalidVoidExpr": "Placing a void expression inside another expression is forbidden. Move it to its own statement instead.",
                  "invalidVoidExprArrow": "Returning a void expression from an arrow function shorthand is forbidden. Please add braces to the arrow function.",
                  "invalidVoidExprArrowWrapVoid": "Void expressions returned from an arrow function shorthand must be marked explicitly with the `void` operator.",
                  "invalidVoidExprReturn": "Returning a void expression from a function is forbidden. Please move it before the `return` statement.",
                  "invalidVoidExprReturnLast": "Returning a void expression from a function is forbidden. Please remove the `return` statement.",
                  "invalidVoidExprReturnWrapVoid": "Void expressions returned from a function must be marked explicitly with the `void` operator.",
                  "invalidVoidExprWrapVoid": "Void expressions used inside another expression must be moved to its own statement or marked explicitly with the `void` operator.",
                  "voidExprWrapVoid": "Mark with an explicit `void` operator."
                },
                "schema": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "ignoreArrowShorthand": {
                        "type": "boolean",
                        "description": "Whether to ignore \"shorthand\" `() =>` arrow functions: those without `{ ... }` braces."
                      },
                      "ignoreVoidOperator": {
                        "type": "boolean",
                        "description": "Whether to ignore returns that start with the `void` operator."
                      },
                      "ignoreVoidReturningFunctions": {
                        "type": "boolean",
                        "description": "Whether to ignore returns from functions with explicit `void` return types and functions with contextual `void` return types."
                      }
                    }
                  }
                ]
              }
            },
            "no-deprecated": {
              "defaultOptions": [{ "allow": [] }],
              "meta": {
                "type": "problem",
                "docs": {
                  "description": "Disallow using code marked as `@deprecated`",
                  "recommended": "strict",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/no-deprecated"
                },
                "messages": {
                  "deprecated": "`{{name}}` is deprecated.",
                  "deprecatedWithReason": "`{{name}}` is deprecated. {{reason}}"
                },
                "schema": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "allow": {
                        "items": {
                          "oneOf": [
                            { "type": "string" },
                            {
                              "additionalProperties": false,
                              "properties": {
                                "from": { "enum": ["file"], "type": "string" },
                                "name": {
                                  "oneOf": [
                                    { "type": "string" },
                                    {
                                      "items": { "type": "string" },
                                      "minItems": 1,
                                      "type": "array",
                                      "uniqueItems": true
                                    }
                                  ]
                                },
                                "path": { "type": "string" }
                              },
                              "required": ["from", "name"],
                              "type": "object"
                            },
                            {
                              "additionalProperties": false,
                              "properties": {
                                "from": { "enum": ["lib"], "type": "string" },
                                "name": {
                                  "oneOf": [
                                    { "type": "string" },
                                    {
                                      "items": { "type": "string" },
                                      "minItems": 1,
                                      "type": "array",
                                      "uniqueItems": true
                                    }
                                  ]
                                }
                              },
                              "required": ["from", "name"],
                              "type": "object"
                            },
                            {
                              "additionalProperties": false,
                              "properties": {
                                "from": {
                                  "enum": ["package"],
                                  "type": "string"
                                },
                                "name": {
                                  "oneOf": [
                                    { "type": "string" },
                                    {
                                      "items": { "type": "string" },
                                      "minItems": 1,
                                      "type": "array",
                                      "uniqueItems": true
                                    }
                                  ]
                                },
                                "package": { "type": "string" }
                              },
                              "required": ["from", "name", "package"],
                              "type": "object"
                            }
                          ]
                        },
                        "type": "array",
                        "description": "Type specifiers that can be allowed."
                      }
                    }
                  }
                ]
              }
            },
            "no-dupe-class-members": {
              "defaultOptions": [],
              "meta": {
                "type": "problem",
                "docs": {
                  "description": "Disallow duplicate class members",
                  "extendsBaseRule": true,
                  "url": "https://typescript-eslint.io/rules/no-dupe-class-members"
                },
                "messages": { "unexpected": "Duplicate name '{{name}}'." },
                "schema": []
              }
            },
            "no-duplicate-enum-values": {
              "defaultOptions": [],
              "meta": {
                "type": "problem",
                "docs": {
                  "description": "Disallow duplicate enum member values",
                  "recommended": "recommended",
                  "url": "https://typescript-eslint.io/rules/no-duplicate-enum-values"
                },
                "hasSuggestions": false,
                "messages": {
                  "duplicateValue": "Duplicate enum member value {{value}}."
                },
                "schema": []
              }
            },
            "no-duplicate-type-constituents": {
              "defaultOptions": [
                { "ignoreIntersections": false, "ignoreUnions": false }
              ],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "Disallow duplicate constituents of union or intersection types",
                  "recommended": "recommended",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/no-duplicate-type-constituents"
                },
                "fixable": "code",
                "messages": {
                  "duplicate": "{{type}} type constituent is duplicated with {{previous}}.",
                  "unnecessary": "Explicit undefined is unnecessary on an optional parameter."
                },
                "schema": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "ignoreIntersections": {
                        "type": "boolean",
                        "description": "Whether to ignore `&` intersections."
                      },
                      "ignoreUnions": {
                        "type": "boolean",
                        "description": "Whether to ignore `|` unions."
                      }
                    }
                  }
                ]
              }
            },
            "no-dynamic-delete": {
              "defaultOptions": [],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "Disallow using the `delete` operator on computed key expressions",
                  "recommended": "strict",
                  "url": "https://typescript-eslint.io/rules/no-dynamic-delete"
                },
                "fixable": "code",
                "messages": {
                  "dynamicDelete": "Do not delete dynamically computed property keys."
                },
                "schema": []
              }
            },
            "no-empty-function": {
              "defaultOptions": [{ "allow": [] }],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "Disallow empty functions",
                  "extendsBaseRule": true,
                  "recommended": "stylistic",
                  "url": "https://typescript-eslint.io/rules/no-empty-function"
                },
                "messages": { "unexpected": "Unexpected empty {{name}}." },
                "schema": [
                  {
                    "type": "object",
                    "properties": {
                      "allow": {
                        "type": "array",
                        "items": {
                          "enum": [
                            "functions",
                            "arrowFunctions",
                            "generatorFunctions",
                            "methods",
                            "generatorMethods",
                            "getters",
                            "setters",
                            "constructors",
                            "private-constructors",
                            "protected-constructors",
                            "asyncFunctions",
                            "asyncMethods",
                            "decoratedFunctions",
                            "overrideMethods"
                          ],
                          "type": "string"
                        },
                        "uniqueItems": true,
                        "description": "Locations and kinds of functions that are allowed to be empty."
                      }
                    },
                    "additionalProperties": false
                  }
                ]
              }
            },
            "no-empty-interface": {
              "defaultOptions": [{ "allowSingleExtends": false }],
              "meta": {
                "type": "suggestion",
                "deprecated": {
                  "deprecatedSince": "8.0.0",
                  "replacedBy": [
                    {
                      "rule": {
                        "name": "@typescript-eslint/no-empty-object-type",
                        "url": "https://typescript-eslint.io/rules/no-empty-object-type"
                      }
                    }
                  ],
                  "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8977"
                },
                "docs": {
                  "description": "Disallow the declaration of empty interfaces",
                  "url": "https://typescript-eslint.io/rules/no-empty-interface"
                },
                "fixable": "code",
                "hasSuggestions": true,
                "messages": {
                  "noEmpty": "An empty interface is equivalent to `{}`.",
                  "noEmptyWithSuper": "An interface declaring no members is equivalent to its supertype."
                },
                "replacedBy": ["@typescript-eslint/no-empty-object-type"],
                "schema": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "allowSingleExtends": {
                        "type": "boolean",
                        "description": "Whether to allow empty interfaces that extend a single other interface."
                      }
                    }
                  }
                ]
              }
            },
            "no-empty-object-type": {
              "defaultOptions": [
                { "allowInterfaces": "never", "allowObjectTypes": "never" }
              ],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "Disallow accidentally using the \"empty object\" type",
                  "recommended": "recommended",
                  "url": "https://typescript-eslint.io/rules/no-empty-object-type"
                },
                "hasSuggestions": true,
                "messages": {
                  "noEmptyInterface": "An empty interface declaration allows any non-nullish value, including literals like `0` and `\"\"`.\n- If that's what you want, disable this lint rule with an inline comment or configure the '{{ option }}' rule option.\n- If you want a type meaning \"any object\", you probably want `object` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead.",
                  "noEmptyInterfaceWithSuper": "An interface declaring no members is equivalent to its supertype.",
                  "noEmptyObject": "The `{}` (\"empty object\") type allows any non-nullish value, including literals like `0` and `\"\"`.\n- If that's what you want, disable this lint rule with an inline comment or configure the '{{ option }}' rule option.\n- If you want a type meaning \"any object\", you probably want `object` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead.",
                  "replaceEmptyInterface": "Replace empty interface with `{{replacement}}`.",
                  "replaceEmptyInterfaceWithSuper": "Replace empty interface with a type alias.",
                  "replaceEmptyObjectType": "Replace `{}` with `{{replacement}}`."
                },
                "schema": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "allowInterfaces": {
                        "type": "string",
                        "description": "Whether to allow empty interfaces.",
                        "enum": ["always", "never", "with-single-extends"]
                      },
                      "allowObjectTypes": {
                        "type": "string",
                        "description": "Whether to allow empty object type literals.",
                        "enum": ["always", "never"]
                      },
                      "allowWithName": {
                        "type": "string",
                        "description": "A stringified regular expression to allow interfaces and object type aliases with the configured name."
                      }
                    }
                  }
                ]
              }
            },
            "no-explicit-any": {
              "defaultOptions": [
                { "fixToUnknown": false, "ignoreRestArgs": false }
              ],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "Disallow the `any` type",
                  "recommended": "recommended",
                  "url": "https://typescript-eslint.io/rules/no-explicit-any"
                },
                "fixable": "code",
                "hasSuggestions": true,
                "messages": {
                  "suggestNever": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",
                  "suggestPropertyKey": "Use `PropertyKey` instead, this is more explicit than `keyof any`.",
                  "suggestUnknown": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.",
                  "unexpectedAny": "Unexpected any. Specify a different type."
                },
                "schema": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "fixToUnknown": {
                        "type": "boolean",
                        "description": "Whether to enable auto-fixing in which the `any` type is converted to the `unknown` type."
                      },
                      "ignoreRestArgs": {
                        "type": "boolean",
                        "description": "Whether to ignore rest parameter arrays."
                      }
                    }
                  }
                ]
              }
            },
            "no-extra-non-null-assertion": {
              "defaultOptions": [],
              "meta": {
                "type": "problem",
                "docs": {
                  "description": "Disallow extra non-null assertions",
                  "recommended": "recommended",
                  "url": "https://typescript-eslint.io/rules/no-extra-non-null-assertion"
                },
                "fixable": "code",
                "messages": {
                  "noExtraNonNullAssertion": "Forbidden extra non-null assertion."
                },
                "schema": []
              }
            },
            "no-extraneous-class": {
              "defaultOptions": [
                {
                  "allowConstructorOnly": false,
                  "allowEmpty": false,
                  "allowStaticOnly": false,
                  "allowWithDecorator": false
                }
              ],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "Disallow classes used as namespaces",
                  "recommended": "strict",
                  "url": "https://typescript-eslint.io/rules/no-extraneous-class"
                },
                "messages": {
                  "empty": "Unexpected empty class.",
                  "onlyConstructor": "Unexpected class with only a constructor.",
                  "onlyStatic": "Unexpected class with only static properties."
                },
                "schema": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "allowConstructorOnly": {
                        "type": "boolean",
                        "description": "Whether to allow extraneous classes that contain only a constructor."
                      },
                      "allowEmpty": {
                        "type": "boolean",
                        "description": "Whether to allow extraneous classes that have no body (i.e. are empty)."
                      },
                      "allowStaticOnly": {
                        "type": "boolean",
                        "description": "Whether to allow extraneous classes that only contain static members."
                      },
                      "allowWithDecorator": {
                        "type": "boolean",
                        "description": "Whether to allow extraneous classes that include a decorator."
                      }
                    }
                  }
                ]
              }
            },
            "no-floating-promises": {
              "defaultOptions": [
                {
                  "allowForKnownSafeCalls": [],
                  "checkThenables": false,
                  "ignoreIIFE": false,
                  "ignoreVoid": true
                }
              ],
              "meta": {
                "type": "problem",
                "docs": {
                  "description": "Require Promise-like statements to be handled appropriately",
                  "recommended": "recommended",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/no-floating-promises"
                },
                "hasSuggestions": true,
                "messages": {
                  "floating": "Promises must be awaited, end with a call to .catch, or end with a call to .then with a rejection handler.",
                  "floatingFixAwait": "Add await operator.",
                  "floatingFixVoid": "Add void operator to ignore.",
                  "floatingPromiseArray": "An array of Promises may be unintentional. Consider handling the promises' fulfillment or rejection with Promise.all or similar.",
                  "floatingPromiseArrayVoid": "An array of Promises may be unintentional. Consider handling the promises' fulfillment or rejection with Promise.all or similar, or explicitly marking the expression as ignored with the `void` operator.",
                  "floatingUselessRejectionHandler": "Promises must be awaited, end with a call to .catch, or end with a call to .then with a rejection handler. A rejection handler that is not a function will be ignored.",
                  "floatingUselessRejectionHandlerVoid": "Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator. A rejection handler that is not a function will be ignored.",
                  "floatingVoid": "Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator."
                },
                "schema": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "allowForKnownSafeCalls": {
                        "type": "array",
                        "description": "Type specifiers of functions whose calls are safe to float."
                      },
                      "allowForKnownSafePromises": {
                        "type": "array",
                        "description": "Type specifiers that are known to be safe to float."
                      },
                      "checkThenables": {
                        "type": "boolean",
                        "description": "Whether to check all \"Thenable\"s, not just the built-in Promise type."
                      },
                      "ignoreIIFE": {
                        "type": "boolean",
                        "description": "Whether to ignore async IIFEs (Immediately Invoked Function Expressions)."
                      },
                      "ignoreVoid": {
                        "type": "boolean",
                        "description": "Whether to ignore `void` expressions."
                      }
                    }
                  }
                ]
              }
            },
            "no-for-in-array": {
              "defaultOptions": [],
              "meta": {
                "type": "problem",
                "docs": {
                  "description": "Disallow iterating over an array with a for-in loop",
                  "recommended": "recommended",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/no-for-in-array"
                },
                "messages": {
                  "forInViolation": "For-in loops over arrays skips holes, returns indices as strings, and may visit the prototype chain or other enumerable properties. Use a more robust iteration method such as for-of or array.forEach instead."
                },
                "schema": []
              }
            },
            "no-implied-eval": {
              "defaultOptions": [],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "Disallow the use of `eval()`-like functions",
                  "extendsBaseRule": true,
                  "recommended": "recommended",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/no-implied-eval"
                },
                "messages": {
                  "noFunctionConstructor": "Implied eval. Do not use the Function constructor to create functions.",
                  "noImpliedEvalError": "Implied eval. Consider passing a function."
                },
                "schema": []
              }
            },
            "no-import-type-side-effects": {
              "defaultOptions": [],
              "meta": {
                "type": "problem",
                "docs": {
                  "description": "Enforce the use of top-level import type qualifier when an import only has specifiers with inline type qualifiers",
                  "url": "https://typescript-eslint.io/rules/no-import-type-side-effects"
                },
                "fixable": "code",
                "messages": {
                  "useTopLevelQualifier": "TypeScript will only remove the inline type specifiers which will leave behind a side effect import at runtime. Convert this to a top-level type qualifier to properly remove the entire import."
                },
                "schema": []
              }
            },
            "no-inferrable-types": {
              "defaultOptions": [
                { "ignoreParameters": false, "ignoreProperties": false }
              ],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "Disallow explicit type declarations for variables or parameters initialized to a number, string, or boolean",
                  "recommended": "stylistic",
                  "url": "https://typescript-eslint.io/rules/no-inferrable-types"
                },
                "fixable": "code",
                "messages": {
                  "noInferrableType": "Type {{type}} trivially inferred from a {{type}} literal, remove type annotation."
                },
                "schema": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "ignoreParameters": {
                        "type": "boolean",
                        "description": "Whether to ignore function parameters."
                      },
                      "ignoreProperties": {
                        "type": "boolean",
                        "description": "Whether to ignore class properties."
                      }
                    }
                  }
                ]
              }
            },
            "no-invalid-this": {
              "defaultOptions": [{ "capIsConstructor": true }],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "Disallow `this` keywords outside of classes or class-like objects",
                  "extendsBaseRule": true,
                  "url": "https://typescript-eslint.io/rules/no-invalid-this"
                },
                "messages": { "unexpectedThis": "Unexpected 'this'." },
                "schema": [
                  {
                    "type": "object",
                    "properties": { "capIsConstructor": { "type": "boolean" } },
                    "additionalProperties": false
                  }
                ]
              }
            },
            "no-invalid-void-type": {
              "defaultOptions": [
                {
                  "allowAsThisParameter": false,
                  "allowInGenericTypeArguments": true
                }
              ],
              "meta": {
                "type": "problem",
                "docs": {
                  "description": "Disallow `void` type outside of generic or return types",
                  "recommended": "strict",
                  "url": "https://typescript-eslint.io/rules/no-invalid-void-type"
                },
                "messages": {
                  "invalidVoidForGeneric": "{{ generic }} may not have void as a type argument.",
                  "invalidVoidNotReturn": "void is only valid as a return type.",
                  "invalidVoidNotReturnOrGeneric": "void is only valid as a return type or generic type argument.",
                  "invalidVoidNotReturnOrThisParam": "void is only valid as return type or type of `this` parameter.",
                  "invalidVoidNotReturnOrThisParamOrGeneric": "void is only valid as a return type or generic type argument or the type of a `this` parameter.",
                  "invalidVoidUnionConstituent": "void is not valid as a constituent in a union type"
                },
                "schema": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "allowAsThisParameter": {
                        "type": "boolean",
                        "description": "Whether a `this` parameter of a function may be `void`."
                      },
                      "allowInGenericTypeArguments": {
                        "description": "Whether `void` can be used as a valid value for generic type parameters.",
                        "oneOf": [
                          {
                            "type": "boolean",
                            "description": "Whether `void` can be used as a valid value for all generic type parameters."
                          },
                          {
                            "type": "array",
                            "description": "Allowlist of types that may accept `void` as a generic type parameter.",
                            "items": { "type": "string" },
                            "minItems": 1
                          }
                        ]
                      }
                    }
                  }
                ]
              }
            },
            "no-loop-func": {
              "defaultOptions": [],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "Disallow function declarations that contain unsafe references inside loop statements",
                  "extendsBaseRule": true,
                  "url": "https://typescript-eslint.io/rules/no-loop-func"
                },
                "messages": {
                  "unsafeRefs": "Function declared in a loop contains unsafe references to variable(s) {{ varNames }}."
                },
                "schema": []
              }
            },
            "no-loss-of-precision": {
              "defaultOptions": [],
              "meta": {
                "type": "problem",
                "deprecated": {
                  "deprecatedSince": "8.0.0",
                  "replacedBy": [
                    {
                      "rule": {
                        "name": "no-loss-of-precision",
                        "url": "https://eslint.org/docs/latest/rules/no-loss-of-precision"
                      }
                    }
                  ],
                  "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8832"
                },
                "docs": {
                  "description": "Disallow literal numbers that lose precision",
                  "extendsBaseRule": true,
                  "url": "https://typescript-eslint.io/rules/no-loss-of-precision"
                },
                "messages": {
                  "noLossOfPrecision": "This number literal will lose precision at runtime."
                },
                "schema": []
              }
            },
            "no-magic-numbers": {
              "defaultOptions": [
                {
                  "detectObjects": false,
                  "enforceConst": false,
                  "ignore": [],
                  "ignoreArrayIndexes": false,
                  "ignoreEnums": false,
                  "ignoreNumericLiteralTypes": false,
                  "ignoreReadonlyClassProperties": false,
                  "ignoreTypeIndexes": false
                }
              ],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "Disallow magic numbers",
                  "extendsBaseRule": true,
                  "url": "https://typescript-eslint.io/rules/no-magic-numbers"
                },
                "messages": {
                  "useConst": "Number constants declarations must use 'const'.",
                  "noMagic": "No magic number: {{raw}}."
                },
                "schema": [
                  {
                    "type": "object",
                    "properties": {
                      "detectObjects": { "type": "boolean", "default": false },
                      "enforceConst": { "type": "boolean", "default": false },
                      "ignore": {
                        "type": "array",
                        "items": {
                          "anyOf": [
                            { "type": "number" },
                            {
                              "type": "string",
                              "pattern": "^[+-]?(?:0|[1-9][0-9]*)n$"
                            }
                          ]
                        },
                        "uniqueItems": true
                      },
                      "ignoreArrayIndexes": {
                        "type": "boolean",
                        "default": false
                      },
                      "ignoreDefaultValues": {
                        "type": "boolean",
                        "default": false
                      },
                      "ignoreClassFieldInitialValues": {
                        "type": "boolean",
                        "default": false
                      },
                      "ignoreEnums": {
                        "type": "boolean",
                        "default": false,
                        "description": "Whether enums used in TypeScript are considered okay."
                      },
                      "ignoreNumericLiteralTypes": {
                        "type": "boolean",
                        "default": false,
                        "description": "Whether numbers used in TypeScript numeric literal types are considered okay."
                      },
                      "ignoreReadonlyClassProperties": {
                        "type": "boolean",
                        "default": false,
                        "description": "Whether `readonly` class properties are considered okay."
                      },
                      "ignoreTypeIndexes": {
                        "type": "boolean",
                        "default": false,
                        "description": "Whether numbers used to index types are okay."
                      }
                    },
                    "additionalProperties": false
                  }
                ]
              }
            },
            "no-meaningless-void-operator": {
              "defaultOptions": [{ "checkNever": false }],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "Disallow the `void` operator except when used to discard a value",
                  "recommended": "strict",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/no-meaningless-void-operator"
                },
                "fixable": "code",
                "hasSuggestions": true,
                "messages": {
                  "meaninglessVoidOperator": "void operator shouldn't be used on {{type}}; it should convey that a return value is being ignored",
                  "removeVoid": "Remove 'void'"
                },
                "schema": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "checkNever": {
                        "type": "boolean",
                        "default": false,
                        "description": "Whether to suggest removing `void` when the argument has type `never`."
                      }
                    }
                  }
                ]
              }
            },
            "no-misused-new": {
              "defaultOptions": [],
              "meta": {
                "type": "problem",
                "docs": {
                  "description": "Enforce valid definition of `new` and `constructor`",
                  "recommended": "recommended",
                  "url": "https://typescript-eslint.io/rules/no-misused-new"
                },
                "messages": {
                  "errorMessageClass": "Class cannot have method named `new`.",
                  "errorMessageInterface": "Interfaces cannot be constructed, only classes."
                },
                "schema": []
              }
            },
            "no-misused-promises": {
              "defaultOptions": [
                {
                  "checksConditionals": true,
                  "checksSpreads": true,
                  "checksVoidReturn": true
                }
              ],
              "meta": {
                "type": "problem",
                "docs": {
                  "description": "Disallow Promises in places not designed to handle them",
                  "recommended": "recommended",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/no-misused-promises"
                },
                "messages": {
                  "conditional": "Expected non-Promise value in a boolean conditional.",
                  "predicate": "Expected a non-Promise value to be returned.",
                  "spread": "Expected a non-Promise value to be spreaded in an object.",
                  "voidReturnArgument": "Promise returned in function argument where a void return was expected.",
                  "voidReturnAttribute": "Promise-returning function provided to attribute where a void return was expected.",
                  "voidReturnInheritedMethod": "Promise-returning method provided where a void return was expected by extended/implemented type '{{ heritageTypeName }}'.",
                  "voidReturnProperty": "Promise-returning function provided to property where a void return was expected.",
                  "voidReturnReturnValue": "Promise-returning function provided to return value where a void return was expected.",
                  "voidReturnVariable": "Promise-returning function provided to variable where a void return was expected."
                },
                "schema": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "checksConditionals": {
                        "type": "boolean",
                        "description": "Whether to warn when a Promise is provided to conditional statements."
                      },
                      "checksSpreads": {
                        "type": "boolean",
                        "description": "Whether to warn when `...` spreading a `Promise`."
                      },
                      "checksVoidReturn": {
                        "description": "Whether to warn when a Promise is returned from a function typed as returning `void`.",
                        "oneOf": [
                          {
                            "type": "boolean",
                            "description": "Whether to disable checking all asynchronous functions."
                          },
                          {
                            "type": "object",
                            "additionalProperties": false,
                            "description": "Which forms of functions may have checking disabled.",
                            "properties": {
                              "arguments": {
                                "type": "boolean",
                                "description": "Disables checking an asynchronous function passed as argument where the parameter type expects a function that returns `void`."
                              },
                              "attributes": {
                                "type": "boolean",
                                "description": "Disables checking an asynchronous function passed as a JSX attribute expected to be a function that returns `void`."
                              },
                              "inheritedMethods": {
                                "type": "boolean",
                                "description": "Disables checking an asynchronous method in a type that extends or implements another type expecting that method to return `void`."
                              },
                              "properties": {
                                "type": "boolean",
                                "description": "Disables checking an asynchronous function passed as an object property expected to be a function that returns `void`."
                              },
                              "returns": {
                                "type": "boolean",
                                "description": "Disables checking an asynchronous function returned in a function whose return type is a function that returns `void`."
                              },
                              "variables": {
                                "type": "boolean",
                                "description": "Disables checking an asynchronous function used as a variable whose return type is a function that returns `void`."
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                ]
              }
            },
            "no-misused-spread": {
              "defaultOptions": [{ "allow": [] }],
              "meta": {
                "type": "problem",
                "docs": {
                  "description": "Disallow using the spread operator when it might cause unexpected behavior",
                  "recommended": "strict",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/no-misused-spread"
                },
                "hasSuggestions": true,
                "messages": {
                  "addAwait": "Add await operator.",
                  "noArraySpreadInObject": "Using the spread operator on an array in an object will result in a list of indices.",
                  "noClassDeclarationSpreadInObject": "Using the spread operator on class declarations will spread only their static properties, and will lose their class prototype.",
                  "noClassInstanceSpreadInObject": "Using the spread operator on class instances will lose their class prototype.",
                  "noFunctionSpreadInObject": "Using the spread operator on a function without additional properties can cause unexpected behavior. Did you forget to call the function?",
                  "noIterableSpreadInObject": "Using the spread operator on an Iterable in an object can cause unexpected behavior.",
                  "noMapSpreadInObject": "Using the spread operator on a Map in an object will result in an empty object. Did you mean to use `Object.fromEntries(map)` instead?",
                  "noPromiseSpreadInObject": "Using the spread operator on Promise in an object can cause unexpected behavior. Did you forget to await the promise?",
                  "noStringSpread": "Using the spread operator on a string can mishandle special characters, as can `.split(\"\")`.\n- `...` produces Unicode code points, which will decompose complex emojis into individual emojis\n- .split(\"\") produces UTF-16 code units, which breaks rich characters in many languages\nConsider using `Intl.Segmenter` for locale-aware string decomposition.\nOtherwise, if you don't need to preserve emojis or other non-Ascii characters, disable this lint rule on this line or configure the 'allow' rule option.",
                  "replaceMapSpreadInObject": "Replace map spread in object with `Object.fromEntries()`"
                },
                "schema": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "allow": {
                        "type": "array",
                        "description": "An array of type specifiers that are known to be safe to spread."
                      }
                    }
                  }
                ]
              }
            },
            "no-mixed-enums": {
              "defaultOptions": [],
              "meta": {
                "type": "problem",
                "docs": {
                  "description": "Disallow enums from having both number and string members",
                  "recommended": "strict",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/no-mixed-enums"
                },
                "messages": {
                  "mixed": "Mixing number and string enums can be confusing."
                },
                "schema": []
              }
            },
            "no-namespace": {
              "defaultOptions": [
                { "allowDeclarations": false, "allowDefinitionFiles": true }
              ],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "Disallow TypeScript namespaces",
                  "recommended": "recommended",
                  "url": "https://typescript-eslint.io/rules/no-namespace"
                },
                "messages": {
                  "moduleSyntaxIsPreferred": "ES2015 module syntax is preferred over namespaces."
                },
                "schema": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "allowDeclarations": {
                        "type": "boolean",
                        "description": "Whether to allow `declare` with custom TypeScript namespaces."
                      },
                      "allowDefinitionFiles": {
                        "type": "boolean",
                        "description": "Whether to allow `declare` with custom TypeScript namespaces inside definition files."
                      }
                    }
                  }
                ]
              }
            },
            "no-non-null-asserted-nullish-coalescing": {
              "defaultOptions": [],
              "meta": {
                "type": "problem",
                "docs": {
                  "description": "Disallow non-null assertions in the left operand of a nullish coalescing operator",
                  "recommended": "strict",
                  "url": "https://typescript-eslint.io/rules/no-non-null-asserted-nullish-coalescing"
                },
                "hasSuggestions": true,
                "messages": {
                  "noNonNullAssertedNullishCoalescing": "The nullish coalescing operator is designed to handle undefined and null - using a non-null assertion is not needed.",
                  "suggestRemovingNonNull": "Remove the non-null assertion."
                },
                "schema": []
              }
            },
            "no-non-null-asserted-optional-chain": {
              "defaultOptions": [],
              "meta": {
                "type": "problem",
                "docs": {
                  "description": "Disallow non-null assertions after an optional chain expression",
                  "recommended": "recommended",
                  "url": "https://typescript-eslint.io/rules/no-non-null-asserted-optional-chain"
                },
                "hasSuggestions": true,
                "messages": {
                  "noNonNullOptionalChain": "Optional chain expressions can return undefined by design - using a non-null assertion is unsafe and wrong.",
                  "suggestRemovingNonNull": "You should remove the non-null assertion."
                },
                "schema": []
              }
            },
            "no-non-null-assertion": {
              "defaultOptions": [],
              "meta": {
                "type": "problem",
                "docs": {
                  "description": "Disallow non-null assertions using the `!` postfix operator",
                  "recommended": "strict",
                  "url": "https://typescript-eslint.io/rules/no-non-null-assertion"
                },
                "hasSuggestions": true,
                "messages": {
                  "noNonNull": "Forbidden non-null assertion.",
                  "suggestOptionalChain": "Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."
                },
                "schema": []
              }
            },
            "no-redeclare": {
              "defaultOptions": [
                { "builtinGlobals": true, "ignoreDeclarationMerge": true }
              ],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "Disallow variable redeclaration",
                  "extendsBaseRule": true,
                  "url": "https://typescript-eslint.io/rules/no-redeclare"
                },
                "messages": {
                  "redeclared": "'{{id}}' is already defined.",
                  "redeclaredAsBuiltin": "'{{id}}' is already defined as a built-in global variable.",
                  "redeclaredBySyntax": "'{{id}}' is already defined by a variable declaration."
                },
                "schema": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "builtinGlobals": {
                        "type": "boolean",
                        "description": "Whether to report shadowing of built-in global variables."
                      },
                      "ignoreDeclarationMerge": {
                        "type": "boolean",
                        "description": "Whether to ignore declaration merges between certain TypeScript declaration types."
                      }
                    }
                  }
                ]
              }
            },
            "no-redundant-type-constituents": {
              "defaultOptions": [],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "Disallow members of unions and intersections that do nothing or override type information",
                  "recommended": "recommended",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/no-redundant-type-constituents"
                },
                "messages": {
                  "errorTypeOverrides": "'{{typeName}}' is an 'error' type that acts as 'any' and overrides all other types in this {{container}} type.",
                  "literalOverridden": "{{literal}} is overridden by {{primitive}} in this union type.",
                  "overridden": "'{{typeName}}' is overridden by other types in this {{container}} type.",
                  "overrides": "'{{typeName}}' overrides all other types in this {{container}} type.",
                  "primitiveOverridden": "{{primitive}} is overridden by the {{literal}} in this intersection type."
                },
                "schema": []
              }
            },
            "no-require-imports": {
              "defaultOptions": [{ "allow": [], "allowAsImport": false }],
              "meta": {
                "type": "problem",
                "docs": {
                  "description": "Disallow invocation of `require()`",
                  "recommended": "recommended",
                  "url": "https://typescript-eslint.io/rules/no-require-imports"
                },
                "messages": {
                  "noRequireImports": "A `require()` style import is forbidden."
                },
                "schema": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "allow": {
                        "type": "array",
                        "description": "Patterns of import paths to allow requiring from.",
                        "items": { "type": "string" }
                      },
                      "allowAsImport": {
                        "type": "boolean",
                        "description": "Allows `require` statements in import declarations."
                      }
                    }
                  }
                ]
              }
            },
            "no-restricted-imports": {
              "defaultOptions": [],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "Disallow specified modules when loaded by `import`",
                  "extendsBaseRule": true,
                  "url": "https://typescript-eslint.io/rules/no-restricted-imports"
                },
                "messages": {
                  "path": "'{{importSource}}' import is restricted from being used.",
                  "pathWithCustomMessage": "'{{importSource}}' import is restricted from being used. {{customMessage}}",
                  "patterns": "'{{importSource}}' import is restricted from being used by a pattern.",
                  "patternWithCustomMessage": "'{{importSource}}' import is restricted from being used by a pattern. {{customMessage}}",
                  "patternAndImportName": "'{{importName}}' import from '{{importSource}}' is restricted from being used by a pattern.",
                  "patternAndImportNameWithCustomMessage": "'{{importName}}' import from '{{importSource}}' is restricted from being used by a pattern. {{customMessage}}",
                  "patternAndEverything": "* import is invalid because '{{importNames}}' from '{{importSource}}' is restricted from being used by a pattern.",
                  "patternAndEverythingWithRegexImportName": "* import is invalid because import name matching '{{importNames}}' pattern from '{{importSource}}' is restricted from being used.",
                  "patternAndEverythingWithCustomMessage": "* import is invalid because '{{importNames}}' from '{{importSource}}' is restricted from being used by a pattern. {{customMessage}}",
                  "patternAndEverythingWithRegexImportNameAndCustomMessage": "* import is invalid because import name matching '{{importNames}}' pattern from '{{importSource}}' is restricted from being used. {{customMessage}}",
                  "everything": "* import is invalid because '{{importNames}}' from '{{importSource}}' is restricted.",
                  "everythingWithCustomMessage": "* import is invalid because '{{importNames}}' from '{{importSource}}' is restricted. {{customMessage}}",
                  "importName": "'{{importName}}' import from '{{importSource}}' is restricted.",
                  "importNameWithCustomMessage": "'{{importName}}' import from '{{importSource}}' is restricted. {{customMessage}}",
                  "allowedImportName": "'{{importName}}' import from '{{importSource}}' is restricted because only '{{allowedImportNames}}' import(s) is/are allowed.",
                  "allowedImportNameWithCustomMessage": "'{{importName}}' import from '{{importSource}}' is restricted because only '{{allowedImportNames}}' import(s) is/are allowed. {{customMessage}}",
                  "everythingWithAllowImportNames": "* import is invalid because only '{{allowedImportNames}}' from '{{importSource}}' is/are allowed.",
                  "everythingWithAllowImportNamesAndCustomMessage": "* import is invalid because only '{{allowedImportNames}}' from '{{importSource}}' is/are allowed. {{customMessage}}",
                  "allowedImportNamePattern": "'{{importName}}' import from '{{importSource}}' is restricted because only imports that match the pattern '{{allowedImportNamePattern}}' are allowed from '{{importSource}}'.",
                  "allowedImportNamePatternWithCustomMessage": "'{{importName}}' import from '{{importSource}}' is restricted because only imports that match the pattern '{{allowedImportNamePattern}}' are allowed from '{{importSource}}'. {{customMessage}}",
                  "everythingWithAllowedImportNamePattern": "* import is invalid because only imports that match the pattern '{{allowedImportNamePattern}}' from '{{importSource}}' are allowed.",
                  "everythingWithAllowedImportNamePatternWithCustomMessage": "* import is invalid because only imports that match the pattern '{{allowedImportNamePattern}}' from '{{importSource}}' are allowed. {{customMessage}}"
                },
                "schema": {
                  "anyOf": [
                    {
                      "type": "array",
                      "items": {
                        "anyOf": [
                          { "type": "string" },
                          {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                              "name": { "type": "string" },
                              "message": { "type": "string", "minLength": 1 },
                              "importNames": {
                                "type": "array",
                                "items": { "type": "string" }
                              },
                              "allowImportNames": {
                                "type": "array",
                                "items": { "type": "string" }
                              },
                              "allowTypeImports": {
                                "type": "boolean",
                                "description": "Whether to allow type-only imports for a path."
                              }
                            },
                            "required": ["name"]
                          }
                        ]
                      },
                      "uniqueItems": true
                    },
                    {
                      "type": "array",
                      "additionalItems": false,
                      "items": [
                        {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "patterns": {
                              "anyOf": [
                                {
                                  "type": "array",
                                  "items": { "type": "string" },
                                  "uniqueItems": true
                                },
                                {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "additionalProperties": false,
                                    "properties": {
                                      "importNames": {
                                        "type": "array",
                                        "items": { "type": "string" },
                                        "minItems": 1,
                                        "uniqueItems": true
                                      },
                                      "allowImportNames": {
                                        "type": "array",
                                        "items": { "type": "string" },
                                        "minItems": 1,
                                        "uniqueItems": true
                                      },
                                      "group": {
                                        "type": "array",
                                        "items": { "type": "string" },
                                        "minItems": 1,
                                        "uniqueItems": true
                                      },
                                      "regex": { "type": "string" },
                                      "importNamePattern": { "type": "string" },
                                      "allowImportNamePattern": {
                                        "type": "string"
                                      },
                                      "message": {
                                        "type": "string",
                                        "minLength": 1
                                      },
                                      "caseSensitive": { "type": "boolean" }
                                    }
                                  },
                                  "uniqueItems": true
                                }
                              ]
                            }
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            },
            "no-restricted-types": {
              "defaultOptions": [{}],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "Disallow certain types",
                  "url": "https://typescript-eslint.io/rules/no-restricted-types"
                },
                "fixable": "code",
                "hasSuggestions": true,
                "messages": {
                  "bannedTypeMessage": "Don't use `{{name}}` as a type.{{customMessage}}",
                  "bannedTypeReplacement": "Replace `{{name}}` with `{{replacement}}`."
                },
                "schema": [
                  {
                    "type": "object",
                    "$defs": {
                      "banConfig": {
                        "oneOf": [
                          {
                            "type": "boolean",
                            "description": "Bans the type with the default message.",
                            "enum": [true]
                          },
                          {
                            "type": "string",
                            "description": "Bans the type with a custom message."
                          },
                          {
                            "type": "object",
                            "additionalProperties": false,
                            "description": "Bans a type.",
                            "properties": {
                              "fixWith": {
                                "type": "string",
                                "description": "Type to autofix replace with. Note that autofixers can be applied automatically - so you need to be careful with this option."
                              },
                              "message": {
                                "type": "string",
                                "description": "Custom error message."
                              },
                              "suggest": {
                                "type": "array",
                                "description": "Types to suggest replacing with.",
                                "items": { "type": "string" }
                              }
                            }
                          }
                        ]
                      }
                    },
                    "additionalProperties": false,
                    "properties": {
                      "types": {
                        "type": "object",
                        "additionalProperties": {
                          "$ref": "#/items/0/$defs/banConfig"
                        },
                        "description": "An object whose keys are the types you want to ban, and the values are error messages."
                      }
                    }
                  }
                ]
              }
            },
            "no-shadow": {
              "defaultOptions": [
                {
                  "allow": [],
                  "builtinGlobals": false,
                  "hoist": "functions-and-types",
                  "ignoreFunctionTypeParameterNameValueShadow": true,
                  "ignoreOnInitialization": false,
                  "ignoreTypeValueShadow": true
                }
              ],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "Disallow variable declarations from shadowing variables declared in the outer scope",
                  "extendsBaseRule": true,
                  "url": "https://typescript-eslint.io/rules/no-shadow"
                },
                "messages": {
                  "noShadow": "'{{name}}' is already declared in the upper scope on line {{shadowedLine}} column {{shadowedColumn}}.",
                  "noShadowGlobal": "'{{name}}' is already a global variable."
                },
                "schema": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "allow": {
                        "type": "array",
                        "description": "Identifier names for which shadowing is allowed.",
                        "items": { "type": "string" }
                      },
                      "builtinGlobals": {
                        "type": "boolean",
                        "description": "Whether to report shadowing of built-in global variables."
                      },
                      "hoist": {
                        "type": "string",
                        "description": "Whether to report shadowing before outer functions or variables are defined.",
                        "enum": [
                          "all",
                          "functions",
                          "functions-and-types",
                          "never",
                          "types"
                        ]
                      },
                      "ignoreFunctionTypeParameterNameValueShadow": {
                        "type": "boolean",
                        "description": "Whether to ignore function parameters named the same as a variable."
                      },
                      "ignoreOnInitialization": {
                        "type": "boolean",
                        "description": "Whether to ignore the variable initializers when the shadowed variable is presumably still unitialized."
                      },
                      "ignoreTypeValueShadow": {
                        "type": "boolean",
                        "description": "Whether to ignore types named the same as a variable."
                      }
                    }
                  }
                ]
              }
            },
            "no-this-alias": {
              "defaultOptions": [
                { "allowDestructuring": true, "allowedNames": [] }
              ],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "Disallow aliasing `this`",
                  "recommended": "recommended",
                  "url": "https://typescript-eslint.io/rules/no-this-alias"
                },
                "messages": {
                  "thisAssignment": "Unexpected aliasing of 'this' to local variable.",
                  "thisDestructure": "Unexpected aliasing of members of 'this' to local variables."
                },
                "schema": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "allowDestructuring": {
                        "type": "boolean",
                        "description": "Whether to ignore destructurings, such as `const { props, state } = this`."
                      },
                      "allowedNames": {
                        "type": "array",
                        "description": "Names to ignore, such as [\"self\"] for `const self = this;`.",
                        "items": { "type": "string" }
                      }
                    }
                  }
                ]
              }
            },
            "no-type-alias": {
              "defaultOptions": [
                {
                  "allowAliases": "never",
                  "allowCallbacks": "never",
                  "allowConditionalTypes": "never",
                  "allowConstructors": "never",
                  "allowGenerics": "never",
                  "allowLiterals": "never",
                  "allowMappedTypes": "never",
                  "allowTupleTypes": "never"
                }
              ],
              "meta": {
                "type": "suggestion",
                "deprecated": {
                  "deprecatedSince": "6.0.0",
                  "replacedBy": [
                    {
                      "rule": {
                        "name": "@typescript-eslint/consistent-type-definitions",
                        "url": "https://typescript-eslint.io/rules/consistent-type-definitions"
                      }
                    }
                  ],
                  "url": "https://github.com/typescript-eslint/typescript-eslint/pull/6229"
                },
                "docs": {
                  "description": "Disallow type aliases",
                  "url": "https://typescript-eslint.io/rules/no-type-alias"
                },
                "messages": {
                  "noCompositionAlias": "{{typeName}} in {{compositionType}} types are not allowed.",
                  "noTypeAlias": "Type {{alias}} are not allowed."
                },
                "schema": [
                  {
                    "type": "object",
                    "$defs": {
                      "expandedOptions": {
                        "type": "string",
                        "enum": [
                          "always",
                          "never",
                          "in-unions",
                          "in-intersections",
                          "in-unions-and-intersections"
                        ]
                      },
                      "simpleOptions": {
                        "type": "string",
                        "enum": ["always", "never"]
                      }
                    },
                    "additionalProperties": false,
                    "properties": {
                      "allowAliases": {
                        "$ref": "#/items/0/$defs/expandedOptions",
                        "description": "Whether to allow direct one-to-one type aliases."
                      },
                      "allowCallbacks": {
                        "$ref": "#/items/0/$defs/simpleOptions",
                        "description": "Whether to allow type aliases for callbacks."
                      },
                      "allowConditionalTypes": {
                        "$ref": "#/items/0/$defs/simpleOptions",
                        "description": "Whether to allow type aliases for conditional types."
                      },
                      "allowConstructors": {
                        "$ref": "#/items/0/$defs/simpleOptions",
                        "description": "Whether to allow type aliases with constructors."
                      },
                      "allowGenerics": {
                        "$ref": "#/items/0/$defs/simpleOptions",
                        "description": "Whether to allow type aliases with generic types."
                      },
                      "allowLiterals": {
                        "$ref": "#/items/0/$defs/expandedOptions",
                        "description": "Whether to allow type aliases with object literal types."
                      },
                      "allowMappedTypes": {
                        "$ref": "#/items/0/$defs/expandedOptions",
                        "description": "Whether to allow type aliases with mapped types."
                      },
                      "allowTupleTypes": {
                        "$ref": "#/items/0/$defs/expandedOptions",
                        "description": "Whether to allow type aliases with tuple types."
                      }
                    }
                  }
                ]
              }
            },
            "no-unnecessary-boolean-literal-compare": {
              "defaultOptions": [
                {
                  "allowComparingNullableBooleansToFalse": true,
                  "allowComparingNullableBooleansToTrue": true,
                  "allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": false
                }
              ],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "Disallow unnecessary equality comparisons against boolean literals",
                  "recommended": "strict",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/no-unnecessary-boolean-literal-compare"
                },
                "fixable": "code",
                "messages": {
                  "comparingNullableToFalse": "This expression unnecessarily compares a nullable boolean value to false instead of using the ?? operator to provide a default.",
                  "comparingNullableToTrueDirect": "This expression unnecessarily compares a nullable boolean value to true instead of using it directly.",
                  "comparingNullableToTrueNegated": "This expression unnecessarily compares a nullable boolean value to true instead of negating it.",
                  "direct": "This expression unnecessarily compares a boolean value to a boolean instead of using it directly.",
                  "negated": "This expression unnecessarily compares a boolean value to a boolean instead of negating it.",
                  "noStrictNullCheck": "This rule requires the `strictNullChecks` compiler option to be turned on to function correctly."
                },
                "schema": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "allowComparingNullableBooleansToFalse": {
                        "type": "boolean",
                        "description": "Whether to allow comparisons between nullable boolean variables and `false`."
                      },
                      "allowComparingNullableBooleansToTrue": {
                        "type": "boolean",
                        "description": "Whether to allow comparisons between nullable boolean variables and `true`."
                      },
                      "allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": {
                        "type": "boolean",
                        "description": "Unless this is set to `true`, the rule will error on every file whose `tsconfig.json` does _not_ have the `strictNullChecks` compiler option (or `strict`) set to `true`."
                      }
                    }
                  }
                ]
              }
            },
            "no-unnecessary-condition": {
              "defaultOptions": [
                {
                  "allowConstantLoopConditions": "never",
                  "allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": false,
                  "checkTypePredicates": false
                }
              ],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "Disallow conditionals where the type is always truthy or always falsy",
                  "recommended": "strict",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/no-unnecessary-condition"
                },
                "hasSuggestions": true,
                "messages": {
                  "alwaysFalsy": "Unnecessary conditional, value is always falsy.",
                  "alwaysFalsyFunc": "This callback should return a conditional, but return is always falsy.",
                  "alwaysNullish": "Unnecessary conditional, left-hand side of `??` operator is always `null` or `undefined`.",
                  "alwaysTruthy": "Unnecessary conditional, value is always truthy.",
                  "alwaysTruthyFunc": "This callback should return a conditional, but return is always truthy.",
                  "comparisonBetweenLiteralTypes": "Unnecessary conditional, comparison is always {{trueOrFalse}}, since `{{left}} {{operator}} {{right}}` is {{trueOrFalse}}.",
                  "never": "Unnecessary conditional, value is `never`.",
                  "neverNullish": "Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.",
                  "neverOptionalChain": "Unnecessary optional chain on a non-nullish value.",
                  "noOverlapBooleanExpression": "Unnecessary conditional, the types have no overlap.",
                  "noStrictNullCheck": "This rule requires the `strictNullChecks` compiler option to be turned on to function correctly.",
                  "suggestRemoveOptionalChain": "Remove unnecessary optional chain",
                  "typeGuardAlreadyIsType": "Unnecessary conditional, expression already has the type being checked by the {{typeGuardOrAssertionFunction}}."
                },
                "schema": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "allowConstantLoopConditions": {
                        "description": "Whether to ignore constant loop conditions, such as `while (true)`.",
                        "oneOf": [
                          { "type": "boolean" },
                          {
                            "type": "string",
                            "enum": ["always", "never", "only-allowed-literals"]
                          }
                        ]
                      },
                      "allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": {
                        "type": "boolean",
                        "description": "Whether to not error when running with a tsconfig that has strictNullChecks turned."
                      },
                      "checkTypePredicates": {
                        "type": "boolean",
                        "description": "Whether to check the asserted argument of a type predicate function for unnecessary conditions"
                      }
                    }
                  }
                ]
              }
            },
            "no-unnecessary-parameter-property-assignment": {
              "defaultOptions": [],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "Disallow unnecessary assignment of constructor property parameter",
                  "url": "https://typescript-eslint.io/rules/no-unnecessary-parameter-property-assignment"
                },
                "messages": {
                  "unnecessaryAssign": "This assignment is unnecessary since it is already assigned by a parameter property."
                },
                "schema": []
              }
            },
            "no-unnecessary-qualifier": {
              "defaultOptions": [],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "Disallow unnecessary namespace qualifiers",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/no-unnecessary-qualifier"
                },
                "fixable": "code",
                "messages": {
                  "unnecessaryQualifier": "Qualifier is unnecessary since '{{ name }}' is in scope."
                },
                "schema": []
              }
            },
            "no-unnecessary-template-expression": {
              "defaultOptions": [],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "Disallow unnecessary template expressions",
                  "recommended": "strict",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/no-unnecessary-template-expression"
                },
                "fixable": "code",
                "messages": {
                  "noUnnecessaryTemplateExpression": "Template literal expression is unnecessary and can be simplified."
                },
                "schema": []
              }
            },
            "no-unnecessary-type-arguments": {
              "defaultOptions": [],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "Disallow type arguments that are equal to the default",
                  "recommended": "strict",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/no-unnecessary-type-arguments"
                },
                "fixable": "code",
                "messages": {
                  "unnecessaryTypeParameter": "This is the default value for this type parameter, so it can be omitted."
                },
                "schema": []
              }
            },
            "no-unnecessary-type-assertion": {
              "defaultOptions": [{}],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "Disallow type assertions that do not change the type of an expression",
                  "recommended": "recommended",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/no-unnecessary-type-assertion"
                },
                "fixable": "code",
                "messages": {
                  "contextuallyUnnecessary": "This assertion is unnecessary since the receiver accepts the original type of the expression.",
                  "unnecessaryAssertion": "This assertion is unnecessary since it does not change the type of the expression."
                },
                "schema": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "checkLiteralConstAssertions": {
                        "type": "boolean",
                        "description": "Whether to check literal const assertions."
                      },
                      "typesToIgnore": {
                        "type": "array",
                        "description": "A list of type names to ignore.",
                        "items": { "type": "string" }
                      }
                    }
                  }
                ]
              }
            },
            "no-unnecessary-type-constraint": {
              "defaultOptions": [],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "Disallow unnecessary constraints on generic types",
                  "recommended": "recommended",
                  "url": "https://typescript-eslint.io/rules/no-unnecessary-type-constraint"
                },
                "hasSuggestions": true,
                "messages": {
                  "removeUnnecessaryConstraint": "Remove the unnecessary `{{constraint}}` constraint.",
                  "unnecessaryConstraint": "Constraining the generic type `{{name}}` to `{{constraint}}` does nothing and is unnecessary."
                },
                "schema": []
              }
            },
            "no-unnecessary-type-conversion": {
              "defaultOptions": [],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "Disallow conversion idioms when they do not change the type or value of the expression",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/no-unnecessary-type-conversion"
                },
                "hasSuggestions": true,
                "messages": {
                  "suggestRemove": "Remove the type conversion.",
                  "suggestSatisfies": "Instead, assert that the value satisfies the {{type}} type.",
                  "unnecessaryTypeConversion": "{{violation}} does not change the type or value of the {{type}}."
                },
                "schema": []
              }
            },
            "no-unnecessary-type-parameters": {
              "defaultOptions": [],
              "meta": {
                "type": "problem",
                "docs": {
                  "description": "Disallow type parameters that aren't used multiple times",
                  "recommended": "strict",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/no-unnecessary-type-parameters"
                },
                "hasSuggestions": true,
                "messages": {
                  "replaceUsagesWithConstraint": "Replace all usages of type parameter with its constraint.",
                  "sole": "Type parameter {{name}} is {{uses}} in the {{descriptor}} signature."
                },
                "schema": []
              }
            },
            "no-unsafe-argument": {
              "defaultOptions": [],
              "meta": {
                "type": "problem",
                "docs": {
                  "description": "Disallow calling a function with a value with type `any`",
                  "recommended": "recommended",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/no-unsafe-argument"
                },
                "messages": {
                  "unsafeArgument": "Unsafe argument of type {{sender}} assigned to a parameter of type {{receiver}}.",
                  "unsafeArraySpread": "Unsafe spread of an {{sender}} array type.",
                  "unsafeSpread": "Unsafe spread of an {{sender}} type.",
                  "unsafeTupleSpread": "Unsafe spread of a tuple type. The argument is {{sender}} and is assigned to a parameter of type {{receiver}}."
                },
                "schema": []
              }
            },
            "no-unsafe-assignment": {
              "defaultOptions": [],
              "meta": {
                "type": "problem",
                "docs": {
                  "description": "Disallow assigning a value with type `any` to variables and properties",
                  "recommended": "recommended",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/no-unsafe-assignment"
                },
                "messages": {
                  "anyAssignment": "Unsafe assignment of an {{sender}} value.",
                  "anyAssignmentThis": "Unsafe assignment of an {{sender}} value. `this` is typed as `any`.\nYou can try to fix this by turning on the `noImplicitThis` compiler option, or adding a `this` parameter to the function.",
                  "unsafeArrayPattern": "Unsafe array destructuring of an {{sender}} array value.",
                  "unsafeArrayPatternFromTuple": "Unsafe array destructuring of a tuple element with an {{sender}} value.",
                  "unsafeArraySpread": "Unsafe spread of an {{sender}} value in an array.",
                  "unsafeAssignment": "Unsafe assignment of type {{sender}} to a variable of type {{receiver}}."
                },
                "schema": []
              }
            },
            "no-unsafe-call": {
              "defaultOptions": [],
              "meta": {
                "type": "problem",
                "docs": {
                  "description": "Disallow calling a value with type `any`",
                  "recommended": "recommended",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/no-unsafe-call"
                },
                "messages": {
                  "unsafeCall": "Unsafe call of a(n) {{type}} typed value.",
                  "unsafeCallThis": "Unsafe call of a(n) {{type}} typed value. `this` is typed as {{type}}.\nYou can try to fix this by turning on the `noImplicitThis` compiler option, or adding a `this` parameter to the function.",
                  "unsafeNew": "Unsafe construction of a(n) {{type}} typed value.",
                  "unsafeTemplateTag": "Unsafe use of a(n) {{type}} typed template tag."
                },
                "schema": []
              }
            },
            "no-unsafe-declaration-merging": {
              "defaultOptions": [],
              "meta": {
                "type": "problem",
                "docs": {
                  "description": "Disallow unsafe declaration merging",
                  "recommended": "recommended",
                  "requiresTypeChecking": false,
                  "url": "https://typescript-eslint.io/rules/no-unsafe-declaration-merging"
                },
                "messages": {
                  "unsafeMerging": "Unsafe declaration merging between classes and interfaces."
                },
                "schema": []
              }
            },
            "no-unsafe-enum-comparison": {
              "defaultOptions": [],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "Disallow comparing an enum value with a non-enum value",
                  "recommended": "recommended",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/no-unsafe-enum-comparison"
                },
                "hasSuggestions": true,
                "messages": {
                  "mismatchedCase": "The case statement does not have a shared enum type with the switch predicate.",
                  "mismatchedCondition": "The two values in this comparison do not have a shared enum type.",
                  "replaceValueWithEnum": "Replace with an enum value comparison."
                },
                "schema": []
              }
            },
            "no-unsafe-function-type": {
              "defaultOptions": [],
              "meta": {
                "type": "problem",
                "docs": {
                  "description": "Disallow using the unsafe built-in Function type",
                  "recommended": "recommended",
                  "url": "https://typescript-eslint.io/rules/no-unsafe-function-type"
                },
                "messages": {
                  "bannedFunctionType": "The `Function` type accepts any function-like value.\nPrefer explicitly defining any function parameters and return type."
                },
                "schema": []
              }
            },
            "no-unsafe-member-access": {
              "defaultOptions": [],
              "meta": {
                "type": "problem",
                "docs": {
                  "description": "Disallow member access on a value with type `any`",
                  "recommended": "recommended",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/no-unsafe-member-access"
                },
                "messages": {
                  "unsafeComputedMemberAccess": "Computed name {{property}} resolves to an {{type}} value.",
                  "unsafeMemberExpression": "Unsafe member access {{property}} on an {{type}} value.",
                  "unsafeThisMemberExpression": "Unsafe member access {{property}} on an `any` value. `this` is typed as `any`.\nYou can try to fix this by turning on the `noImplicitThis` compiler option, or adding a `this` parameter to the function."
                },
                "schema": []
              }
            },
            "no-unsafe-return": {
              "defaultOptions": [],
              "meta": {
                "type": "problem",
                "docs": {
                  "description": "Disallow returning a value with type `any` from a function",
                  "recommended": "recommended",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/no-unsafe-return"
                },
                "messages": {
                  "unsafeReturn": "Unsafe return of a value of type {{type}}.",
                  "unsafeReturnAssignment": "Unsafe return of type `{{sender}}` from function with return type `{{receiver}}`.",
                  "unsafeReturnThis": "Unsafe return of a value of type `{{type}}`. `this` is typed as `any`.\nYou can try to fix this by turning on the `noImplicitThis` compiler option, or adding a `this` parameter to the function."
                },
                "schema": []
              }
            },
            "no-unsafe-type-assertion": {
              "defaultOptions": [],
              "meta": {
                "type": "problem",
                "docs": {
                  "description": "Disallow type assertions that narrow a type",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/no-unsafe-type-assertion"
                },
                "messages": {
                  "unsafeOfAnyTypeAssertion": "Unsafe assertion from {{type}} detected: consider using type guards or a safer assertion.",
                  "unsafeToAnyTypeAssertion": "Unsafe assertion to {{type}} detected: consider using a more specific type to ensure safety.",
                  "unsafeToUnconstrainedTypeAssertion": "Unsafe type assertion: '{{type}}' could be instantiated with an arbitrary type which could be unrelated to the original type.",
                  "unsafeTypeAssertion": "Unsafe type assertion: type '{{type}}' is more narrow than the original type.",
                  "unsafeTypeAssertionAssignableToConstraint": "Unsafe type assertion: the original type is assignable to the constraint of type '{{type}}', but '{{type}}' could be instantiated with a different subtype of its constraint."
                },
                "schema": []
              }
            },
            "no-unsafe-unary-minus": {
              "defaultOptions": [],
              "meta": {
                "type": "problem",
                "docs": {
                  "description": "Require unary negation to take a number",
                  "recommended": "recommended",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/no-unsafe-unary-minus"
                },
                "messages": {
                  "unaryMinus": "Argument of unary negation should be assignable to number | bigint but is {{type}} instead."
                },
                "schema": []
              }
            },
            "no-unused-expressions": {
              "defaultOptions": [
                {
                  "allowShortCircuit": false,
                  "allowTaggedTemplates": false,
                  "allowTernary": false
                }
              ],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "Disallow unused expressions",
                  "extendsBaseRule": true,
                  "recommended": "recommended",
                  "url": "https://typescript-eslint.io/rules/no-unused-expressions"
                },
                "messages": {
                  "unusedExpression": "Expected an assignment or function call and instead saw an expression."
                },
                "schema": [
                  {
                    "type": "object",
                    "properties": {
                      "allowShortCircuit": { "type": "boolean" },
                      "allowTernary": { "type": "boolean" },
                      "allowTaggedTemplates": { "type": "boolean" },
                      "enforceForJSX": { "type": "boolean" },
                      "ignoreDirectives": { "type": "boolean" }
                    },
                    "additionalProperties": false
                  }
                ]
              }
            },
            "no-unused-vars": {
              "defaultOptions": [{}],
              "meta": {
                "type": "problem",
                "docs": {
                  "description": "Disallow unused variables",
                  "extendsBaseRule": true,
                  "recommended": "recommended",
                  "url": "https://typescript-eslint.io/rules/no-unused-vars"
                },
                "messages": {
                  "unusedVar": "'{{varName}}' is {{action}} but never used{{additional}}.",
                  "usedIgnoredVar": "'{{varName}}' is marked as ignored but is used{{additional}}.",
                  "usedOnlyAsType": "'{{varName}}' is {{action}} but only used as a type{{additional}}."
                },
                "schema": [
                  {
                    "oneOf": [
                      { "type": "string", "enum": ["all", "local"] },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "args": {
                            "type": "string",
                            "description": "Whether to check all, some, or no arguments.",
                            "enum": ["all", "after-used", "none"]
                          },
                          "argsIgnorePattern": {
                            "type": "string",
                            "description": "Regular expressions of argument names to not check for usage."
                          },
                          "caughtErrors": {
                            "type": "string",
                            "description": "Whether to check catch block arguments.",
                            "enum": ["all", "none"]
                          },
                          "caughtErrorsIgnorePattern": {
                            "type": "string",
                            "description": "Regular expressions of catch block argument names to not check for usage."
                          },
                          "destructuredArrayIgnorePattern": {
                            "type": "string",
                            "description": "Regular expressions of destructured array variable names to not check for usage."
                          },
                          "ignoreClassWithStaticInitBlock": {
                            "type": "boolean",
                            "description": "Whether to ignore classes with at least one static initialization block."
                          },
                          "ignoreRestSiblings": {
                            "type": "boolean",
                            "description": "Whether to ignore sibling properties in `...` destructurings."
                          },
                          "reportUsedIgnorePattern": {
                            "type": "boolean",
                            "description": "Whether to report variables that match any of the valid ignore pattern options if they have been used."
                          },
                          "vars": {
                            "type": "string",
                            "description": "Whether to check all variables or only locally-declared variables.",
                            "enum": ["all", "local"]
                          },
                          "varsIgnorePattern": {
                            "type": "string",
                            "description": "Regular expressions of variable names to not check for usage."
                          }
                        }
                      }
                    ]
                  }
                ]
              }
            },
            "no-use-before-define": {
              "defaultOptions": [
                {
                  "allowNamedExports": false,
                  "classes": true,
                  "enums": true,
                  "functions": true,
                  "ignoreTypeReferences": true,
                  "typedefs": true,
                  "variables": true
                }
              ],
              "meta": {
                "type": "problem",
                "docs": {
                  "description": "Disallow the use of variables before they are defined",
                  "extendsBaseRule": true,
                  "url": "https://typescript-eslint.io/rules/no-use-before-define"
                },
                "messages": {
                  "noUseBeforeDefine": "'{{name}}' was used before it was defined."
                },
                "schema": [
                  {
                    "oneOf": [
                      { "type": "string", "enum": ["nofunc"] },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "allowNamedExports": {
                            "type": "boolean",
                            "description": "Whether to ignore named exports."
                          },
                          "classes": {
                            "type": "boolean",
                            "description": "Whether to ignore references to class declarations."
                          },
                          "enums": {
                            "type": "boolean",
                            "description": "Whether to check references to enums."
                          },
                          "functions": {
                            "type": "boolean",
                            "description": "Whether to ignore references to function declarations."
                          },
                          "ignoreTypeReferences": {
                            "type": "boolean",
                            "description": "Whether to ignore type references, such as in type annotations and assertions."
                          },
                          "typedefs": {
                            "type": "boolean",
                            "description": "Whether to check references to types."
                          },
                          "variables": {
                            "type": "boolean",
                            "description": "Whether to ignore references to variables."
                          }
                        }
                      }
                    ]
                  }
                ]
              }
            },
            "no-useless-constructor": {
              "defaultOptions": [],
              "meta": {
                "type": "problem",
                "docs": {
                  "description": "Disallow unnecessary constructors",
                  "extendsBaseRule": true,
                  "recommended": "strict",
                  "url": "https://typescript-eslint.io/rules/no-useless-constructor"
                },
                "hasSuggestions": true,
                "messages": {
                  "noUselessConstructor": "Useless constructor.",
                  "removeConstructor": "Remove the constructor."
                },
                "schema": []
              }
            },
            "no-useless-empty-export": {
              "defaultOptions": [],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "Disallow empty exports that don't change anything in a module file",
                  "url": "https://typescript-eslint.io/rules/no-useless-empty-export"
                },
                "fixable": "code",
                "hasSuggestions": false,
                "messages": {
                  "uselessExport": "Empty export does nothing and can be removed."
                },
                "schema": []
              }
            },
            "no-var-requires": {
              "defaultOptions": [{ "allow": [] }],
              "meta": {
                "type": "problem",
                "deprecated": {
                  "deprecatedSince": "8.0.0",
                  "replacedBy": [
                    {
                      "rule": {
                        "name": "@typescript-eslint/no-require-imports",
                        "url": "https://typescript-eslint.io/rules/no-require-imports"
                      }
                    }
                  ],
                  "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8334"
                },
                "docs": {
                  "description": "Disallow `require` statements except in import statements",
                  "url": "https://typescript-eslint.io/rules/no-var-requires"
                },
                "messages": {
                  "noVarReqs": "Require statement not part of import statement."
                },
                "replacedBy": ["@typescript-eslint/no-require-imports"],
                "schema": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "allow": {
                        "type": "array",
                        "description": "Patterns of import paths to allow requiring from.",
                        "items": { "type": "string" }
                      }
                    }
                  }
                ]
              }
            },
            "no-wrapper-object-types": {
              "defaultOptions": [],
              "meta": {
                "type": "problem",
                "docs": {
                  "description": "Disallow using confusing built-in primitive class wrappers",
                  "recommended": "recommended",
                  "url": "https://typescript-eslint.io/rules/no-wrapper-object-types"
                },
                "fixable": "code",
                "messages": {
                  "bannedClassType": "Prefer using the primitive `{{preferred}}` as a type name, rather than the upper-cased `{{typeName}}`."
                },
                "schema": []
              }
            },
            "non-nullable-type-assertion-style": {
              "defaultOptions": [],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "Enforce non-null assertions over explicit type assertions",
                  "recommended": "stylistic",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/non-nullable-type-assertion-style"
                },
                "fixable": "code",
                "messages": {
                  "preferNonNullAssertion": "Use a ! assertion to more succinctly remove null and undefined from the type."
                },
                "schema": []
              }
            },
            "only-throw-error": {
              "defaultOptions": [
                {
                  "allow": [],
                  "allowRethrowing": true,
                  "allowThrowingAny": true,
                  "allowThrowingUnknown": true
                }
              ],
              "meta": {
                "type": "problem",
                "docs": {
                  "description": "Disallow throwing non-`Error` values as exceptions",
                  "extendsBaseRule": "no-throw-literal",
                  "recommended": "recommended",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/only-throw-error"
                },
                "messages": {
                  "object": "Expected an error object to be thrown.",
                  "undef": "Do not throw undefined."
                },
                "schema": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "allow": {
                        "type": "array",
                        "description": "Type specifiers that can be thrown."
                      },
                      "allowRethrowing": {
                        "type": "boolean",
                        "description": "Whether to allow rethrowing caught values that are not `Error` objects."
                      },
                      "allowThrowingAny": {
                        "type": "boolean",
                        "description": "Whether to always allow throwing values typed as `any`."
                      },
                      "allowThrowingUnknown": {
                        "type": "boolean",
                        "description": "Whether to always allow throwing values typed as `unknown`."
                      }
                    }
                  }
                ]
              }
            },
            "parameter-properties": {
              "defaultOptions": [{ "allow": [], "prefer": "class-property" }],
              "meta": {
                "type": "problem",
                "docs": {
                  "description": "Require or disallow parameter properties in class constructors",
                  "url": "https://typescript-eslint.io/rules/parameter-properties"
                },
                "messages": {
                  "preferClassProperty": "Property {{parameter}} should be declared as a class property.",
                  "preferParameterProperty": "Property {{parameter}} should be declared as a parameter property."
                },
                "schema": [
                  {
                    "type": "object",
                    "$defs": {
                      "modifier": {
                        "type": "string",
                        "enum": [
                          "readonly",
                          "private",
                          "protected",
                          "public",
                          "private readonly",
                          "protected readonly",
                          "public readonly"
                        ]
                      }
                    },
                    "additionalProperties": false,
                    "properties": {
                      "allow": {
                        "type": "array",
                        "description": "Whether to allow certain kinds of properties to be ignored.",
                        "items": { "$ref": "#/items/0/$defs/modifier" }
                      },
                      "prefer": {
                        "type": "string",
                        "description": "Whether to prefer class properties or parameter properties.",
                        "enum": ["class-property", "parameter-property"]
                      }
                    }
                  }
                ]
              }
            },
            "prefer-as-const": {
              "defaultOptions": [],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "Enforce the use of `as const` over literal type",
                  "recommended": "recommended",
                  "url": "https://typescript-eslint.io/rules/prefer-as-const"
                },
                "fixable": "code",
                "hasSuggestions": true,
                "messages": {
                  "preferConstAssertion": "Expected a `const` instead of a literal type assertion.",
                  "variableConstAssertion": "Expected a `const` assertion instead of a literal type annotation.",
                  "variableSuggest": "You should use `as const` instead of type annotation."
                },
                "schema": []
              }
            },
            "prefer-destructuring": {
              "defaultOptions": [
                {
                  "AssignmentExpression": { "array": true, "object": true },
                  "VariableDeclarator": { "array": true, "object": true }
                },
                {}
              ],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "Require destructuring from arrays and/or objects",
                  "extendsBaseRule": true,
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/prefer-destructuring"
                },
                "fixable": "code",
                "messages": {
                  "preferDestructuring": "Use {{type}} destructuring."
                },
                "schema": [
                  {
                    "oneOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "AssignmentExpression": {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                              "array": { "type": "boolean" },
                              "object": { "type": "boolean" }
                            }
                          }
                        }
                      },
                      null
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "enforceForDeclarationWithTypeAnnotation": {
                        "type": "boolean",
                        "description": "Whether to enforce destructuring on variable declarations with type annotations."
                      },
                      "enforceForRenamedProperties": {
                        "type": "boolean",
                        "description": "Whether to enforce destructuring that use a different variable name than the property name."
                      }
                    }
                  }
                ]
              }
            },
            "prefer-enum-initializers": {
              "defaultOptions": [],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "Require each enum member value to be explicitly initialized",
                  "url": "https://typescript-eslint.io/rules/prefer-enum-initializers"
                },
                "hasSuggestions": true,
                "messages": {
                  "defineInitializer": "The value of the member '{{ name }}' should be explicitly defined.",
                  "defineInitializerSuggestion": "Can be fixed to {{ name }} = {{ suggested }}"
                },
                "schema": []
              }
            },
            "prefer-find": {
              "defaultOptions": [],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "Enforce the use of Array.prototype.find() over Array.prototype.filter() followed by [0] when looking for a single result",
                  "recommended": "stylistic",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/prefer-find"
                },
                "hasSuggestions": true,
                "messages": {
                  "preferFind": "Prefer .find(...) instead of .filter(...)[0].",
                  "preferFindSuggestion": "Use .find(...) instead of .filter(...)[0]."
                },
                "schema": []
              }
            },
            "prefer-for-of": {
              "defaultOptions": [],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "Enforce the use of `for-of` loop over the standard `for` loop where possible",
                  "recommended": "stylistic",
                  "url": "https://typescript-eslint.io/rules/prefer-for-of"
                },
                "messages": {
                  "preferForOf": "Expected a `for-of` loop instead of a `for` loop with this simple iteration."
                },
                "schema": []
              }
            },
            "prefer-function-type": {
              "defaultOptions": [],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "Enforce using function types instead of interfaces with call signatures",
                  "recommended": "stylistic",
                  "url": "https://typescript-eslint.io/rules/prefer-function-type"
                },
                "fixable": "code",
                "messages": {
                  "functionTypeOverCallableType": "{{ literalOrInterface }} only has a call signature, you should use a function type instead.",
                  "unexpectedThisOnFunctionOnlyInterface": "`this` refers to the function type '{{ interfaceName }}', did you intend to use a generic `this` parameter like `<Self>(this: Self, ...) => Self` instead?"
                },
                "schema": []
              }
            },
            "prefer-includes": {
              "defaultOptions": [],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "Enforce `includes` method over `indexOf` method",
                  "recommended": "stylistic",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/prefer-includes"
                },
                "fixable": "code",
                "messages": {
                  "preferIncludes": "Use 'includes()' method instead.",
                  "preferStringIncludes": "Use `String#includes()` method with a string instead."
                },
                "schema": []
              }
            },
            "prefer-literal-enum-member": {
              "defaultOptions": [{ "allowBitwiseExpressions": false }],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "Require all enum members to be literal values",
                  "recommended": "strict",
                  "requiresTypeChecking": false,
                  "url": "https://typescript-eslint.io/rules/prefer-literal-enum-member"
                },
                "messages": {
                  "notLiteral": "Explicit enum value must only be a literal value (string or number).",
                  "notLiteralOrBitwiseExpression": "Explicit enum value must only be a literal value (string or number) or a bitwise expression."
                },
                "schema": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "allowBitwiseExpressions": {
                        "type": "boolean",
                        "description": "Whether to allow using bitwise expressions in enum initializers."
                      }
                    }
                  }
                ]
              }
            },
            "prefer-namespace-keyword": {
              "defaultOptions": [],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "Require using `namespace` keyword over `module` keyword to declare custom TypeScript modules",
                  "recommended": "recommended",
                  "url": "https://typescript-eslint.io/rules/prefer-namespace-keyword"
                },
                "fixable": "code",
                "messages": {
                  "useNamespace": "Use 'namespace' instead of 'module' to declare custom TypeScript modules."
                },
                "schema": []
              }
            },
            "prefer-nullish-coalescing": {
              "defaultOptions": [
                {
                  "allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": false,
                  "ignoreBooleanCoercion": false,
                  "ignoreConditionalTests": true,
                  "ignoreIfStatements": false,
                  "ignoreMixedLogicalExpressions": false,
                  "ignorePrimitives": {
                    "bigint": false,
                    "boolean": false,
                    "number": false,
                    "string": false
                  },
                  "ignoreTernaryTests": false
                }
              ],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "Enforce using the nullish coalescing operator instead of logical assignments or chaining",
                  "recommended": "stylistic",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/prefer-nullish-coalescing"
                },
                "hasSuggestions": true,
                "messages": {
                  "noStrictNullCheck": "This rule requires the `strictNullChecks` compiler option to be turned on to function correctly.",
                  "preferNullishOverAssignment": "Prefer using nullish coalescing operator (`??{{ equals }}`) instead of an assignment expression, as it is simpler to read.",
                  "preferNullishOverOr": "Prefer using nullish coalescing operator (`??{{ equals }}`) instead of a logical {{ description }} (`||{{ equals }}`), as it is a safer operator.",
                  "preferNullishOverTernary": "Prefer using nullish coalescing operator (`??{{ equals }}`) instead of a ternary expression, as it is simpler to read.",
                  "suggestNullish": "Fix to nullish coalescing operator (`??{{ equals }}`)."
                },
                "schema": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": {
                        "type": "boolean",
                        "description": "Unless this is set to `true`, the rule will error on every file whose `tsconfig.json` does _not_ have the `strictNullChecks` compiler option (or `strict`) set to `true`."
                      },
                      "ignoreBooleanCoercion": {
                        "type": "boolean",
                        "description": "Whether to ignore arguments to the `Boolean` constructor"
                      },
                      "ignoreConditionalTests": {
                        "type": "boolean",
                        "description": "Whether to ignore cases that are located within a conditional test."
                      },
                      "ignoreIfStatements": {
                        "type": "boolean",
                        "description": "Whether to ignore any if statements that could be simplified by using the nullish coalescing operator."
                      },
                      "ignoreMixedLogicalExpressions": {
                        "type": "boolean",
                        "description": "Whether to ignore any logical or expressions that are part of a mixed logical expression (with `&&`)."
                      },
                      "ignorePrimitives": {
                        "description": "Whether to ignore all (`true`) or some (an object with properties) primitive types.",
                        "oneOf": [
                          {
                            "type": "object",
                            "description": "Which primitives types may be ignored.",
                            "properties": {
                              "bigint": {
                                "type": "boolean",
                                "description": "Ignore bigint primitive types."
                              },
                              "boolean": {
                                "type": "boolean",
                                "description": "Ignore boolean primitive types."
                              },
                              "number": {
                                "type": "boolean",
                                "description": "Ignore number primitive types."
                              },
                              "string": {
                                "type": "boolean",
                                "description": "Ignore string primitive types."
                              }
                            }
                          },
                          {
                            "type": "boolean",
                            "description": "Ignore all primitive types.",
                            "enum": [true]
                          }
                        ]
                      },
                      "ignoreTernaryTests": {
                        "type": "boolean",
                        "description": "Whether to ignore any ternary expressions that could be simplified by using the nullish coalescing operator."
                      }
                    }
                  }
                ]
              }
            },
            "prefer-optional-chain": {
              "defaultOptions": [
                {
                  "allowPotentiallyUnsafeFixesThatModifyTheReturnTypeIKnowWhatImDoing": false,
                  "checkAny": true,
                  "checkBigInt": true,
                  "checkBoolean": true,
                  "checkNumber": true,
                  "checkString": true,
                  "checkUnknown": true,
                  "requireNullish": false
                }
              ],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "Enforce using concise optional chain expressions instead of chained logical ands, negated logical ors, or empty objects",
                  "recommended": "stylistic",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/prefer-optional-chain"
                },
                "fixable": "code",
                "hasSuggestions": true,
                "messages": {
                  "optionalChainSuggest": "Change to an optional chain.",
                  "preferOptionalChain": "Prefer using an optional chain expression instead, as it's more concise and easier to read."
                },
                "schema": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "allowPotentiallyUnsafeFixesThatModifyTheReturnTypeIKnowWhatImDoing": {
                        "type": "boolean",
                        "description": "Allow autofixers that will change the return type of the expression. This option is considered unsafe as it may break the build."
                      },
                      "checkAny": {
                        "type": "boolean",
                        "description": "Check operands that are typed as `any` when inspecting \"loose boolean\" operands."
                      },
                      "checkBigInt": {
                        "type": "boolean",
                        "description": "Check operands that are typed as `bigint` when inspecting \"loose boolean\" operands."
                      },
                      "checkBoolean": {
                        "type": "boolean",
                        "description": "Check operands that are typed as `boolean` when inspecting \"loose boolean\" operands."
                      },
                      "checkNumber": {
                        "type": "boolean",
                        "description": "Check operands that are typed as `number` when inspecting \"loose boolean\" operands."
                      },
                      "checkString": {
                        "type": "boolean",
                        "description": "Check operands that are typed as `string` when inspecting \"loose boolean\" operands."
                      },
                      "checkUnknown": {
                        "type": "boolean",
                        "description": "Check operands that are typed as `unknown` when inspecting \"loose boolean\" operands."
                      },
                      "requireNullish": {
                        "type": "boolean",
                        "description": "Skip operands that are not typed with `null` and/or `undefined` when inspecting \"loose boolean\" operands."
                      }
                    }
                  }
                ]
              }
            },
            "prefer-promise-reject-errors": {
              "defaultOptions": [
                {
                  "allowEmptyReject": false,
                  "allowThrowingAny": false,
                  "allowThrowingUnknown": false
                }
              ],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "Require using Error objects as Promise rejection reasons",
                  "extendsBaseRule": true,
                  "recommended": "recommended",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/prefer-promise-reject-errors"
                },
                "messages": {
                  "rejectAnError": "Expected the Promise rejection reason to be an Error."
                },
                "schema": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "allowEmptyReject": {
                        "type": "boolean",
                        "description": "Whether to allow calls to `Promise.reject()` with no arguments."
                      },
                      "allowThrowingAny": {
                        "type": "boolean",
                        "description": "Whether to always allow throwing values typed as `any`."
                      },
                      "allowThrowingUnknown": {
                        "type": "boolean",
                        "description": "Whether to always allow throwing values typed as `unknown`."
                      }
                    }
                  }
                ]
              }
            },
            "prefer-readonly": {
              "defaultOptions": [{ "onlyInlineLambdas": false }],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "Require private members to be marked as `readonly` if they're never modified outside of the constructor",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/prefer-readonly"
                },
                "fixable": "code",
                "messages": {
                  "preferReadonly": "Member '{{name}}' is never reassigned; mark it as `readonly`."
                },
                "schema": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "onlyInlineLambdas": {
                        "type": "boolean",
                        "description": "Whether to restrict checking only to members immediately assigned a lambda value."
                      }
                    }
                  }
                ]
              }
            },
            "prefer-readonly-parameter-types": {
              "defaultOptions": [
                {
                  "checkParameterProperties": true,
                  "ignoreInferredTypes": false,
                  "treatMethodsAsReadonly": false
                }
              ],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "Require function parameters to be typed as `readonly` to prevent accidental mutation of inputs",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/prefer-readonly-parameter-types"
                },
                "messages": {
                  "shouldBeReadonly": "Parameter should be a read only type."
                },
                "schema": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "allow": {
                        "type": "array",
                        "description": "An array of type specifiers to ignore."
                      },
                      "checkParameterProperties": {
                        "type": "boolean",
                        "description": "Whether to check class parameter properties."
                      },
                      "ignoreInferredTypes": {
                        "type": "boolean",
                        "description": "Whether to ignore parameters which don't explicitly specify a type."
                      },
                      "treatMethodsAsReadonly": {
                        "type": "boolean",
                        "description": "Whether to treat all mutable methods as though they are readonly."
                      }
                    }
                  }
                ]
              }
            },
            "prefer-reduce-type-parameter": {
              "defaultOptions": [],
              "meta": {
                "type": "problem",
                "docs": {
                  "description": "Enforce using type parameter when calling `Array#reduce` instead of using a type assertion",
                  "recommended": "strict",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/prefer-reduce-type-parameter"
                },
                "fixable": "code",
                "messages": {
                  "preferTypeParameter": "Unnecessary assertion: Array#reduce accepts a type parameter for the default value."
                },
                "schema": []
              }
            },
            "prefer-regexp-exec": {
              "defaultOptions": [],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "Enforce `RegExp#exec` over `String#match` if no global flag is provided",
                  "recommended": "stylistic",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/prefer-regexp-exec"
                },
                "fixable": "code",
                "messages": {
                  "regExpExecOverStringMatch": "Use the `RegExp#exec()` method instead."
                },
                "schema": []
              }
            },
            "prefer-return-this-type": {
              "defaultOptions": [],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "Enforce that `this` is used when only `this` type is returned",
                  "recommended": "strict",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/prefer-return-this-type"
                },
                "fixable": "code",
                "messages": { "useThisType": "Use `this` type instead." },
                "schema": []
              }
            },
            "prefer-string-starts-ends-with": {
              "defaultOptions": [{ "allowSingleElementEquality": "never" }],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "Enforce using `String#startsWith` and `String#endsWith` over other equivalent methods of checking substrings",
                  "recommended": "stylistic",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/prefer-string-starts-ends-with"
                },
                "fixable": "code",
                "messages": {
                  "preferEndsWith": "Use the 'String#endsWith' method instead.",
                  "preferStartsWith": "Use 'String#startsWith' method instead."
                },
                "schema": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "allowSingleElementEquality": {
                        "type": "string",
                        "description": "Whether to allow equality checks against the first or last element of a string.",
                        "enum": ["always", "never"]
                      }
                    }
                  }
                ]
              }
            },
            "prefer-ts-expect-error": {
              "defaultOptions": [],
              "meta": {
                "type": "problem",
                "deprecated": {
                  "deprecatedSince": "7.11.0",
                  "replacedBy": [
                    {
                      "rule": {
                        "name": "@typescript-eslint/ban-ts-comment",
                        "url": "https://typescript-eslint.io/rules/ban-ts-comment"
                      }
                    }
                  ],
                  "url": "https://github.com/typescript-eslint/typescript-eslint/pull/9081"
                },
                "docs": {
                  "description": "Enforce using `@ts-expect-error` over `@ts-ignore`",
                  "url": "https://typescript-eslint.io/rules/prefer-ts-expect-error"
                },
                "fixable": "code",
                "messages": {
                  "preferExpectErrorComment": "Use \"@ts-expect-error\" to ensure an error is actually being suppressed."
                },
                "replacedBy": ["@typescript-eslint/ban-ts-comment"],
                "schema": []
              }
            },
            "promise-function-async": {
              "defaultOptions": [
                {
                  "allowAny": true,
                  "allowedPromiseNames": [],
                  "checkArrowFunctions": true,
                  "checkFunctionDeclarations": true,
                  "checkFunctionExpressions": true,
                  "checkMethodDeclarations": true
                }
              ],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "Require any function or method that returns a Promise to be marked async",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/promise-function-async"
                },
                "fixable": "code",
                "messages": {
                  "missingAsync": "Functions that return promises must be async.",
                  "missingAsyncHybridReturn": "Functions that return promises must be async. Consider adding an explicit return type annotation if the function is intended to return a union of promise and non-promise types."
                },
                "schema": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "allowAny": {
                        "type": "boolean",
                        "description": "Whether to consider `any` and `unknown` to be Promises."
                      },
                      "allowedPromiseNames": {
                        "type": "array",
                        "description": "Any extra names of classes or interfaces to be considered Promises.",
                        "items": { "type": "string" }
                      },
                      "checkArrowFunctions": {
                        "type": "boolean",
                        "description": "Whether to check arrow functions."
                      },
                      "checkFunctionDeclarations": {
                        "type": "boolean",
                        "description": "Whether to check standalone function declarations."
                      },
                      "checkFunctionExpressions": {
                        "type": "boolean",
                        "description": "Whether to check inline function expressions"
                      },
                      "checkMethodDeclarations": {
                        "type": "boolean",
                        "description": "Whether to check methods on classes and object literals."
                      }
                    }
                  }
                ]
              }
            },
            "related-getter-setter-pairs": {
              "defaultOptions": [],
              "meta": {
                "type": "problem",
                "docs": {
                  "description": "Enforce that `get()` types should be assignable to their equivalent `set()` type",
                  "recommended": "strict",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/related-getter-setter-pairs"
                },
                "messages": {
                  "mismatch": "`get()` type should be assignable to its equivalent `set()` type."
                },
                "schema": []
              }
            },
            "require-array-sort-compare": {
              "defaultOptions": [{ "ignoreStringArrays": true }],
              "meta": {
                "type": "problem",
                "docs": {
                  "description": "Require `Array#sort` and `Array#toSorted` calls to always provide a `compareFunction`",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/require-array-sort-compare"
                },
                "messages": { "requireCompare": "Require 'compare' argument." },
                "schema": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "ignoreStringArrays": {
                        "type": "boolean",
                        "description": "Whether to ignore arrays in which all elements are strings."
                      }
                    }
                  }
                ]
              }
            },
            "require-await": {
              "defaultOptions": [],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "Disallow async functions which do not return promises and have no `await` expression",
                  "extendsBaseRule": true,
                  "recommended": "recommended",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/require-await"
                },
                "hasSuggestions": true,
                "messages": {
                  "missingAwait": "{{name}} has no 'await' expression.",
                  "removeAsync": "Remove 'async'."
                },
                "schema": []
              }
            },
            "restrict-plus-operands": {
              "defaultOptions": [
                {
                  "allowAny": true,
                  "allowBoolean": true,
                  "allowNullish": true,
                  "allowNumberAndString": true,
                  "allowRegExp": true,
                  "skipCompoundAssignments": false
                }
              ],
              "meta": {
                "type": "problem",
                "docs": {
                  "description": "Require both operands of addition to be the same type and be `bigint`, `number`, or `string`",
                  "recommended": {
                    "recommended": true,
                    "strict": [
                      {
                        "allowAny": false,
                        "allowBoolean": false,
                        "allowNullish": false,
                        "allowNumberAndString": false,
                        "allowRegExp": false
                      }
                    ]
                  },
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/restrict-plus-operands"
                },
                "messages": {
                  "bigintAndNumber": "Numeric '+' operations must either be both bigints or both numbers. Got `{{left}}` + `{{right}}`.",
                  "invalid": "Invalid operand for a '+' operation. Operands must each be a number or {{stringLike}}. Got `{{type}}`.",
                  "mismatched": "Operands of '+' operations must be a number or {{stringLike}}. Got `{{left}}` + `{{right}}`."
                },
                "schema": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "allowAny": {
                        "type": "boolean",
                        "description": "Whether to allow `any` typed values."
                      },
                      "allowBoolean": {
                        "type": "boolean",
                        "description": "Whether to allow `boolean` typed values."
                      },
                      "allowNullish": {
                        "type": "boolean",
                        "description": "Whether to allow potentially `null` or `undefined` typed values."
                      },
                      "allowNumberAndString": {
                        "type": "boolean",
                        "description": "Whether to allow `bigint`/`number` typed values and `string` typed values to be added together."
                      },
                      "allowRegExp": {
                        "type": "boolean",
                        "description": "Whether to allow `regexp` typed values."
                      },
                      "skipCompoundAssignments": {
                        "type": "boolean",
                        "description": "Whether to skip compound assignments such as `+=`."
                      }
                    }
                  }
                ]
              }
            },
            "restrict-template-expressions": {
              "defaultOptions": [
                {
                  "allow": [
                    {
                      "name": ["Error", "URL", "URLSearchParams"],
                      "from": "lib"
                    }
                  ],
                  "allowAny": true,
                  "allowBoolean": true,
                  "allowNullish": true,
                  "allowNumber": true,
                  "allowRegExp": true
                }
              ],
              "meta": {
                "type": "problem",
                "docs": {
                  "description": "Enforce template literal expressions to be of `string` type",
                  "recommended": {
                    "recommended": true,
                    "strict": [
                      {
                        "allowAny": false,
                        "allowBoolean": false,
                        "allowNever": false,
                        "allowNullish": false,
                        "allowNumber": false,
                        "allowRegExp": false
                      }
                    ]
                  },
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/restrict-template-expressions"
                },
                "messages": {
                  "invalidType": "Invalid type \"{{type}}\" of template literal expression."
                },
                "schema": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "allowAny": {
                        "type": "boolean",
                        "description": "Whether to allow `any` typed values in template expressions."
                      },
                      "allowArray": {
                        "type": "boolean",
                        "description": "Whether to allow `array` typed values in template expressions."
                      },
                      "allowBoolean": {
                        "type": "boolean",
                        "description": "Whether to allow `boolean` typed values in template expressions."
                      },
                      "allowNullish": {
                        "type": "boolean",
                        "description": "Whether to allow `nullish` typed values in template expressions."
                      },
                      "allowNumber": {
                        "type": "boolean",
                        "description": "Whether to allow `number` typed values in template expressions."
                      },
                      "allowRegExp": {
                        "type": "boolean",
                        "description": "Whether to allow `regexp` typed values in template expressions."
                      },
                      "allowNever": {
                        "type": "boolean",
                        "description": "Whether to allow `never` typed values in template expressions."
                      },
                      "allow": {
                        "description": "Types to allow in template expressions.",
                        "type": "array"
                      }
                    }
                  }
                ]
              }
            },
            "return-await": {
              "defaultOptions": ["in-try-catch"],
              "meta": {
                "type": "problem",
                "docs": {
                  "description": "Enforce consistent awaiting of returned promises",
                  "recommended": {
                    "strict": ["error-handling-correctness-only"]
                  },
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/return-await"
                },
                "fixable": "code",
                "hasSuggestions": true,
                "messages": {
                  "disallowedPromiseAwait": "Returning an awaited promise is not allowed in this context.",
                  "disallowedPromiseAwaitSuggestion": "Remove `await` before the expression. Use caution as this may impact control flow.",
                  "nonPromiseAwait": "Returning an awaited value that is not a promise is not allowed.",
                  "requiredPromiseAwait": "Returning an awaited promise is required in this context.",
                  "requiredPromiseAwaitSuggestion": "Add `await` before the expression. Use caution as this may impact control flow."
                },
                "schema": [
                  {
                    "type": "string",
                    "oneOf": [
                      {
                        "type": "string",
                        "description": "Requires that all returned promises be awaited.",
                        "enum": ["always"]
                      },
                      {
                        "type": "string",
                        "description": "In error-handling contexts, the rule enforces that returned promises must be awaited. In ordinary contexts, the rule does not enforce any particular behavior around whether returned promises are awaited.",
                        "enum": ["error-handling-correctness-only"]
                      },
                      {
                        "type": "string",
                        "description": "In error-handling contexts, the rule enforces that returned promises must be awaited. In ordinary contexts, the rule enforces that returned promises _must not_ be awaited.",
                        "enum": ["in-try-catch"]
                      },
                      {
                        "type": "string",
                        "description": "Disallows awaiting any returned promises.",
                        "enum": ["never"]
                      }
                    ]
                  }
                ]
              }
            },
            "sort-type-constituents": {
              "defaultOptions": [
                {
                  "caseSensitive": false,
                  "checkIntersections": true,
                  "checkUnions": true,
                  "groupOrder": [
                    "named",
                    "keyword",
                    "operator",
                    "literal",
                    "function",
                    "import",
                    "conditional",
                    "object",
                    "tuple",
                    "intersection",
                    "union",
                    "nullish"
                  ]
                }
              ],
              "meta": {
                "type": "suggestion",
                "deprecated": {
                  "deprecatedSince": "7.13.0",
                  "replacedBy": [
                    {
                      "plugin": {
                        "name": "eslint-plugin-perfectionist",
                        "url": "https://perfectionist.dev"
                      },
                      "rule": {
                        "name": "perfectionist/sort-intersection-types",
                        "url": "https://perfectionist.dev/rules/sort-intersection-types"
                      }
                    },
                    {
                      "plugin": {
                        "name": "eslint-plugin-perfectionist",
                        "url": "https://perfectionist.dev"
                      },
                      "rule": {
                        "name": "perfectionist/sort-union-types",
                        "url": "https://perfectionist.dev/rules/sort-union-types"
                      }
                    }
                  ],
                  "url": "https://github.com/typescript-eslint/typescript-eslint/pull/9253"
                },
                "docs": {
                  "description": "Enforce constituents of a type union/intersection to be sorted alphabetically",
                  "url": "https://typescript-eslint.io/rules/sort-type-constituents"
                },
                "fixable": "code",
                "hasSuggestions": true,
                "messages": {
                  "notSorted": "{{type}} type constituents must be sorted.",
                  "notSortedNamed": "{{type}} type {{name}} constituents must be sorted.",
                  "suggestFix": "Sort constituents of type (removes all comments)."
                },
                "replacedBy": [
                  "perfectionist/sort-intersection-types",
                  "perfectionist/sort-union-types"
                ],
                "schema": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "caseSensitive": {
                        "type": "boolean",
                        "description": "Whether to sort using case sensitive string comparisons."
                      },
                      "checkIntersections": {
                        "type": "boolean",
                        "description": "Whether to check intersection types (`&`)."
                      },
                      "checkUnions": {
                        "type": "boolean",
                        "description": "Whether to check union types (`|`)."
                      },
                      "groupOrder": {
                        "type": "array",
                        "description": "Ordering of the groups.",
                        "items": {
                          "type": "string",
                          "enum": [
                            "conditional",
                            "function",
                            "import",
                            "intersection",
                            "keyword",
                            "nullish",
                            "literal",
                            "named",
                            "object",
                            "operator",
                            "tuple",
                            "union"
                          ]
                        }
                      }
                    }
                  }
                ]
              }
            },
            "strict-boolean-expressions": {
              "defaultOptions": [
                {
                  "allowAny": false,
                  "allowNullableBoolean": false,
                  "allowNullableEnum": false,
                  "allowNullableNumber": false,
                  "allowNullableObject": true,
                  "allowNullableString": false,
                  "allowNumber": true,
                  "allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": false,
                  "allowString": true
                }
              ],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "Disallow certain types in boolean expressions",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/strict-boolean-expressions"
                },
                "hasSuggestions": true,
                "messages": {
                  "conditionErrorAny": "Unexpected any value in {{context}}. An explicit comparison or type conversion is required.",
                  "conditionErrorNullableBoolean": "Unexpected nullable boolean value in {{context}}. Please handle the nullish case explicitly.",
                  "conditionErrorNullableEnum": "Unexpected nullable enum value in {{context}}. Please handle the nullish/zero/NaN cases explicitly.",
                  "conditionErrorNullableNumber": "Unexpected nullable number value in {{context}}. Please handle the nullish/zero/NaN cases explicitly.",
                  "conditionErrorNullableObject": "Unexpected nullable object value in {{context}}. An explicit null check is required.",
                  "conditionErrorNullableString": "Unexpected nullable string value in {{context}}. Please handle the nullish/empty cases explicitly.",
                  "conditionErrorNullish": "Unexpected nullish value in conditional. The condition is always false.",
                  "conditionErrorNumber": "Unexpected number value in {{context}}. An explicit zero/NaN check is required.",
                  "conditionErrorObject": "Unexpected object value in {{context}}. The condition is always true.",
                  "conditionErrorOther": "Unexpected value in conditional. A boolean expression is required.",
                  "conditionErrorString": "Unexpected string value in {{context}}. An explicit empty string check is required.",
                  "conditionFixCastBoolean": "Explicitly convert value to a boolean (`Boolean(value)`)",
                  "conditionFixCompareArrayLengthNonzero": "Change condition to check array's length (`value.length > 0`)",
                  "conditionFixCompareArrayLengthZero": "Change condition to check array's length (`value.length === 0`)",
                  "conditionFixCompareEmptyString": "Change condition to check for empty string (`value !== \"\"`)",
                  "conditionFixCompareFalse": "Change condition to check if false (`value === false`)",
                  "conditionFixCompareNaN": "Change condition to check for NaN (`!Number.isNaN(value)`)",
                  "conditionFixCompareNullish": "Change condition to check for null/undefined (`value != null`)",
                  "conditionFixCompareStringLength": "Change condition to check string's length (`value.length !== 0`)",
                  "conditionFixCompareTrue": "Change condition to check if true (`value === true`)",
                  "conditionFixCompareZero": "Change condition to check for 0 (`value !== 0`)",
                  "conditionFixDefaultEmptyString": "Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)",
                  "conditionFixDefaultFalse": "Explicitly treat nullish value the same as false (`value ?? false`)",
                  "conditionFixDefaultZero": "Explicitly treat nullish value the same as 0 (`value ?? 0`)",
                  "explicitBooleanReturnType": "Add an explicit `boolean` return type annotation.",
                  "noStrictNullCheck": "This rule requires the `strictNullChecks` compiler option to be turned on to function correctly.",
                  "predicateCannotBeAsync": "Predicate function should not be 'async'; expected a boolean return type."
                },
                "schema": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "allowAny": {
                        "type": "boolean",
                        "description": "Whether to allow `any`s in a boolean context."
                      },
                      "allowNullableBoolean": {
                        "type": "boolean",
                        "description": "Whether to allow nullable `boolean`s in a boolean context."
                      },
                      "allowNullableEnum": {
                        "type": "boolean",
                        "description": "Whether to allow nullable `enum`s in a boolean context."
                      },
                      "allowNullableNumber": {
                        "type": "boolean",
                        "description": "Whether to allow nullable `number`s in a boolean context."
                      },
                      "allowNullableObject": {
                        "type": "boolean",
                        "description": "Whether to allow nullable `object`s, `symbol`s, and functions in a boolean context."
                      },
                      "allowNullableString": {
                        "type": "boolean",
                        "description": "Whether to allow nullable `string`s in a boolean context."
                      },
                      "allowNumber": {
                        "type": "boolean",
                        "description": "Whether to allow `number`s in a boolean context."
                      },
                      "allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": {
                        "type": "boolean",
                        "description": "Unless this is set to `true`, the rule will error on every file whose `tsconfig.json` does _not_ have the `strictNullChecks` compiler option (or `strict`) set to `true`."
                      },
                      "allowString": {
                        "type": "boolean",
                        "description": "Whether to allow `string`s in a boolean context."
                      }
                    }
                  }
                ]
              }
            },
            "switch-exhaustiveness-check": {
              "defaultOptions": [
                {
                  "allowDefaultCaseForExhaustiveSwitch": true,
                  "considerDefaultExhaustiveForUnions": false,
                  "requireDefaultForNonUnion": false
                }
              ],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "Require switch-case statements to be exhaustive",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/switch-exhaustiveness-check"
                },
                "hasSuggestions": true,
                "messages": {
                  "addMissingCases": "Add branches for missing cases.",
                  "dangerousDefaultCase": "The switch statement is exhaustive, so the default case is unnecessary.",
                  "switchIsNotExhaustive": "Switch is not exhaustive. Cases not matched: {{missingBranches}}"
                },
                "schema": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "allowDefaultCaseForExhaustiveSwitch": {
                        "type": "boolean",
                        "description": "If 'true', allow 'default' cases on switch statements with exhaustive cases."
                      },
                      "considerDefaultExhaustiveForUnions": {
                        "type": "boolean",
                        "description": "If 'true', the 'default' clause is used to determine whether the switch statement is exhaustive for union type"
                      },
                      "defaultCaseCommentPattern": {
                        "type": "string",
                        "description": "Regular expression for a comment that can indicate an intentionally omitted default case."
                      },
                      "requireDefaultForNonUnion": {
                        "type": "boolean",
                        "description": "If 'true', require a 'default' clause for switches on non-union types."
                      }
                    }
                  }
                ]
              }
            },
            "triple-slash-reference": {
              "defaultOptions": [
                { "lib": "always", "path": "never", "types": "prefer-import" }
              ],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "Disallow certain triple slash directives in favor of ES6-style import declarations",
                  "recommended": "recommended",
                  "url": "https://typescript-eslint.io/rules/triple-slash-reference"
                },
                "messages": {
                  "tripleSlashReference": "Do not use a triple slash reference for {{module}}, use `import` style instead."
                },
                "schema": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "lib": {
                        "type": "string",
                        "description": "What to enforce for `/// <reference lib=\"...\" />` references.",
                        "enum": ["always", "never"]
                      },
                      "path": {
                        "type": "string",
                        "description": "What to enforce for `/// <reference path=\"...\" />` references.",
                        "enum": ["always", "never"]
                      },
                      "types": {
                        "type": "string",
                        "description": "What to enforce for `/// <reference types=\"...\" />` references.",
                        "enum": ["always", "never", "prefer-import"]
                      }
                    }
                  }
                ]
              }
            },
            "typedef": {
              "defaultOptions": [
                {
                  "arrayDestructuring": false,
                  "arrowParameter": false,
                  "memberVariableDeclaration": false,
                  "objectDestructuring": false,
                  "parameter": false,
                  "propertyDeclaration": false,
                  "variableDeclaration": false,
                  "variableDeclarationIgnoreFunction": false
                }
              ],
              "meta": {
                "type": "suggestion",
                "deprecated": {
                  "deprecatedSince": "8.33.0",
                  "message": "This is an old rule that is no longer recommended for use."
                },
                "docs": {
                  "description": "Require type annotations in certain places",
                  "url": "https://typescript-eslint.io/rules/typedef"
                },
                "messages": {
                  "expectedTypedef": "Expected a type annotation.",
                  "expectedTypedefNamed": "Expected {{name}} to have a type annotation."
                },
                "schema": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "arrayDestructuring": {
                        "type": "boolean",
                        "description": "Whether to enforce type annotations on variables declared using array destructuring."
                      },
                      "arrowParameter": {
                        "type": "boolean",
                        "description": "Whether to enforce type annotations for parameters of arrow functions."
                      },
                      "memberVariableDeclaration": {
                        "type": "boolean",
                        "description": "Whether to enforce type annotations on member variables of classes."
                      },
                      "objectDestructuring": {
                        "type": "boolean",
                        "description": "Whether to enforce type annotations on variables declared using object destructuring."
                      },
                      "parameter": {
                        "type": "boolean",
                        "description": "Whether to enforce type annotations for parameters of functions and methods."
                      },
                      "propertyDeclaration": {
                        "type": "boolean",
                        "description": "Whether to enforce type annotations for properties of interfaces and types."
                      },
                      "variableDeclaration": {
                        "type": "boolean",
                        "description": "Whether to enforce type annotations for variable declarations, excluding array and object destructuring."
                      },
                      "variableDeclarationIgnoreFunction": {
                        "type": "boolean",
                        "description": "Whether to ignore variable declarations for non-arrow and arrow functions."
                      }
                    }
                  }
                ]
              }
            },
            "unbound-method": {
              "defaultOptions": [{ "ignoreStatic": false }],
              "meta": {
                "type": "problem",
                "docs": {
                  "description": "Enforce unbound methods are called with their expected scope",
                  "recommended": "recommended",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/unbound-method"
                },
                "messages": {
                  "unbound": "Avoid referencing unbound methods which may cause unintentional scoping of `this`.",
                  "unboundWithoutThisAnnotation": "Avoid referencing unbound methods which may cause unintentional scoping of `this`.\nIf your function does not access `this`, you can annotate it with `this: void`, or consider using an arrow function instead."
                },
                "schema": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "ignoreStatic": {
                        "type": "boolean",
                        "description": "Whether to skip checking whether `static` methods are correctly bound."
                      }
                    }
                  }
                ]
              }
            },
            "unified-signatures": {
              "defaultOptions": [
                {
                  "ignoreDifferentlyNamedParameters": false,
                  "ignoreOverloadsWithDifferentJSDoc": false
                }
              ],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "Disallow two overloads that could be unified into one with a union or an optional/rest parameter",
                  "recommended": "strict",
                  "url": "https://typescript-eslint.io/rules/unified-signatures"
                },
                "messages": {
                  "omittingRestParameter": "{{failureStringStart}} with a rest parameter.",
                  "omittingSingleParameter": "{{failureStringStart}} with an optional parameter.",
                  "singleParameterDifference": "{{failureStringStart}} taking `{{type1}} | {{type2}}`."
                },
                "schema": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "ignoreDifferentlyNamedParameters": {
                        "type": "boolean",
                        "description": "Whether two parameters with different names at the same index should be considered different even if their types are the same."
                      },
                      "ignoreOverloadsWithDifferentJSDoc": {
                        "type": "boolean",
                        "description": "Whether two overloads with different JSDoc comments should be considered different even if their parameter and return types are the same."
                      }
                    }
                  }
                ]
              }
            },
            "use-unknown-in-catch-callback-variable": {
              "defaultOptions": [],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "Enforce typing arguments in Promise rejection callbacks as `unknown`",
                  "recommended": "strict",
                  "requiresTypeChecking": true,
                  "url": "https://typescript-eslint.io/rules/use-unknown-in-catch-callback-variable"
                },
                "hasSuggestions": true,
                "messages": {
                  "addUnknownRestTypeAnnotationSuggestion": "Add an explicit `: [unknown]` type annotation to the rejection callback rest variable.",
                  "addUnknownTypeAnnotationSuggestion": "Add an explicit `: unknown` type annotation to the rejection callback variable.",
                  "useUnknown": "Prefer the safe `: unknown` for a `{{method}}`{{append}} callback variable.",
                  "useUnknownArrayDestructuringPattern": "Prefer the safe `: unknown` for a `{{method}}`{{append}} callback variable. The thrown error may not be iterable.",
                  "useUnknownObjectDestructuringPattern": "Prefer the safe `: unknown` for a `{{method}}`{{append}} callback variable. The thrown error may be nullable, or may not have the expected shape.",
                  "wrongRestTypeAnnotationSuggestion": "Change existing type annotation to `: [unknown]`.",
                  "wrongTypeAnnotationSuggestion": "Change existing type annotation to `: unknown`."
                },
                "schema": []
              }
            }
          }
        }
      },
      "files": ["**/*.{ts,tsx,mts,cts}"]
    },
    {
      "rules": {
        "constructor-super": "off",
        "getter-return": "off",
        "no-class-assign": "off",
        "no-const-assign": "off",
        "no-dupe-args": "off",
        "no-dupe-class-members": "off",
        "no-dupe-keys": "off",
        "no-func-assign": "off",
        "no-import-assign": "off",
        "no-new-native-nonconstructor": "off",
        "no-new-symbol": "off",
        "no-obj-calls": "off",
        "no-redeclare": "off",
        "no-setter-return": "off",
        "no-this-before-super": "off",
        "no-undef": "off",
        "no-unreachable": "off",
        "no-unsafe-negation": "off",
        "no-var": "error",
        "no-with": "off",
        "prefer-const": "error",
        "prefer-rest-params": "error",
        "prefer-spread": "error"
      },
      "name": "@repo/eslint-config/base__@virtual-live-lab/eslint-config/typescript__typescript-eslint/eslint-recommended"
    },
    {
      "name": "@repo/eslint-config/base__@virtual-live-lab/eslint-config/typescript__typescript-eslint/recommended-type-checked",
      "rules": {
        "@typescript-eslint/await-thenable": "error",
        "@typescript-eslint/ban-ts-comment": "error",
        "no-array-constructor": "off",
        "@typescript-eslint/no-array-constructor": "error",
        "@typescript-eslint/no-array-delete": "error",
        "@typescript-eslint/no-base-to-string": "error",
        "@typescript-eslint/no-duplicate-enum-values": "error",
        "@typescript-eslint/no-duplicate-type-constituents": "error",
        "@typescript-eslint/no-empty-object-type": "error",
        "@typescript-eslint/no-explicit-any": "error",
        "@typescript-eslint/no-extra-non-null-assertion": "error",
        "@typescript-eslint/no-floating-promises": "error",
        "@typescript-eslint/no-for-in-array": "error",
        "no-implied-eval": "off",
        "@typescript-eslint/no-implied-eval": "error",
        "@typescript-eslint/no-misused-new": "error",
        "@typescript-eslint/no-misused-promises": "error",
        "@typescript-eslint/no-namespace": "error",
        "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
        "@typescript-eslint/no-redundant-type-constituents": "error",
        "@typescript-eslint/no-require-imports": "error",
        "@typescript-eslint/no-this-alias": "error",
        "@typescript-eslint/no-unnecessary-type-assertion": "error",
        "@typescript-eslint/no-unnecessary-type-constraint": "error",
        "@typescript-eslint/no-unsafe-argument": "error",
        "@typescript-eslint/no-unsafe-assignment": "error",
        "@typescript-eslint/no-unsafe-call": "error",
        "@typescript-eslint/no-unsafe-declaration-merging": "error",
        "@typescript-eslint/no-unsafe-enum-comparison": "error",
        "@typescript-eslint/no-unsafe-function-type": "error",
        "@typescript-eslint/no-unsafe-member-access": "error",
        "@typescript-eslint/no-unsafe-return": "error",
        "@typescript-eslint/no-unsafe-unary-minus": "error",
        "no-unused-expressions": "off",
        "@typescript-eslint/no-unused-expressions": "error",
        "no-unused-vars": "off",
        "@typescript-eslint/no-unused-vars": "error",
        "@typescript-eslint/no-wrapper-object-types": "error",
        "no-throw-literal": "off",
        "@typescript-eslint/only-throw-error": "error",
        "@typescript-eslint/prefer-as-const": "error",
        "@typescript-eslint/prefer-namespace-keyword": "error",
        "prefer-promise-reject-errors": "off",
        "@typescript-eslint/prefer-promise-reject-errors": "error",
        "require-await": "off",
        "@typescript-eslint/require-await": "error",
        "@typescript-eslint/restrict-plus-operands": "error",
        "@typescript-eslint/restrict-template-expressions": "error",
        "@typescript-eslint/triple-slash-reference": "error",
        "@typescript-eslint/unbound-method": "error"
      }
    },
    {
      "name": "@repo/eslint-config/base__@virtual-live-lab/eslint-config/typescript__typescript-eslint/base",
      "plugins": {}
    },
    {
      "rules": {
        "constructor-super": "off",
        "getter-return": "off",
        "no-class-assign": "off",
        "no-const-assign": "off",
        "no-dupe-args": "off",
        "no-dupe-class-members": "off",
        "no-dupe-keys": "off",
        "no-func-assign": "off",
        "no-import-assign": "off",
        "no-new-native-nonconstructor": "off",
        "no-new-symbol": "off",
        "no-obj-calls": "off",
        "no-redeclare": "off",
        "no-setter-return": "off",
        "no-this-before-super": "off",
        "no-undef": "off",
        "no-unreachable": "off",
        "no-unsafe-negation": "off",
        "no-var": "error",
        "no-with": "off",
        "prefer-const": "error",
        "prefer-rest-params": "error",
        "prefer-spread": "error"
      },
      "name": "@repo/eslint-config/base__@virtual-live-lab/eslint-config/typescript__typescript-eslint/eslint-recommended"
    },
    {
      "name": "@repo/eslint-config/base__@virtual-live-lab/eslint-config/typescript__typescript-eslint/stylistic-type-checked",
      "rules": {
        "@typescript-eslint/adjacent-overload-signatures": "error",
        "@typescript-eslint/array-type": "error",
        "@typescript-eslint/ban-tslint-comment": "error",
        "@typescript-eslint/class-literal-property-style": "error",
        "@typescript-eslint/consistent-generic-constructors": "error",
        "@typescript-eslint/consistent-indexed-object-style": "error",
        "@typescript-eslint/consistent-type-assertions": "error",
        "@typescript-eslint/consistent-type-definitions": "error",
        "dot-notation": "off",
        "@typescript-eslint/dot-notation": "error",
        "@typescript-eslint/no-confusing-non-null-assertion": "error",
        "no-empty-function": "off",
        "@typescript-eslint/no-empty-function": "error",
        "@typescript-eslint/no-inferrable-types": "error",
        "@typescript-eslint/non-nullable-type-assertion-style": "error",
        "@typescript-eslint/prefer-find": "error",
        "@typescript-eslint/prefer-for-of": "error",
        "@typescript-eslint/prefer-function-type": "error",
        "@typescript-eslint/prefer-includes": "error",
        "@typescript-eslint/prefer-nullish-coalescing": "error",
        "@typescript-eslint/prefer-optional-chain": "error",
        "@typescript-eslint/prefer-regexp-exec": "error",
        "@typescript-eslint/prefer-string-starts-ends-with": "error"
      }
    },
    {
      "files": ["**/*.{ts,tsx,mts,cts}"],
      "languageOptions": {
        "parserOptions": {
          "projectService": {
            "allowDefaultProject": ["*.js", "*.mjs", "*.cjs"],
            "defaultProject": "/Users/sushichan044/workspace/github.com/sushichan044/eslint-todo/tsconfig.json"
          },
          "tsconfigRootDir": "/Users/sushichan044/workspace/github.com/sushichan044/eslint-todo"
        }
      },
      "name": "@repo/eslint-config/base__@virtual-live-lab/eslint-config/typescript",
      "plugins": {
        "@stylistic/ts": {
          "rules": {
            "block-spacing": {
              "defaultOptions": ["always"],
              "meta": {
                "type": "layout",
                "docs": {
                  "description": "Disallow or enforce spaces inside of blocks after opening block and before closing block",
                  "url": "https://eslint.style/rules/ts/block-spacing"
                },
                "fixable": "whitespace",
                "schema": [{ "type": "string", "enum": ["always", "never"] }],
                "messages": {
                  "missing": "Requires a space {{location}} '{{token}}'.",
                  "extra": "Unexpected space(s) {{location}} '{{token}}'."
                }
              }
            },
            "brace-style": {
              "defaultOptions": ["1tbs", { "allowSingleLine": false }],
              "meta": {
                "type": "layout",
                "docs": {
                  "description": "Enforce consistent brace style for blocks",
                  "url": "https://eslint.style/rules/ts/brace-style"
                },
                "fixable": "whitespace",
                "schema": [
                  {
                    "type": "string",
                    "enum": ["1tbs", "stroustrup", "allman"]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "allowSingleLine": { "type": "boolean", "default": false }
                    },
                    "additionalProperties": false
                  }
                ],
                "messages": {
                  "nextLineOpen": "Opening curly brace does not appear on the same line as controlling statement.",
                  "sameLineOpen": "Opening curly brace appears on the same line as controlling statement.",
                  "blockSameLine": "Statement inside of curly braces should be on next line.",
                  "nextLineClose": "Closing curly brace does not appear on the same line as the subsequent block.",
                  "singleLineClose": "Closing curly brace should be on the same line as opening curly brace or on the line after the previous block.",
                  "sameLineClose": "Closing curly brace appears on the same line as the subsequent block."
                }
              }
            },
            "comma-dangle": {
              "defaultOptions": ["never"],
              "meta": {
                "type": "layout",
                "docs": {
                  "description": "Require or disallow trailing commas",
                  "url": "https://eslint.style/rules/ts/comma-dangle"
                },
                "schema": {
                  "$defs": {
                    "value": {
                      "type": "string",
                      "enum": [
                        "always-multiline",
                        "always",
                        "never",
                        "only-multiline"
                      ]
                    },
                    "valueWithIgnore": {
                      "type": "string",
                      "enum": [
                        "always-multiline",
                        "always",
                        "never",
                        "only-multiline",
                        "ignore"
                      ]
                    }
                  },
                  "type": "array",
                  "items": [
                    {
                      "oneOf": [
                        { "$ref": "#/$defs/value" },
                        {
                          "type": "object",
                          "properties": {
                            "arrays": { "$ref": "#/$defs/valueWithIgnore" },
                            "objects": { "$ref": "#/$defs/valueWithIgnore" },
                            "imports": { "$ref": "#/$defs/valueWithIgnore" },
                            "exports": { "$ref": "#/$defs/valueWithIgnore" },
                            "functions": { "$ref": "#/$defs/valueWithIgnore" },
                            "importAttributes": {
                              "$ref": "#/$defs/valueWithIgnore"
                            },
                            "dynamicImports": {
                              "$ref": "#/$defs/valueWithIgnore"
                            },
                            "enums": { "$ref": "#/$defs/valueWithIgnore" },
                            "generics": { "$ref": "#/$defs/valueWithIgnore" },
                            "tuples": { "$ref": "#/$defs/valueWithIgnore" }
                          },
                          "additionalProperties": false
                        }
                      ]
                    }
                  ],
                  "additionalItems": false
                },
                "fixable": "code",
                "messages": {
                  "unexpected": "Unexpected trailing comma.",
                  "missing": "Missing trailing comma."
                }
              }
            },
            "comma-spacing": {
              "defaultOptions": [{ "before": false, "after": true }],
              "meta": {
                "type": "layout",
                "docs": {
                  "description": "Enforce consistent spacing before and after commas",
                  "url": "https://eslint.style/rules/ts/comma-spacing"
                },
                "fixable": "whitespace",
                "schema": [
                  {
                    "type": "object",
                    "properties": {
                      "before": { "type": "boolean", "default": false },
                      "after": { "type": "boolean", "default": true }
                    },
                    "additionalProperties": false
                  }
                ],
                "messages": {
                  "unexpected": "There should be no space {{loc}} ','.",
                  "missing": "A space is required {{loc}} ','."
                }
              }
            },
            "func-call-spacing": {
              "defaultOptions": ["never", {}],
              "meta": {
                "type": "layout",
                "docs": {
                  "description": "Require or disallow spacing between function identifiers and their invocations",
                  "url": "https://eslint.style/rules/ts/function-call-spacing"
                },
                "fixable": "whitespace",
                "schema": {
                  "anyOf": [
                    {
                      "type": "array",
                      "items": [{ "type": "string", "enum": ["never"] }],
                      "minItems": 0,
                      "maxItems": 1
                    },
                    {
                      "type": "array",
                      "items": [
                        { "type": "string", "enum": ["always"] },
                        {
                          "type": "object",
                          "properties": {
                            "allowNewlines": { "type": "boolean" },
                            "optionalChain": {
                              "type": "object",
                              "properties": {
                                "before": { "type": "boolean" },
                                "after": { "type": "boolean" }
                              },
                              "additionalProperties": false
                            }
                          },
                          "additionalProperties": false
                        }
                      ],
                      "minItems": 0,
                      "maxItems": 2
                    }
                  ]
                },
                "messages": {
                  "unexpectedWhitespace": "Unexpected whitespace between function name and paren.",
                  "unexpectedNewline": "Unexpected newline between function name and paren.",
                  "missing": "Missing space between function name and paren."
                }
              }
            },
            "indent": {
              "defaultOptions": [
                4,
                {
                  "SwitchCase": 1,
                  "flatTernaryExpressions": false,
                  "ignoredNodes": []
                }
              ],
              "meta": {
                "type": "layout",
                "docs": {
                  "description": "Enforce consistent indentation",
                  "url": "https://eslint.style/rules/ts/indent"
                },
                "fixable": "whitespace",
                "schema": [
                  {
                    "oneOf": [
                      { "type": "string", "enum": ["tab"] },
                      { "type": "integer", "minimum": 0 }
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "SwitchCase": {
                        "type": "integer",
                        "minimum": 0,
                        "default": 0
                      },
                      "VariableDeclarator": {
                        "oneOf": [
                          {
                            "oneOf": [
                              { "type": "integer", "minimum": 0 },
                              { "type": "string", "enum": ["first", "off"] }
                            ]
                          },
                          {
                            "type": "object",
                            "properties": {},
                            "additionalProperties": false
                          }
                        ]
                      },
                      "outerIIFEBody": {
                        "oneOf": [
                          { "type": "integer", "minimum": 0 },
                          { "type": "string", "enum": ["off"] }
                        ]
                      },
                      "MemberExpression": {
                        "oneOf": [
                          { "type": "integer", "minimum": 0 },
                          { "type": "string", "enum": ["off"] }
                        ]
                      },
                      "FunctionDeclaration": {
                        "type": "object",
                        "properties": {
                          "body": { "type": "integer", "minimum": 0 }
                        },
                        "additionalProperties": false
                      },
                      "FunctionExpression": {
                        "type": "object",
                        "properties": {
                          "body": { "type": "integer", "minimum": 0 }
                        },
                        "additionalProperties": false
                      },
                      "StaticBlock": {
                        "type": "object",
                        "properties": {
                          "body": { "type": "integer", "minimum": 0 }
                        },
                        "additionalProperties": false
                      },
                      "CallExpression": {
                        "type": "object",
                        "properties": {},
                        "additionalProperties": false
                      },
                      "flatTernaryExpressions": {
                        "type": "boolean",
                        "default": false
                      },
                      "offsetTernaryExpressions": {
                        "type": "boolean",
                        "default": false
                      },
                      "offsetTernaryExpressionsOffsetCallExpressions": {
                        "type": "boolean",
                        "default": true
                      },
                      "ignoredNodes": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "not": { "pattern": ":exit$" }
                        }
                      },
                      "ignoreComments": { "type": "boolean", "default": false },
                      "tabLength": { "type": "number", "default": 4 }
                    },
                    "additionalProperties": false
                  }
                ],
                "messages": {
                  "wrongIndentation": "Expected indentation of {{expected}} but found {{actual}}."
                }
              }
            },
            "key-spacing": {
              "defaultOptions": [{}],
              "meta": {
                "type": "layout",
                "docs": {
                  "description": "Enforce consistent spacing between property names and type annotations in types and interfaces",
                  "url": "https://eslint.style/rules/ts/key-spacing"
                },
                "fixable": "whitespace",
                "schema": [
                  {
                    "anyOf": [
                      {
                        "type": "object",
                        "properties": {
                          "align": {
                            "anyOf": [
                              { "type": "string", "enum": ["colon", "value"] },
                              {
                                "type": "object",
                                "properties": {
                                  "mode": {
                                    "type": "string",
                                    "enum": ["strict", "minimum"]
                                  },
                                  "on": {
                                    "type": "string",
                                    "enum": ["colon", "value"]
                                  },
                                  "beforeColon": { "type": "boolean" },
                                  "afterColon": { "type": "boolean" }
                                },
                                "additionalProperties": false
                              }
                            ]
                          },
                          "mode": {
                            "type": "string",
                            "enum": ["strict", "minimum"]
                          },
                          "beforeColon": { "type": "boolean" },
                          "afterColon": { "type": "boolean" },
                          "ignoredNodes": {
                            "type": "array",
                            "items": {
                              "type": "string",
                              "enum": [
                                "ObjectExpression",
                                "ObjectPattern",
                                "ImportDeclaration",
                                "ExportNamedDeclaration",
                                "ExportAllDeclaration",
                                "TSTypeLiteral",
                                "TSInterfaceBody",
                                "ClassBody"
                              ]
                            }
                          }
                        },
                        "additionalProperties": false
                      },
                      {
                        "type": "object",
                        "properties": {
                          "singleLine": {
                            "type": "object",
                            "properties": {
                              "mode": {
                                "type": "string",
                                "enum": ["strict", "minimum"]
                              },
                              "beforeColon": { "type": "boolean" },
                              "afterColon": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          },
                          "multiLine": {
                            "type": "object",
                            "properties": {
                              "align": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "enum": ["colon", "value"]
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "mode": {
                                        "type": "string",
                                        "enum": ["strict", "minimum"]
                                      },
                                      "on": {
                                        "type": "string",
                                        "enum": ["colon", "value"]
                                      },
                                      "beforeColon": { "type": "boolean" },
                                      "afterColon": { "type": "boolean" }
                                    },
                                    "additionalProperties": false
                                  }
                                ]
                              },
                              "mode": {
                                "type": "string",
                                "enum": ["strict", "minimum"]
                              },
                              "beforeColon": { "type": "boolean" },
                              "afterColon": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          }
                        },
                        "additionalProperties": false
                      },
                      {
                        "type": "object",
                        "properties": {
                          "singleLine": {
                            "type": "object",
                            "properties": {
                              "mode": {
                                "type": "string",
                                "enum": ["strict", "minimum"]
                              },
                              "beforeColon": { "type": "boolean" },
                              "afterColon": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          },
                          "multiLine": {
                            "type": "object",
                            "properties": {
                              "mode": {
                                "type": "string",
                                "enum": ["strict", "minimum"]
                              },
                              "beforeColon": { "type": "boolean" },
                              "afterColon": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          },
                          "align": {
                            "type": "object",
                            "properties": {
                              "mode": {
                                "type": "string",
                                "enum": ["strict", "minimum"]
                              },
                              "on": {
                                "type": "string",
                                "enum": ["colon", "value"]
                              },
                              "beforeColon": { "type": "boolean" },
                              "afterColon": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          }
                        },
                        "additionalProperties": false
                      }
                    ]
                  }
                ],
                "messages": {
                  "extraKey": "Extra space after {{computed}}key '{{key}}'.",
                  "extraValue": "Extra space before value for {{computed}}key '{{key}}'.",
                  "missingKey": "Missing space after {{computed}}key '{{key}}'.",
                  "missingValue": "Missing space before value for {{computed}}key '{{key}}'."
                }
              }
            },
            "keyword-spacing": {
              "defaultOptions": [{}],
              "meta": {
                "type": "layout",
                "docs": {
                  "description": "Enforce consistent spacing before and after keywords",
                  "url": "https://eslint.style/rules/ts/keyword-spacing"
                },
                "fixable": "whitespace",
                "schema": [
                  {
                    "type": "object",
                    "properties": {
                      "before": { "type": "boolean", "default": true },
                      "after": { "type": "boolean", "default": true },
                      "overrides": {
                        "type": "object",
                        "properties": {
                          "abstract": {
                            "type": "object",
                            "properties": {
                              "before": { "type": "boolean" },
                              "after": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          },
                          "boolean": {
                            "type": "object",
                            "properties": {
                              "before": { "type": "boolean" },
                              "after": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          },
                          "break": {
                            "type": "object",
                            "properties": {
                              "before": { "type": "boolean" },
                              "after": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          },
                          "byte": {
                            "type": "object",
                            "properties": {
                              "before": { "type": "boolean" },
                              "after": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          },
                          "case": {
                            "type": "object",
                            "properties": {
                              "before": { "type": "boolean" },
                              "after": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          },
                          "catch": {
                            "type": "object",
                            "properties": {
                              "before": { "type": "boolean" },
                              "after": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          },
                          "char": {
                            "type": "object",
                            "properties": {
                              "before": { "type": "boolean" },
                              "after": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          },
                          "class": {
                            "type": "object",
                            "properties": {
                              "before": { "type": "boolean" },
                              "after": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          },
                          "const": {
                            "type": "object",
                            "properties": {
                              "before": { "type": "boolean" },
                              "after": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          },
                          "continue": {
                            "type": "object",
                            "properties": {
                              "before": { "type": "boolean" },
                              "after": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          },
                          "debugger": {
                            "type": "object",
                            "properties": {
                              "before": { "type": "boolean" },
                              "after": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          },
                          "default": {
                            "type": "object",
                            "properties": {
                              "before": { "type": "boolean" },
                              "after": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          },
                          "delete": {
                            "type": "object",
                            "properties": {
                              "before": { "type": "boolean" },
                              "after": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          },
                          "do": {
                            "type": "object",
                            "properties": {
                              "before": { "type": "boolean" },
                              "after": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          },
                          "double": {
                            "type": "object",
                            "properties": {
                              "before": { "type": "boolean" },
                              "after": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          },
                          "else": {
                            "type": "object",
                            "properties": {
                              "before": { "type": "boolean" },
                              "after": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          },
                          "enum": {
                            "type": "object",
                            "properties": {
                              "before": { "type": "boolean" },
                              "after": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          },
                          "export": {
                            "type": "object",
                            "properties": {
                              "before": { "type": "boolean" },
                              "after": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          },
                          "extends": {
                            "type": "object",
                            "properties": {
                              "before": { "type": "boolean" },
                              "after": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          },
                          "false": {
                            "type": "object",
                            "properties": {
                              "before": { "type": "boolean" },
                              "after": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          },
                          "final": {
                            "type": "object",
                            "properties": {
                              "before": { "type": "boolean" },
                              "after": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          },
                          "finally": {
                            "type": "object",
                            "properties": {
                              "before": { "type": "boolean" },
                              "after": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          },
                          "float": {
                            "type": "object",
                            "properties": {
                              "before": { "type": "boolean" },
                              "after": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          },
                          "for": {
                            "type": "object",
                            "properties": {
                              "before": { "type": "boolean" },
                              "after": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          },
                          "function": {
                            "type": "object",
                            "properties": {
                              "before": { "type": "boolean" },
                              "after": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          },
                          "goto": {
                            "type": "object",
                            "properties": {
                              "before": { "type": "boolean" },
                              "after": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          },
                          "if": {
                            "type": "object",
                            "properties": {
                              "before": { "type": "boolean" },
                              "after": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          },
                          "implements": {
                            "type": "object",
                            "properties": {
                              "before": { "type": "boolean" },
                              "after": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          },
                          "import": {
                            "type": "object",
                            "properties": {
                              "before": { "type": "boolean" },
                              "after": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          },
                          "in": {
                            "type": "object",
                            "properties": {
                              "before": { "type": "boolean" },
                              "after": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          },
                          "instanceof": {
                            "type": "object",
                            "properties": {
                              "before": { "type": "boolean" },
                              "after": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          },
                          "int": {
                            "type": "object",
                            "properties": {
                              "before": { "type": "boolean" },
                              "after": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          },
                          "interface": {
                            "type": "object",
                            "properties": {
                              "before": { "type": "boolean" },
                              "after": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          },
                          "long": {
                            "type": "object",
                            "properties": {
                              "before": { "type": "boolean" },
                              "after": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          },
                          "native": {
                            "type": "object",
                            "properties": {
                              "before": { "type": "boolean" },
                              "after": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          },
                          "new": {
                            "type": "object",
                            "properties": {
                              "before": { "type": "boolean" },
                              "after": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          },
                          "null": {
                            "type": "object",
                            "properties": {
                              "before": { "type": "boolean" },
                              "after": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          },
                          "package": {
                            "type": "object",
                            "properties": {
                              "before": { "type": "boolean" },
                              "after": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          },
                          "private": {
                            "type": "object",
                            "properties": {
                              "before": { "type": "boolean" },
                              "after": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          },
                          "protected": {
                            "type": "object",
                            "properties": {
                              "before": { "type": "boolean" },
                              "after": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          },
                          "public": {
                            "type": "object",
                            "properties": {
                              "before": { "type": "boolean" },
                              "after": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          },
                          "return": {
                            "type": "object",
                            "properties": {
                              "before": { "type": "boolean" },
                              "after": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          },
                          "short": {
                            "type": "object",
                            "properties": {
                              "before": { "type": "boolean" },
                              "after": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          },
                          "static": {
                            "type": "object",
                            "properties": {
                              "before": { "type": "boolean" },
                              "after": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          },
                          "super": {
                            "type": "object",
                            "properties": {
                              "before": { "type": "boolean" },
                              "after": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          },
                          "switch": {
                            "type": "object",
                            "properties": {
                              "before": { "type": "boolean" },
                              "after": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          },
                          "synchronized": {
                            "type": "object",
                            "properties": {
                              "before": { "type": "boolean" },
                              "after": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          },
                          "this": {
                            "type": "object",
                            "properties": {
                              "before": { "type": "boolean" },
                              "after": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          },
                          "throw": {
                            "type": "object",
                            "properties": {
                              "before": { "type": "boolean" },
                              "after": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          },
                          "throws": {
                            "type": "object",
                            "properties": {
                              "before": { "type": "boolean" },
                              "after": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          },
                          "transient": {
                            "type": "object",
                            "properties": {
                              "before": { "type": "boolean" },
                              "after": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          },
                          "true": {
                            "type": "object",
                            "properties": {
                              "before": { "type": "boolean" },
                              "after": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          },
                          "try": {
                            "type": "object",
                            "properties": {
                              "before": { "type": "boolean" },
                              "after": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          },
                          "typeof": {
                            "type": "object",
                            "properties": {
                              "before": { "type": "boolean" },
                              "after": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          },
                          "var": {
                            "type": "object",
                            "properties": {
                              "before": { "type": "boolean" },
                              "after": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          },
                          "void": {
                            "type": "object",
                            "properties": {
                              "before": { "type": "boolean" },
                              "after": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          },
                          "volatile": {
                            "type": "object",
                            "properties": {
                              "before": { "type": "boolean" },
                              "after": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          },
                          "while": {
                            "type": "object",
                            "properties": {
                              "before": { "type": "boolean" },
                              "after": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          },
                          "with": {
                            "type": "object",
                            "properties": {
                              "before": { "type": "boolean" },
                              "after": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          },
                          "as": {
                            "type": "object",
                            "properties": {
                              "before": { "type": "boolean" },
                              "after": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          },
                          "async": {
                            "type": "object",
                            "properties": {
                              "before": { "type": "boolean" },
                              "after": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          },
                          "await": {
                            "type": "object",
                            "properties": {
                              "before": { "type": "boolean" },
                              "after": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          },
                          "from": {
                            "type": "object",
                            "properties": {
                              "before": { "type": "boolean" },
                              "after": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          },
                          "get": {
                            "type": "object",
                            "properties": {
                              "before": { "type": "boolean" },
                              "after": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          },
                          "let": {
                            "type": "object",
                            "properties": {
                              "before": { "type": "boolean" },
                              "after": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          },
                          "of": {
                            "type": "object",
                            "properties": {
                              "before": { "type": "boolean" },
                              "after": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          },
                          "satisfies": {
                            "type": "object",
                            "properties": {
                              "before": { "type": "boolean" },
                              "after": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          },
                          "set": {
                            "type": "object",
                            "properties": {
                              "before": { "type": "boolean" },
                              "after": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          },
                          "yield": {
                            "type": "object",
                            "properties": {
                              "before": { "type": "boolean" },
                              "after": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          },
                          "type": {
                            "type": "object",
                            "properties": {
                              "before": { "type": "boolean" },
                              "after": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "additionalProperties": false
                  }
                ],
                "messages": {
                  "expectedBefore": "Expected space(s) before \"{{value}}\".",
                  "expectedAfter": "Expected space(s) after \"{{value}}\".",
                  "unexpectedBefore": "Unexpected space(s) before \"{{value}}\".",
                  "unexpectedAfter": "Unexpected space(s) after \"{{value}}\"."
                }
              }
            },
            "lines-around-comment": {
              "defaultOptions": [{ "beforeBlockComment": true }],
              "meta": {
                "type": "layout",
                "docs": {
                  "description": "Require empty lines around comments",
                  "url": "https://eslint.style/rules/ts/lines-around-comment"
                },
                "schema": [
                  {
                    "type": "object",
                    "properties": {
                      "beforeBlockComment": {
                        "type": "boolean",
                        "default": true
                      },
                      "afterBlockComment": {
                        "type": "boolean",
                        "default": false
                      },
                      "beforeLineComment": {
                        "type": "boolean",
                        "default": false
                      },
                      "afterLineComment": {
                        "type": "boolean",
                        "default": false
                      },
                      "allowBlockStart": {
                        "type": "boolean",
                        "default": false
                      },
                      "allowBlockEnd": { "type": "boolean", "default": false },
                      "allowClassStart": { "type": "boolean" },
                      "allowClassEnd": { "type": "boolean" },
                      "allowObjectStart": { "type": "boolean" },
                      "allowObjectEnd": { "type": "boolean" },
                      "allowArrayStart": { "type": "boolean" },
                      "allowArrayEnd": { "type": "boolean" },
                      "allowInterfaceStart": { "type": "boolean" },
                      "allowInterfaceEnd": { "type": "boolean" },
                      "allowTypeStart": { "type": "boolean" },
                      "allowTypeEnd": { "type": "boolean" },
                      "allowEnumStart": { "type": "boolean" },
                      "allowEnumEnd": { "type": "boolean" },
                      "allowModuleStart": { "type": "boolean" },
                      "allowModuleEnd": { "type": "boolean" },
                      "ignorePattern": { "type": "string" },
                      "applyDefaultIgnorePatterns": { "type": "boolean" },
                      "afterHashbangComment": { "type": "boolean" }
                    },
                    "additionalProperties": false
                  }
                ],
                "fixable": "whitespace",
                "messages": {
                  "after": "Expected line after comment.",
                  "before": "Expected line before comment."
                }
              }
            },
            "lines-between-class-members": {
              "defaultOptions": [
                "always",
                { "exceptAfterOverload": true, "exceptAfterSingleLine": false }
              ],
              "meta": {
                "type": "layout",
                "docs": {
                  "description": "Require or disallow an empty line between class members",
                  "url": "https://eslint.style/rules/ts/lines-between-class-members"
                },
                "fixable": "whitespace",
                "schema": [
                  {
                    "anyOf": [
                      {
                        "type": "object",
                        "properties": {
                          "enforce": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "blankLine": {
                                  "type": "string",
                                  "enum": ["always", "never"]
                                },
                                "prev": {
                                  "type": "string",
                                  "enum": ["method", "field", "*"]
                                },
                                "next": {
                                  "type": "string",
                                  "enum": ["method", "field", "*"]
                                }
                              },
                              "additionalProperties": false,
                              "required": ["blankLine", "prev", "next"]
                            },
                            "minItems": 1
                          }
                        },
                        "additionalProperties": false,
                        "required": ["enforce"]
                      },
                      { "type": "string", "enum": ["always", "never"] }
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "exceptAfterSingleLine": {
                        "type": "boolean",
                        "default": false
                      },
                      "exceptAfterOverload": {
                        "type": "boolean",
                        "default": true
                      }
                    },
                    "additionalProperties": false
                  }
                ],
                "messages": {
                  "never": "Unexpected blank line between class members.",
                  "always": "Expected blank line between class members."
                }
              }
            },
            "member-delimiter-style": {
              "defaultOptions": [
                {
                  "multiline": { "delimiter": "semi", "requireLast": true },
                  "singleline": { "delimiter": "semi", "requireLast": false },
                  "multilineDetection": "brackets"
                }
              ],
              "meta": {
                "type": "layout",
                "docs": {
                  "description": "Require a specific member delimiter style for interfaces and type literals",
                  "url": "https://eslint.style/rules/ts/member-delimiter-style"
                },
                "fixable": "whitespace",
                "messages": {
                  "unexpectedComma": "Unexpected separator (,).",
                  "unexpectedSemi": "Unexpected separator (;).",
                  "expectedComma": "Expected a comma.",
                  "expectedSemi": "Expected a semicolon."
                },
                "schema": [
                  {
                    "$defs": {
                      "multiLineOption": {
                        "type": "string",
                        "enum": ["none", "semi", "comma"]
                      },
                      "singleLineOption": {
                        "type": "string",
                        "enum": ["semi", "comma"]
                      },
                      "delimiterConfig": {
                        "type": "object",
                        "properties": {
                          "multiline": {
                            "type": "object",
                            "properties": {
                              "delimiter": {
                                "$ref": "#/items/0/$defs/multiLineOption"
                              },
                              "requireLast": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          },
                          "singleline": {
                            "type": "object",
                            "properties": {
                              "delimiter": {
                                "$ref": "#/items/0/$defs/singleLineOption"
                              },
                              "requireLast": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "type": "object",
                    "properties": {
                      "overrides": {
                        "type": "object",
                        "properties": {
                          "interface": {
                            "$ref": "#/items/0/$defs/delimiterConfig"
                          },
                          "typeLiteral": {
                            "$ref": "#/items/0/$defs/delimiterConfig"
                          }
                        },
                        "additionalProperties": false
                      },
                      "multilineDetection": {
                        "type": "string",
                        "enum": ["brackets", "last-member"]
                      }
                    },
                    "additionalProperties": false
                  }
                ]
              }
            },
            "no-extra-parens": {
              "defaultOptions": ["all"],
              "meta": {
                "type": "layout",
                "docs": {
                  "description": "Disallow unnecessary parentheses",
                  "url": "https://eslint.style/rules/ts/no-extra-parens"
                },
                "fixable": "code",
                "schema": {
                  "anyOf": [
                    {
                      "type": "array",
                      "items": [{ "type": "string", "enum": ["functions"] }],
                      "minItems": 0,
                      "maxItems": 1
                    },
                    {
                      "type": "array",
                      "items": [
                        { "type": "string", "enum": ["all"] },
                        {
                          "type": "object",
                          "properties": {
                            "conditionalAssign": { "type": "boolean" },
                            "ternaryOperandBinaryExpressions": {
                              "type": "boolean"
                            },
                            "nestedBinaryExpressions": { "type": "boolean" },
                            "returnAssign": { "type": "boolean" },
                            "ignoreJSX": {
                              "type": "string",
                              "enum": [
                                "none",
                                "all",
                                "single-line",
                                "multi-line"
                              ]
                            },
                            "enforceForArrowConditionals": {
                              "type": "boolean"
                            },
                            "enforceForSequenceExpressions": {
                              "type": "boolean"
                            },
                            "enforceForNewInMemberExpressions": {
                              "type": "boolean"
                            },
                            "enforceForFunctionPrototypeMethods": {
                              "type": "boolean"
                            },
                            "allowParensAfterCommentPattern": {
                              "type": "string"
                            },
                            "nestedConditionalExpressions": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        }
                      ],
                      "minItems": 0,
                      "maxItems": 2
                    }
                  ]
                },
                "messages": {
                  "unexpected": "Unnecessary parentheses around expression."
                }
              }
            },
            "no-extra-semi": {
              "defaultOptions": [],
              "meta": {
                "type": "layout",
                "docs": {
                  "description": "Disallow unnecessary semicolons",
                  "url": "https://eslint.style/rules/ts/no-extra-semi"
                },
                "fixable": "code",
                "schema": [],
                "messages": { "unexpected": "Unnecessary semicolon." }
              }
            },
            "object-curly-newline": {
              "defaultOptions": [
                {
                  "ObjectExpression": {
                    "multiline": false,
                    "minProperties": null,
                    "consistent": true
                  }
                }
              ],
              "meta": {
                "type": "layout",
                "docs": {
                  "description": "Enforce consistent line breaks after opening and before closing braces",
                  "url": "https://eslint.style/rules/ts/object-curly-newline"
                },
                "fixable": "whitespace",
                "schema": [
                  {
                    "oneOf": [
                      {
                        "oneOf": [
                          { "type": "string", "enum": ["always", "never"] },
                          {
                            "type": "object",
                            "properties": {
                              "multiline": { "type": "boolean" },
                              "minProperties": {
                                "type": "integer",
                                "minimum": 0
                              },
                              "consistent": { "type": "boolean" }
                            },
                            "additionalProperties": false,
                            "minProperties": 1
                          }
                        ]
                      },
                      {
                        "type": "object",
                        "properties": {},
                        "additionalProperties": false,
                        "minProperties": 1
                      }
                    ]
                  }
                ],
                "messages": {
                  "unexpectedLinebreakBeforeClosingBrace": "Unexpected line break before this closing brace.",
                  "unexpectedLinebreakAfterOpeningBrace": "Unexpected line break after this opening brace.",
                  "expectedLinebreakBeforeClosingBrace": "Expected a line break before this closing brace.",
                  "expectedLinebreakAfterOpeningBrace": "Expected a line break after this opening brace."
                }
              }
            },
            "object-curly-spacing": {
              "defaultOptions": ["never"],
              "meta": {
                "type": "layout",
                "docs": {
                  "description": "Enforce consistent spacing inside braces",
                  "url": "https://eslint.style/rules/ts/object-curly-spacing"
                },
                "fixable": "whitespace",
                "schema": [
                  { "type": "string", "enum": ["always", "never"] },
                  {
                    "type": "object",
                    "properties": {
                      "arraysInObjects": { "type": "boolean" },
                      "objectsInObjects": { "type": "boolean" }
                    },
                    "additionalProperties": false
                  }
                ],
                "messages": {
                  "requireSpaceBefore": "A space is required before '{{token}}'.",
                  "requireSpaceAfter": "A space is required after '{{token}}'.",
                  "unexpectedSpaceBefore": "There should be no space before '{{token}}'.",
                  "unexpectedSpaceAfter": "There should be no space after '{{token}}'."
                }
              }
            },
            "object-property-newline": {
              "defaultOptions": [
                {
                  "allowAllPropertiesOnSameLine": false,
                  "allowMultiplePropertiesPerLine": false
                }
              ],
              "meta": {
                "type": "layout",
                "docs": {
                  "description": "Enforce placing object properties on separate lines",
                  "url": "https://eslint.style/rules/ts/object-property-newline"
                },
                "schema": [
                  {
                    "type": "object",
                    "properties": {
                      "allowAllPropertiesOnSameLine": {
                        "type": "boolean",
                        "default": false
                      },
                      "allowMultiplePropertiesPerLine": {
                        "type": "boolean",
                        "default": false
                      }
                    },
                    "additionalProperties": false
                  }
                ],
                "fixable": "whitespace",
                "messages": {
                  "propertiesOnNewlineAll": "Object properties must go on a new line if they aren't all on the same line.",
                  "propertiesOnNewline": "Object properties must go on a new line."
                }
              }
            },
            "padding-line-between-statements": {
              "defaultOptions": [],
              "meta": {
                "type": "layout",
                "docs": {
                  "description": "Require or disallow padding lines between statements",
                  "url": "https://eslint.style/rules/ts/padding-line-between-statements"
                },
                "fixable": "whitespace",
                "hasSuggestions": false,
                "schema": {
                  "$defs": {
                    "paddingType": {
                      "type": "string",
                      "enum": ["any", "never", "always"]
                    },
                    "statementType": {
                      "anyOf": [
                        {
                          "type": "string",
                          "enum": [
                            "*",
                            "block-like",
                            "exports",
                            "require",
                            "directive",
                            "expression",
                            "iife",
                            "multiline-block-like",
                            "multiline-expression",
                            "multiline-const",
                            "multiline-export",
                            "multiline-let",
                            "multiline-var",
                            "singleline-const",
                            "singleline-export",
                            "singleline-let",
                            "singleline-var",
                            "block",
                            "empty",
                            "function",
                            "ts-method",
                            "break",
                            "case",
                            "class",
                            "const",
                            "continue",
                            "debugger",
                            "default",
                            "do",
                            "export",
                            "for",
                            "if",
                            "import",
                            "let",
                            "return",
                            "switch",
                            "throw",
                            "try",
                            "var",
                            "while",
                            "with",
                            "cjs-export",
                            "cjs-import",
                            "enum",
                            "interface",
                            "type",
                            "function-overload"
                          ]
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": [
                              "*",
                              "block-like",
                              "exports",
                              "require",
                              "directive",
                              "expression",
                              "iife",
                              "multiline-block-like",
                              "multiline-expression",
                              "multiline-const",
                              "multiline-export",
                              "multiline-let",
                              "multiline-var",
                              "singleline-const",
                              "singleline-export",
                              "singleline-let",
                              "singleline-var",
                              "block",
                              "empty",
                              "function",
                              "ts-method",
                              "break",
                              "case",
                              "class",
                              "const",
                              "continue",
                              "debugger",
                              "default",
                              "do",
                              "export",
                              "for",
                              "if",
                              "import",
                              "let",
                              "return",
                              "switch",
                              "throw",
                              "try",
                              "var",
                              "while",
                              "with",
                              "cjs-export",
                              "cjs-import",
                              "enum",
                              "interface",
                              "type",
                              "function-overload"
                            ]
                          },
                          "minItems": 1,
                          "uniqueItems": true,
                          "additionalItems": false
                        }
                      ]
                    }
                  },
                  "type": "array",
                  "additionalItems": false,
                  "items": {
                    "type": "object",
                    "properties": {
                      "blankLine": { "$ref": "#/$defs/paddingType" },
                      "prev": { "$ref": "#/$defs/statementType" },
                      "next": { "$ref": "#/$defs/statementType" }
                    },
                    "additionalProperties": false,
                    "required": ["blankLine", "prev", "next"]
                  }
                },
                "messages": {
                  "unexpectedBlankLine": "Unexpected blank line before this statement.",
                  "expectedBlankLine": "Expected blank line before this statement."
                }
              }
            },
            "quote-props": {
              "defaultOptions": ["always"],
              "meta": {
                "type": "layout",
                "docs": {
                  "description": "Require quotes around object literal, type literal, interfaces and enums property names",
                  "url": "https://eslint.style/rules/ts/quote-props"
                },
                "fixable": "code",
                "schema": {
                  "anyOf": [
                    {
                      "type": "array",
                      "items": [
                        {
                          "type": "string",
                          "enum": [
                            "always",
                            "as-needed",
                            "consistent",
                            "consistent-as-needed"
                          ]
                        }
                      ],
                      "minItems": 0,
                      "maxItems": 1
                    },
                    {
                      "type": "array",
                      "items": [
                        {
                          "type": "string",
                          "enum": [
                            "always",
                            "as-needed",
                            "consistent",
                            "consistent-as-needed"
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "keywords": { "type": "boolean" },
                            "unnecessary": { "type": "boolean" },
                            "numbers": { "type": "boolean" }
                          },
                          "additionalProperties": false
                        }
                      ],
                      "minItems": 0,
                      "maxItems": 2
                    }
                  ]
                },
                "messages": {
                  "requireQuotesDueToReservedWord": "Properties should be quoted as '{{property}}' is a reserved word.",
                  "inconsistentlyQuotedProperty": "Inconsistently quoted property '{{key}}' found.",
                  "unnecessarilyQuotedProperty": "Unnecessarily quoted property '{{property}}' found.",
                  "unquotedReservedProperty": "Unquoted reserved word '{{property}}' used as key.",
                  "unquotedNumericProperty": "Unquoted number literal '{{property}}' used as key.",
                  "unquotedPropertyFound": "Unquoted property '{{property}}' found.",
                  "redundantQuoting": "Properties shouldn't be quoted as all quotes are redundant."
                }
              }
            },
            "quotes": {
              "defaultOptions": [
                "double",
                {
                  "allowTemplateLiterals": "never",
                  "avoidEscape": false,
                  "ignoreStringLiterals": false
                }
              ],
              "meta": {
                "type": "layout",
                "docs": {
                  "description": "Enforce the consistent use of either backticks, double, or single quotes",
                  "url": "https://eslint.style/rules/ts/quotes"
                },
                "fixable": "code",
                "schema": [
                  {
                    "type": "string",
                    "enum": ["single", "double", "backtick"]
                  },
                  {
                    "anyOf": [
                      { "type": "string", "enum": ["avoid-escape"] },
                      {
                        "type": "object",
                        "properties": {
                          "avoidEscape": { "type": "boolean" },
                          "allowTemplateLiterals": {
                            "anyOf": [
                              { "type": "boolean" },
                              {
                                "type": "string",
                                "enum": ["never", "avoidEscape", "always"]
                              }
                            ]
                          },
                          "ignoreStringLiterals": { "type": "boolean" }
                        },
                        "additionalProperties": false
                      }
                    ]
                  }
                ],
                "messages": {
                  "wrongQuotes": "Strings must use {{description}}."
                }
              }
            },
            "semi": {
              "defaultOptions": [
                "always",
                {
                  "omitLastInOneLineBlock": false,
                  "beforeStatementContinuationChars": "any"
                }
              ],
              "meta": {
                "type": "layout",
                "docs": {
                  "description": "Require or disallow semicolons instead of ASI",
                  "url": "https://eslint.style/rules/ts/semi"
                },
                "fixable": "code",
                "schema": {
                  "anyOf": [
                    {
                      "type": "array",
                      "items": [
                        { "type": "string", "enum": ["never"] },
                        {
                          "type": "object",
                          "properties": {
                            "beforeStatementContinuationChars": {
                              "type": "string",
                              "enum": ["always", "any", "never"]
                            }
                          },
                          "additionalProperties": false
                        }
                      ],
                      "minItems": 0,
                      "maxItems": 2
                    },
                    {
                      "type": "array",
                      "items": [
                        { "type": "string", "enum": ["always"] },
                        {
                          "type": "object",
                          "properties": {
                            "omitLastInOneLineBlock": { "type": "boolean" },
                            "omitLastInOneLineClassBody": { "type": "boolean" }
                          },
                          "additionalProperties": false
                        }
                      ],
                      "minItems": 0,
                      "maxItems": 2
                    }
                  ]
                },
                "messages": {
                  "missingSemi": "Missing semicolon.",
                  "extraSemi": "Extra semicolon."
                }
              }
            },
            "semi-spacing": {
              "defaultOptions": [],
              "meta": {
                "type": "layout",
                "docs": {
                  "description": "Enforce consistent spacing before and after semicolons",
                  "url": "https://eslint.style/rules/ts/semi-spacing"
                },
                "fixable": "whitespace",
                "schema": [
                  {
                    "type": "object",
                    "properties": {
                      "before": { "type": "boolean", "default": false },
                      "after": { "type": "boolean", "default": true }
                    },
                    "additionalProperties": false
                  }
                ],
                "messages": {
                  "unexpectedWhitespaceBefore": "Unexpected whitespace before semicolon.",
                  "unexpectedWhitespaceAfter": "Unexpected whitespace after semicolon.",
                  "missingWhitespaceBefore": "Missing whitespace before semicolon.",
                  "missingWhitespaceAfter": "Missing whitespace after semicolon."
                }
              }
            },
            "space-before-blocks": {
              "defaultOptions": ["always"],
              "meta": {
                "type": "layout",
                "docs": {
                  "description": "Enforce consistent spacing before blocks",
                  "url": "https://eslint.style/rules/ts/space-before-blocks"
                },
                "fixable": "whitespace",
                "schema": [
                  {
                    "oneOf": [
                      { "type": "string", "enum": ["always", "never"] },
                      {
                        "type": "object",
                        "properties": {
                          "keywords": {
                            "type": "string",
                            "enum": ["always", "never", "off"]
                          },
                          "functions": {
                            "type": "string",
                            "enum": ["always", "never", "off"]
                          },
                          "classes": {
                            "type": "string",
                            "enum": ["always", "never", "off"]
                          }
                        },
                        "additionalProperties": false
                      }
                    ]
                  }
                ],
                "messages": {
                  "unexpectedSpace": "Unexpected space before opening brace.",
                  "missingSpace": "Missing space before opening brace."
                }
              }
            },
            "space-before-function-paren": {
              "defaultOptions": ["always"],
              "meta": {
                "type": "layout",
                "docs": {
                  "description": "Enforce consistent spacing before function parenthesis",
                  "url": "https://eslint.style/rules/ts/space-before-function-paren"
                },
                "fixable": "whitespace",
                "schema": [
                  {
                    "oneOf": [
                      { "type": "string", "enum": ["always", "never"] },
                      {
                        "type": "object",
                        "properties": {
                          "anonymous": {
                            "type": "string",
                            "enum": ["always", "never", "ignore"]
                          },
                          "named": {
                            "type": "string",
                            "enum": ["always", "never", "ignore"]
                          },
                          "asyncArrow": {
                            "type": "string",
                            "enum": ["always", "never", "ignore"]
                          }
                        },
                        "additionalProperties": false
                      }
                    ]
                  }
                ],
                "messages": {
                  "unexpectedSpace": "Unexpected space before function parentheses.",
                  "missingSpace": "Missing space before function parentheses."
                }
              }
            },
            "space-infix-ops": {
              "defaultOptions": [{ "int32Hint": false, "ignoreTypes": false }],
              "meta": {
                "type": "layout",
                "docs": {
                  "description": "Require spacing around infix operators",
                  "url": "https://eslint.style/rules/ts/space-infix-ops"
                },
                "fixable": "whitespace",
                "schema": [
                  {
                    "type": "object",
                    "properties": {
                      "int32Hint": { "type": "boolean", "default": false },
                      "ignoreTypes": { "type": "boolean", "default": false }
                    },
                    "additionalProperties": false
                  }
                ],
                "messages": {
                  "missingSpace": "Operator '{{operator}}' must be spaced."
                }
              }
            },
            "type-annotation-spacing": {
              "defaultOptions": [{}],
              "meta": {
                "type": "layout",
                "docs": {
                  "description": "Require consistent spacing around type annotations",
                  "url": "https://eslint.style/rules/ts/type-annotation-spacing"
                },
                "fixable": "whitespace",
                "messages": {
                  "expectedSpaceAfter": "Expected a space after the '{{type}}'.",
                  "expectedSpaceBefore": "Expected a space before the '{{type}}'.",
                  "unexpectedSpaceAfter": "Unexpected space after the '{{type}}'.",
                  "unexpectedSpaceBefore": "Unexpected space before the '{{type}}'.",
                  "unexpectedSpaceBetween": "Unexpected space between the '{{previousToken}}' and the '{{type}}'."
                },
                "schema": [
                  {
                    "$defs": {
                      "spacingConfig": {
                        "type": "object",
                        "properties": {
                          "before": { "type": "boolean" },
                          "after": { "type": "boolean" }
                        },
                        "additionalProperties": false
                      }
                    },
                    "type": "object",
                    "properties": {
                      "before": { "type": "boolean" },
                      "after": { "type": "boolean" },
                      "overrides": {
                        "type": "object",
                        "properties": {
                          "colon": { "$ref": "#/items/0/$defs/spacingConfig" },
                          "arrow": { "$ref": "#/items/0/$defs/spacingConfig" },
                          "variable": {
                            "$ref": "#/items/0/$defs/spacingConfig"
                          },
                          "parameter": {
                            "$ref": "#/items/0/$defs/spacingConfig"
                          },
                          "property": {
                            "$ref": "#/items/0/$defs/spacingConfig"
                          },
                          "returnType": {
                            "$ref": "#/items/0/$defs/spacingConfig"
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "additionalProperties": false
                  }
                ]
              }
            }
          },
          "configs": {
            "disable-legacy": {
              "rules": {
                "@typescript-eslint/block-spacing": 0,
                "@typescript-eslint/brace-style": 0,
                "@typescript-eslint/comma-dangle": 0,
                "@typescript-eslint/comma-spacing": 0,
                "@typescript-eslint/func-call-spacing": 0,
                "@typescript-eslint/indent": 0,
                "@typescript-eslint/key-spacing": 0,
                "@typescript-eslint/keyword-spacing": 0,
                "@typescript-eslint/lines-around-comment": 0,
                "@typescript-eslint/lines-between-class-members": 0,
                "@typescript-eslint/member-delimiter-style": 0,
                "@typescript-eslint/no-extra-parens": 0,
                "@typescript-eslint/no-extra-semi": 0,
                "@typescript-eslint/object-curly-newline": 0,
                "@typescript-eslint/object-curly-spacing": 0,
                "@typescript-eslint/object-property-newline": 0,
                "@typescript-eslint/padding-line-between-statements": 0,
                "@typescript-eslint/quote-props": 0,
                "@typescript-eslint/quotes": 0,
                "@typescript-eslint/semi": 0,
                "@typescript-eslint/semi-spacing": 0,
                "@typescript-eslint/space-before-blocks": 0,
                "@typescript-eslint/space-before-function-paren": 0,
                "@typescript-eslint/space-infix-ops": 0,
                "@typescript-eslint/type-annotation-spacing": 0
              }
            },
            "all": {
              "plugins": {},
              "rules": {
                "@stylistic/ts/block-spacing": 2,
                "@stylistic/ts/brace-style": 2,
                "@stylistic/ts/comma-dangle": 2,
                "@stylistic/ts/comma-spacing": 2,
                "@stylistic/ts/function-call-spacing": 2,
                "@stylistic/ts/indent": 2,
                "@stylistic/ts/key-spacing": 2,
                "@stylistic/ts/keyword-spacing": 2,
                "@stylistic/ts/lines-around-comment": 2,
                "@stylistic/ts/lines-between-class-members": 2,
                "@stylistic/ts/member-delimiter-style": 2,
                "@stylistic/ts/no-extra-parens": 2,
                "@stylistic/ts/no-extra-semi": 2,
                "@stylistic/ts/object-curly-newline": 2,
                "@stylistic/ts/object-curly-spacing": 2,
                "@stylistic/ts/object-property-newline": 2,
                "@stylistic/ts/padding-line-between-statements": 2,
                "@stylistic/ts/quote-props": 2,
                "@stylistic/ts/quotes": 2,
                "@stylistic/ts/semi": 2,
                "@stylistic/ts/semi-spacing": 2,
                "@stylistic/ts/space-before-blocks": 2,
                "@stylistic/ts/space-before-function-paren": 2,
                "@stylistic/ts/space-infix-ops": 2,
                "@stylistic/ts/type-annotation-spacing": 2
              }
            }
          }
        }
      },
      "rules": {
        "@stylistic/ts/no-extra-semi": "error",
        "@typescript-eslint/adjacent-overload-signatures": "off",
        "@typescript-eslint/array-type": [
          "error",
          { "default": "array-simple" }
        ],
        "@typescript-eslint/ban-tslint-comment": "off",
        "@typescript-eslint/class-literal-property-style": "off",
        "@typescript-eslint/consistent-generic-constructors": "off",
        "@typescript-eslint/consistent-indexed-object-style": "off",
        "@typescript-eslint/consistent-type-assertions": "error",
        "@typescript-eslint/consistent-type-definitions": "off",
        "@typescript-eslint/consistent-type-exports": "error",
        "@typescript-eslint/consistent-type-imports": "error",
        "@typescript-eslint/no-confusing-non-null-assertion": "off",
        "@typescript-eslint/no-deprecated": "warn",
        "@typescript-eslint/no-duplicate-enum-values": "off",
        "@typescript-eslint/no-import-type-side-effects": "error",
        "@typescript-eslint/no-misused-promises": [
          "error",
          { "checksVoidReturn": { "attributes": false } }
        ],
        "@typescript-eslint/no-non-null-assertion": "warn",
        "@typescript-eslint/no-unsafe-declaration-merging": "off",
        "@typescript-eslint/prefer-for-of": "off",
        "@typescript-eslint/prefer-function-type": "off",
        "@typescript-eslint/promise-function-async": "error",
        "@typescript-eslint/strict-boolean-expressions": [
          "error",
          { "allowNumber": false }
        ],
        "@typescript-eslint/no-restricted-imports": [
          "error",
          {
            "paths": [
              {
                "importNames": ["default"],
                "message": "Please use named imports instead.",
                "name": "pathe"
              }
            ],
            "patterns": [
              {
                "message": "Todofile v1 is deprecated. Please use v2 instead.",
                "regex": "/todofile/v1$"
              }
            ]
          }
        ],
        "no-restricted-imports": "off"
      }
    },
    {
      "languageOptions": {
        "globals": {
          "AggregateError": false,
          "Array": false,
          "ArrayBuffer": false,
          "Atomics": false,
          "BigInt": false,
          "BigInt64Array": false,
          "BigUint64Array": false,
          "Boolean": false,
          "DataView": false,
          "Date": false,
          "decodeURI": false,
          "decodeURIComponent": false,
          "encodeURI": false,
          "encodeURIComponent": false,
          "Error": false,
          "escape": false,
          "eval": false,
          "EvalError": false,
          "FinalizationRegistry": false,
          "Float16Array": false,
          "Float32Array": false,
          "Float64Array": false,
          "Function": false,
          "globalThis": false,
          "Infinity": false,
          "Int16Array": false,
          "Int32Array": false,
          "Int8Array": false,
          "Intl": false,
          "isFinite": false,
          "isNaN": false,
          "Iterator": false,
          "JSON": false,
          "Map": false,
          "Math": false,
          "NaN": false,
          "Number": false,
          "Object": false,
          "parseFloat": false,
          "parseInt": false,
          "Promise": false,
          "Proxy": false,
          "RangeError": false,
          "ReferenceError": false,
          "Reflect": false,
          "RegExp": false,
          "Set": false,
          "SharedArrayBuffer": false,
          "String": false,
          "Symbol": false,
          "SyntaxError": false,
          "TypeError": false,
          "Uint16Array": false,
          "Uint32Array": false,
          "Uint8Array": false,
          "Uint8ClampedArray": false,
          "undefined": false,
          "unescape": false,
          "URIError": false,
          "WeakMap": false,
          "WeakRef": false,
          "WeakSet": false
        }
      },
      "name": "@repo/eslint-config/unicorn__unicorn/recommended",
      "plugins": {
        "unicorn": {
          "meta": { "name": "eslint-plugin-unicorn", "version": "59.0.1" },
          "rules": {
            "better-regex": {
              "meta": {
                "schema": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "sortCharacterClasses": { "type": "boolean" }
                    }
                  }
                ],
                "type": "suggestion",
                "docs": {
                  "description": "Improve regexes by making them shorter, consistent, and safer.",
                  "recommended": false,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/better-regex.md"
                },
                "fixable": "code",
                "defaultOptions": [{ "sortCharacterClasses": true }],
                "messages": {
                  "better-regex": "{{original}} can be optimized to {{optimized}}.",
                  "better-regex/parse-error": "Problem parsing {{original}}: {{error}}"
                }
              }
            },
            "catch-error-name": {
              "meta": {
                "schema": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "name": { "type": "string" },
                      "ignore": { "type": "array", "uniqueItems": true }
                    }
                  }
                ],
                "type": "suggestion",
                "docs": {
                  "description": "Enforce a specific parameter name in catch clauses.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/catch-error-name.md"
                },
                "fixable": "code",
                "defaultOptions": [{}],
                "messages": {
                  "catch-error-name": "The catch parameter `{{originalName}}` should be named `{{fixedName}}`."
                }
              }
            },
            "consistent-assert": {
              "meta": {
                "schema": [],
                "type": "problem",
                "docs": {
                  "description": "Enforce consistent assertion style with `node:assert`.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/consistent-assert.md"
                },
                "fixable": "code",
                "messages": {
                  "consistent-assert/error": "Prefer `{{name}}.ok(…)` over `{{name}}(…)`."
                }
              }
            },
            "consistent-date-clone": {
              "meta": {
                "schema": [],
                "type": "suggestion",
                "docs": {
                  "description": "Prefer passing `Date` directly to the constructor when cloning.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/consistent-date-clone.md"
                },
                "fixable": "code",
                "messages": {
                  "consistent-date-clone/error": "Unnecessary `.getTime()` call."
                }
              }
            },
            "consistent-destructuring": {
              "meta": {
                "schema": [],
                "type": "suggestion",
                "docs": {
                  "description": "Use destructured variables over properties.",
                  "recommended": false,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/consistent-destructuring.md"
                },
                "fixable": "code",
                "hasSuggestions": true,
                "messages": {
                  "consistentDestructuring": "Use destructured variables over properties.",
                  "consistentDestructuringSuggest": "Replace `{{expression}}` with destructured property `{{property}}`."
                }
              }
            },
            "consistent-empty-array-spread": {
              "meta": {
                "schema": [],
                "type": "suggestion",
                "docs": {
                  "description": "Prefer consistent types when spreading a ternary in an array literal.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/consistent-empty-array-spread.md"
                },
                "fixable": "code",
                "messages": {
                  "consistent-empty-array-spread": "Prefer using empty {{replacementDescription}} since the {{anotherNodePosition}} is {{anotherNodeDescription}}."
                }
              }
            },
            "consistent-existence-index-check": {
              "meta": {
                "schema": [],
                "type": "problem",
                "docs": {
                  "description": "Enforce consistent style for element existence checks with `indexOf()`, `lastIndexOf()`, `findIndex()`, and `findLastIndex()`.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/consistent-existence-index-check.md"
                },
                "fixable": "code",
                "messages": {
                  "consistent-existence-index-check": "Prefer `{{replacementOperator}} {{replacementValue}}` over `{{originalOperator}} {{originalValue}}` to check {{existenceOrNonExistence}}."
                }
              }
            },
            "consistent-function-scoping": {
              "meta": {
                "schema": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "checkArrowFunctions": { "type": "boolean" }
                    }
                  }
                ],
                "type": "suggestion",
                "docs": {
                  "description": "Move function definitions to the highest possible scope.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/consistent-function-scoping.md"
                },
                "defaultOptions": [{ "checkArrowFunctions": true }],
                "messages": {
                  "consistent-function-scoping": "Move {{functionNameWithKind}} to the outer scope."
                }
              }
            },
            "custom-error-definition": {
              "meta": {
                "schema": [],
                "type": "problem",
                "docs": {
                  "description": "Enforce correct `Error` subclassing.",
                  "recommended": false,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/custom-error-definition.md"
                },
                "fixable": "code",
                "messages": {
                  "invalidExport": "Exported error name should match error class"
                }
              }
            },
            "empty-brace-spaces": {
              "meta": {
                "schema": [],
                "type": "layout",
                "docs": {
                  "description": "Enforce no spaces between braces.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/empty-brace-spaces.md"
                },
                "fixable": "whitespace",
                "messages": {
                  "empty-brace-spaces": "Do not add spaces between braces."
                }
              }
            },
            "error-message": {
              "meta": {
                "schema": [],
                "type": "problem",
                "docs": {
                  "description": "Enforce passing a `message` value when creating a built-in error.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/error-message.md"
                },
                "messages": {
                  "missing-message": "Pass a message to the `{{constructorName}}` constructor.",
                  "message-is-empty-string": "Error message should not be an empty string.",
                  "message-is-not-a-string": "Error message should be a string."
                }
              }
            },
            "escape-case": {
              "meta": {
                "schema": [{ "enum": ["uppercase", "lowercase"] }],
                "type": "suggestion",
                "docs": {
                  "description": "Require escape sequences to use uppercase or lowercase values.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/escape-case.md"
                },
                "fixable": "code",
                "defaultOptions": ["uppercase"],
                "messages": {
                  "escape-uppercase": "Use uppercase characters for the value of the escape sequence.",
                  "escape-lowercase": "Use lowercase characters for the value of the escape sequence."
                }
              }
            },
            "expiring-todo-comments": {
              "meta": {
                "schema": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "terms": {
                        "type": "array",
                        "items": { "type": "string" }
                      },
                      "ignore": { "type": "array", "uniqueItems": true },
                      "ignoreDatesOnPullRequests": { "type": "boolean" },
                      "allowWarningComments": { "type": "boolean" },
                      "date": { "type": "string", "format": "date" }
                    }
                  }
                ],
                "type": "suggestion",
                "docs": {
                  "description": "Add expiration conditions to TODO comments.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/expiring-todo-comments.md"
                },
                "defaultOptions": [
                  {
                    "terms": ["todo", "fixme", "xxx"],
                    "ignore": [],
                    "ignoreDatesOnPullRequests": true,
                    "allowWarningComments": true
                  }
                ],
                "messages": {
                  "unicorn/avoidMultipleDates": "Avoid using multiple expiration dates in TODO: {{expirationDates}}. {{message}}",
                  "unicorn/expiredTodo": "There is a TODO that is past due date: {{expirationDate}}. {{message}}",
                  "unicorn/reachedPackageVersion": "There is a TODO that is past due package version: {{comparison}}. {{message}}",
                  "unicorn/avoidMultiplePackageVersions": "Avoid using multiple package versions in TODO: {{versions}}. {{message}}",
                  "unicorn/havePackage": "There is a TODO that is deprecated since you installed: {{package}}. {{message}}",
                  "unicorn/dontHavePackage": "There is a TODO that is deprecated since you uninstalled: {{package}}. {{message}}",
                  "unicorn/versionMatches": "There is a TODO match for package version: {{comparison}}. {{message}}",
                  "unicorn/engineMatches": "There is a TODO match for Node.js version: {{comparison}}. {{message}}",
                  "unicorn/removeWhitespaces": "Avoid using whitespace on TODO argument. On '{{original}}' use '{{fix}}'. {{message}}",
                  "unicorn/missingAtSymbol": "Missing '@' on TODO argument. On '{{original}}' use '{{fix}}'. {{message}}",
                  "unexpectedComment": "Unexpected '{{matchedTerm}}' comment without any conditions: '{{comment}}'."
                }
              }
            },
            "explicit-length-check": {
              "meta": {
                "schema": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "non-zero": {
                        "enum": ["greater-than", "not-equal"],
                        "default": "greater-than"
                      }
                    }
                  }
                ],
                "type": "problem",
                "docs": {
                  "description": "Enforce explicitly comparing the `length` or `size` property of a value.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/explicit-length-check.md"
                },
                "fixable": "code",
                "messages": {
                  "non-zero": "Use `.{{property}} {{code}}` when checking {{property}} is not zero.",
                  "zero": "Use `.{{property}} {{code}}` when checking {{property}} is zero.",
                  "suggestion": "Replace `.{{property}}` with `.{{property}} {{code}}`."
                },
                "hasSuggestions": true
              }
            },
            "filename-case": {
              "meta": {
                "schema": [
                  {
                    "oneOf": [
                      {
                        "properties": {
                          "case": {
                            "enum": [
                              "camelCase",
                              "snakeCase",
                              "kebabCase",
                              "pascalCase"
                            ]
                          },
                          "ignore": { "type": "array", "uniqueItems": true },
                          "multipleFileExtensions": { "type": "boolean" }
                        },
                        "additionalProperties": false
                      },
                      {
                        "properties": {
                          "cases": {
                            "properties": {
                              "camelCase": { "type": "boolean" },
                              "snakeCase": { "type": "boolean" },
                              "kebabCase": { "type": "boolean" },
                              "pascalCase": { "type": "boolean" }
                            },
                            "additionalProperties": false
                          },
                          "ignore": { "type": "array", "uniqueItems": true },
                          "multipleFileExtensions": { "type": "boolean" }
                        },
                        "additionalProperties": false
                      }
                    ]
                  }
                ],
                "type": "suggestion",
                "docs": {
                  "description": "Enforce a case style for filenames.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/filename-case.md"
                },
                "defaultOptions": [],
                "messages": {
                  "filename-case": "Filename is not in {{chosenCases}}. Rename it to {{renamedFilenames}}.",
                  "filename-extension": "File extension `{{extension}}` is not in lowercase. Rename it to `{{filename}}`."
                }
              }
            },
            "import-style": {
              "meta": {
                "schema": {
                  "type": "array",
                  "additionalItems": false,
                  "items": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "checkImport": { "type": "boolean" },
                        "checkDynamicImport": { "type": "boolean" },
                        "checkExportFrom": { "type": "boolean" },
                        "checkRequire": { "type": "boolean" },
                        "extendDefaultStyles": { "type": "boolean" },
                        "styles": { "$ref": "#/definitions/moduleStyles" }
                      }
                    }
                  ],
                  "definitions": {
                    "moduleStyles": {
                      "type": "object",
                      "additionalProperties": { "$ref": "#/definitions/styles" }
                    },
                    "styles": {
                      "anyOf": [
                        { "enum": [false] },
                        { "$ref": "#/definitions/booleanObject" }
                      ]
                    },
                    "booleanObject": {
                      "type": "object",
                      "additionalProperties": { "type": "boolean" }
                    }
                  }
                },
                "type": "problem",
                "docs": {
                  "description": "Enforce specific import styles per module.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/import-style.md"
                },
                "defaultOptions": [{}],
                "messages": {
                  "importStyle": "Use {{allowedStyles}} import for module `{{moduleName}}`."
                }
              }
            },
            "new-for-builtins": {
              "meta": {
                "schema": [],
                "type": "suggestion",
                "docs": {
                  "description": "Enforce the use of `new` for all builtins, except `String`, `Number`, `Boolean`, `Symbol` and `BigInt`.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/new-for-builtins.md"
                },
                "fixable": "code",
                "hasSuggestions": true,
                "messages": {
                  "enforce": "Use `new {{name}}()` instead of `{{name}}()`.",
                  "disallow": "Use `{{name}}()` instead of `new {{name}}()`.",
                  "error-date": "Use `String(new Date())` instead of `Date()`.",
                  "suggestion-date": "Switch to `String(new Date())`."
                }
              }
            },
            "no-abusive-eslint-disable": {
              "meta": {
                "schema": [],
                "type": "suggestion",
                "docs": {
                  "description": "Enforce specifying rules to disable in `eslint-disable` comments.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-abusive-eslint-disable.md"
                },
                "messages": {
                  "no-abusive-eslint-disable": "Specify the rules you want to disable."
                }
              }
            },
            "no-accessor-recursion": {
              "meta": {
                "schema": [],
                "type": "problem",
                "docs": {
                  "description": "Disallow recursive access to `this` within getters and setters.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-accessor-recursion.md"
                },
                "defaultOptions": [],
                "messages": {
                  "no-accessor-recursion/error": "Disallow recursive access to `this` within {{kind}}ters."
                }
              }
            },
            "no-anonymous-default-export": {
              "meta": {
                "schema": [],
                "type": "suggestion",
                "docs": {
                  "description": "Disallow anonymous functions and classes as the default export.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-anonymous-default-export.md"
                },
                "hasSuggestions": true,
                "messages": {
                  "no-anonymous-default-export/error": "The {{description}} should be named.",
                  "no-anonymous-default-export/suggestion": "Name it as `{{name}}`."
                }
              }
            },
            "no-array-callback-reference": {
              "meta": {
                "schema": [],
                "type": "problem",
                "docs": {
                  "description": "Prevent passing a function reference directly to iterator methods.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-array-callback-reference.md"
                },
                "hasSuggestions": true,
                "messages": {
                  "error-with-name": "Do not pass function `{{name}}` directly to `.{{method}}(…)`.",
                  "error-without-name": "Do not pass function directly to `.{{method}}(…)`.",
                  "replace-with-name": "Replace function `{{name}}` with `… => {{name}}({{parameters}})`.",
                  "replace-without-name": "Replace function with `… => …({{parameters}})`."
                }
              }
            },
            "no-array-for-each": {
              "meta": {
                "schema": [],
                "type": "suggestion",
                "docs": {
                  "description": "Prefer `for…of` over the `forEach` method.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-array-for-each.md"
                },
                "fixable": "code",
                "hasSuggestions": true,
                "messages": {
                  "no-array-for-each/error": "Use `for…of` instead of `.forEach(…)`.",
                  "no-array-for-each/suggestion": "Switch to `for…of`."
                }
              }
            },
            "no-array-method-this-argument": {
              "meta": {
                "schema": [],
                "type": "suggestion",
                "docs": {
                  "description": "Disallow using the `this` argument in array methods.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-array-method-this-argument.md"
                },
                "fixable": "code",
                "hasSuggestions": true,
                "messages": {
                  "error-prototype-method": "Do not use the `this` argument in `Array#{{method}}()`.",
                  "error-static-method": "Do not use the `this` argument in `Array.{{method}}()`.",
                  "suggestion-remove": "Remove this argument.",
                  "suggestion-bind": "Use a bound function."
                }
              }
            },
            "no-array-reduce": {
              "meta": {
                "schema": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "allowSimpleOperations": { "type": "boolean" }
                    }
                  }
                ],
                "type": "suggestion",
                "docs": {
                  "description": "Disallow `Array#reduce()` and `Array#reduceRight()`.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-array-reduce.md"
                },
                "defaultOptions": [{ "allowSimpleOperations": true }],
                "messages": {
                  "reduce": "`Array#reduce()` is not allowed. Prefer other types of loop for readability.",
                  "reduceRight": "`Array#reduceRight()` is not allowed. Prefer other types of loop for readability. You may want to call `Array#toReversed()` before looping it."
                }
              }
            },
            "no-await-expression-member": {
              "meta": {
                "schema": [],
                "type": "suggestion",
                "docs": {
                  "description": "Disallow member access from await expression.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-await-expression-member.md"
                },
                "fixable": "code",
                "messages": {
                  "no-await-expression-member": "Do not access a member directly from an await expression."
                }
              }
            },
            "no-await-in-promise-methods": {
              "meta": {
                "schema": [],
                "type": "suggestion",
                "docs": {
                  "description": "Disallow using `await` in `Promise` method parameters.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-await-in-promise-methods.md"
                },
                "hasSuggestions": true,
                "messages": {
                  "no-await-in-promise-methods/error": "Promise in `Promise.{{method}}()` should not be awaited.",
                  "no-await-in-promise-methods/suggestion": "Remove `await`."
                }
              }
            },
            "no-console-spaces": {
              "meta": {
                "schema": [],
                "type": "suggestion",
                "docs": {
                  "description": "Do not use leading/trailing space between `console.log` parameters.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-console-spaces.md"
                },
                "fixable": "code",
                "messages": {
                  "no-console-spaces": "Do not use {{position}} space between `console.{{method}}` parameters."
                }
              }
            },
            "no-document-cookie": {
              "meta": {
                "schema": [],
                "type": "problem",
                "docs": {
                  "description": "Do not use `document.cookie` directly.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-document-cookie.md"
                },
                "messages": {
                  "no-document-cookie": "Do not use `document.cookie` directly."
                }
              }
            },
            "no-empty-file": {
              "meta": {
                "schema": [],
                "type": "suggestion",
                "docs": {
                  "description": "Disallow empty files.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-empty-file.md"
                },
                "messages": { "no-empty-file": "Empty files are not allowed." }
              }
            },
            "no-for-loop": {
              "meta": {
                "schema": [],
                "type": "suggestion",
                "docs": {
                  "description": "Do not use a `for` loop that can be replaced with a `for-of` loop.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-for-loop.md"
                },
                "fixable": "code",
                "hasSuggestions": true,
                "messages": {
                  "no-for-loop": "Use a `for-of` loop instead of this `for` loop."
                }
              }
            },
            "no-hex-escape": {
              "meta": {
                "schema": [],
                "type": "suggestion",
                "docs": {
                  "description": "Enforce the use of Unicode escapes instead of hexadecimal escapes.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-hex-escape.md"
                },
                "fixable": "code",
                "messages": {
                  "no-hex-escape": "Use Unicode escapes instead of hexadecimal escapes."
                }
              }
            },
            "no-instanceof-builtins": {
              "meta": {
                "schema": [
                  {
                    "type": "object",
                    "properties": {
                      "useErrorIsError": { "type": "boolean" },
                      "strategy": { "enum": ["loose", "strict"] },
                      "include": {
                        "type": "array",
                        "items": { "type": "string" }
                      },
                      "exclude": {
                        "type": "array",
                        "items": { "type": "string" }
                      }
                    },
                    "additionalProperties": false
                  }
                ],
                "type": "problem",
                "docs": {
                  "description": "Disallow `instanceof` with built-in objects",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-instanceof-builtins.md"
                },
                "fixable": "code",
                "defaultOptions": [
                  {
                    "useErrorIsError": false,
                    "strategy": "loose",
                    "include": [],
                    "exclude": []
                  }
                ],
                "hasSuggestions": true,
                "messages": {
                  "no-instanceof-builtins": "Avoid using `instanceof` for type checking as it can lead to unreliable results.",
                  "switch-to-type-of": "Switch to `typeof … === '{{type}}'`."
                }
              }
            },
            "no-invalid-fetch-options": {
              "meta": {
                "schema": [],
                "type": "problem",
                "docs": {
                  "description": "Disallow invalid options in `fetch()` and `new Request()`.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-invalid-fetch-options.md"
                },
                "messages": {
                  "no-invalid-fetch-options": "\"body\" is not allowed when method is \"{{method}}\"."
                }
              }
            },
            "no-invalid-remove-event-listener": {
              "meta": {
                "schema": [],
                "type": "problem",
                "docs": {
                  "description": "Prevent calling `EventTarget#removeEventListener()` with the result of an expression.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-invalid-remove-event-listener.md"
                },
                "messages": {
                  "no-invalid-remove-event-listener": "The listener argument should be a function reference."
                }
              }
            },
            "no-keyword-prefix": {
              "meta": {
                "schema": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "disallowedPrefixes": {
                        "type": "array",
                        "items": [{ "type": "string" }],
                        "minItems": 0,
                        "uniqueItems": true
                      },
                      "checkProperties": { "type": "boolean" },
                      "onlyCamelCase": { "type": "boolean" }
                    }
                  }
                ],
                "type": "suggestion",
                "docs": {
                  "description": "Disallow identifiers starting with `new` or `class`.",
                  "recommended": false,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-keyword-prefix.md"
                },
                "defaultOptions": [{}],
                "messages": {
                  "noKeywordPrefix": "Do not prefix identifiers with keyword `{{keyword}}`."
                }
              }
            },
            "no-lonely-if": {
              "meta": {
                "schema": [],
                "type": "suggestion",
                "docs": {
                  "description": "Disallow `if` statements as the only statement in `if` blocks without `else`.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-lonely-if.md"
                },
                "fixable": "code",
                "messages": {
                  "no-lonely-if": "Unexpected `if` as the only statement in a `if` block without `else`."
                }
              }
            },
            "no-magic-array-flat-depth": {
              "meta": {
                "schema": [],
                "type": "suggestion",
                "docs": {
                  "description": "Disallow a magic number as the `depth` argument in `Array#flat(…).`",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-magic-array-flat-depth.md"
                },
                "messages": {
                  "no-magic-array-flat-depth": "Magic number as depth is not allowed."
                }
              }
            },
            "no-named-default": {
              "meta": {
                "schema": [],
                "type": "suggestion",
                "docs": {
                  "description": "Disallow named usage of default import and export.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-named-default.md"
                },
                "fixable": "code",
                "messages": {
                  "no-named-default": "Prefer using the default {{type}} over named {{type}}."
                }
              }
            },
            "no-negated-condition": {
              "meta": {
                "schema": [],
                "type": "suggestion",
                "docs": {
                  "description": "Disallow negated conditions.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-negated-condition.md"
                },
                "fixable": "code",
                "messages": {
                  "no-negated-condition": "Unexpected negated condition."
                }
              }
            },
            "no-negation-in-equality-check": {
              "meta": {
                "schema": [],
                "type": "problem",
                "docs": {
                  "description": "Disallow negated expression in equality check.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-negation-in-equality-check.md"
                },
                "hasSuggestions": true,
                "messages": {
                  "no-negation-in-equality-check/error": "Negated expression is not allowed in equality check.",
                  "no-negation-in-equality-check/suggestion": "Switch to '{{operator}}' check."
                }
              }
            },
            "no-nested-ternary": {
              "meta": {
                "schema": [],
                "type": "suggestion",
                "docs": {
                  "description": "Disallow nested ternary expressions.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-nested-ternary.md"
                },
                "fixable": "code",
                "messages": {
                  "too-deep": "Do not nest ternary expressions.",
                  "should-parenthesized": "Nest ternary expression should be parenthesized."
                }
              }
            },
            "no-new-array": {
              "meta": {
                "schema": [],
                "type": "suggestion",
                "docs": {
                  "description": "Disallow `new Array()`.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-new-array.md"
                },
                "fixable": "code",
                "hasSuggestions": true,
                "messages": {
                  "error": "`new Array()` is unclear in intent; use either `[x]` or `Array.from({length: x})`",
                  "array-length": "The argument is the length of array.",
                  "only-element": "The argument is the only element of array.",
                  "spread": "Spread the argument."
                }
              }
            },
            "no-new-buffer": {
              "meta": {
                "schema": [],
                "type": "problem",
                "docs": {
                  "description": "Enforce the use of `Buffer.from()` and `Buffer.alloc()` instead of the deprecated `new Buffer()`.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-new-buffer.md"
                },
                "fixable": "code",
                "hasSuggestions": true,
                "messages": {
                  "error": "`new Buffer()` is deprecated, use `Buffer.{{method}}()` instead.",
                  "error-unknown": "`new Buffer()` is deprecated, use `Buffer.alloc()` or `Buffer.from()` instead.",
                  "suggestion": "Switch to `Buffer.{{replacement}}()`."
                }
              }
            },
            "no-null": {
              "meta": {
                "schema": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "checkStrictEquality": { "type": "boolean" }
                    }
                  }
                ],
                "type": "suggestion",
                "docs": {
                  "description": "Disallow the use of the `null` literal.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-null.md"
                },
                "fixable": "code",
                "hasSuggestions": true,
                "defaultOptions": [{ "checkStrictEquality": false }],
                "messages": {
                  "error": "Use `undefined` instead of `null`.",
                  "replace": "Replace `null` with `undefined`.",
                  "remove": "Remove `null`."
                }
              }
            },
            "no-object-as-default-parameter": {
              "meta": {
                "schema": [],
                "type": "problem",
                "docs": {
                  "description": "Disallow the use of objects as default parameters.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-object-as-default-parameter.md"
                },
                "messages": {
                  "identifier": "Do not use an object literal as default for parameter `{{parameter}}`.",
                  "non-identifier": "Do not use an object literal as default."
                }
              }
            },
            "no-process-exit": {
              "meta": {
                "schema": [],
                "type": "suggestion",
                "docs": {
                  "description": "Disallow `process.exit()`.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-process-exit.md"
                },
                "messages": {
                  "no-process-exit": "Only use `process.exit()` in CLI apps. Throw an error instead."
                }
              }
            },
            "no-single-promise-in-promise-methods": {
              "meta": {
                "schema": [],
                "type": "suggestion",
                "docs": {
                  "description": "Disallow passing single-element arrays to `Promise` methods.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-single-promise-in-promise-methods.md"
                },
                "fixable": "code",
                "hasSuggestions": true,
                "messages": {
                  "no-single-promise-in-promise-methods/error": "Wrapping single-element array with `Promise.{{method}}()` is unnecessary.",
                  "no-single-promise-in-promise-methods/unwrap": "Use the value directly.",
                  "no-single-promise-in-promise-methods/use-promise-resolve": "Switch to `Promise.resolve(…)`."
                }
              }
            },
            "no-static-only-class": {
              "meta": {
                "schema": [],
                "type": "suggestion",
                "docs": {
                  "description": "Disallow classes that only have static members.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-static-only-class.md"
                },
                "fixable": "code",
                "messages": {
                  "no-static-only-class": "Use an object instead of a class with only static members."
                }
              }
            },
            "no-thenable": {
              "meta": {
                "schema": [],
                "type": "problem",
                "docs": {
                  "description": "Disallow `then` property.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-thenable.md"
                },
                "messages": {
                  "no-thenable-object": "Do not add `then` to an object.",
                  "no-thenable-export": "Do not export `then`.",
                  "no-thenable-class": "Do not add `then` to a class."
                }
              }
            },
            "no-this-assignment": {
              "meta": {
                "schema": [],
                "type": "suggestion",
                "docs": {
                  "description": "Disallow assigning `this` to a variable.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-this-assignment.md"
                },
                "messages": {
                  "no-this-assignment": "Do not assign `this` to `{{name}}`."
                }
              }
            },
            "no-typeof-undefined": {
              "meta": {
                "schema": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "checkGlobalVariables": { "type": "boolean" }
                    }
                  }
                ],
                "type": "suggestion",
                "docs": {
                  "description": "Disallow comparing `undefined` using `typeof`.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-typeof-undefined.md"
                },
                "fixable": "code",
                "hasSuggestions": true,
                "defaultOptions": [{ "checkGlobalVariables": false }],
                "messages": {
                  "no-typeof-undefined/error": "Compare with `undefined` directly instead of using `typeof`.",
                  "no-typeof-undefined/suggestion": "Switch to `… {{operator}} undefined`."
                }
              }
            },
            "no-unnecessary-array-flat-depth": {
              "meta": {
                "schema": [],
                "type": "suggestion",
                "docs": {
                  "description": "Disallow using `1` as the `depth` argument of `Array#flat()`.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-unnecessary-array-flat-depth.md"
                },
                "fixable": "code",
                "messages": {
                  "no-unnecessary-array-flat-depth": "Passing `1` as the `depth` argument is unnecessary."
                }
              }
            },
            "no-unnecessary-array-splice-count": {
              "meta": {
                "schema": [],
                "type": "suggestion",
                "docs": {
                  "description": "Disallow using `.length` or `Infinity` as the `deleteCount` or `skipCount` argument of `Array#{splice,toSpliced}()`.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-unnecessary-array-splice-count.md"
                },
                "fixable": "code",
                "messages": {
                  "no-unnecessary-array-splice-count": "Passing `{{description}}` as the `{{argumentName}}` argument is unnecessary."
                }
              }
            },
            "no-unnecessary-await": {
              "meta": {
                "schema": [],
                "type": "suggestion",
                "docs": {
                  "description": "Disallow awaiting non-promise values.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-unnecessary-await.md"
                },
                "fixable": "code",
                "messages": {
                  "no-unnecessary-await": "Do not `await` non-promise value."
                }
              }
            },
            "no-unnecessary-polyfills": {
              "meta": {
                "schema": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "required": ["targets"],
                    "properties": {
                      "targets": {
                        "oneOf": [
                          { "type": "string" },
                          { "type": "array" },
                          { "type": "object" }
                        ]
                      }
                    }
                  }
                ],
                "type": "suggestion",
                "docs": {
                  "description": "Enforce the use of built-in methods instead of unnecessary polyfills.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-unnecessary-polyfills.md"
                },
                "defaultOptions": [],
                "messages": {
                  "unnecessaryPolyfill": "Use built-in instead.",
                  "unnecessaryCoreJsModule": "All polyfilled features imported from `{{coreJsModule}}` are available as built-ins. Use the built-ins instead."
                }
              }
            },
            "no-unnecessary-slice-end": {
              "meta": {
                "schema": [],
                "type": "suggestion",
                "docs": {
                  "description": "Disallow using `.length` or `Infinity` as the `end` argument of `{Array,String,TypedArray}#slice()`.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-unnecessary-slice-end.md"
                },
                "fixable": "code",
                "messages": {
                  "no-unnecessary-slice-end": "Passing `{{description}}` as the `end` argument is unnecessary."
                }
              }
            },
            "no-unreadable-array-destructuring": {
              "meta": {
                "schema": [],
                "type": "suggestion",
                "docs": {
                  "description": "Disallow unreadable array destructuring.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-unreadable-array-destructuring.md"
                },
                "fixable": "code",
                "messages": {
                  "no-unreadable-array-destructuring": "Array destructuring may not contain consecutive ignored values."
                }
              }
            },
            "no-unreadable-iife": {
              "meta": {
                "schema": [],
                "type": "suggestion",
                "docs": {
                  "description": "Disallow unreadable IIFEs.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-unreadable-iife.md"
                },
                "hasSuggestions": false,
                "messages": {
                  "no-unreadable-iife": "IIFE with parenthesized arrow function body is considered unreadable."
                }
              }
            },
            "no-unused-properties": {
              "meta": {
                "schema": [],
                "type": "suggestion",
                "docs": {
                  "description": "Disallow unused object properties.",
                  "recommended": false,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-unused-properties.md"
                },
                "messages": {
                  "no-unused-properties": "Property `{{name}}` is defined but never used."
                }
              }
            },
            "no-useless-fallback-in-spread": {
              "meta": {
                "schema": [],
                "type": "suggestion",
                "docs": {
                  "description": "Disallow useless fallback when spreading in object literals.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-useless-fallback-in-spread.md"
                },
                "fixable": "code",
                "messages": {
                  "no-useless-fallback-in-spread": "The empty object is useless."
                }
              }
            },
            "no-useless-length-check": {
              "meta": {
                "schema": [],
                "type": "suggestion",
                "docs": {
                  "description": "Disallow useless array length check.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-useless-length-check.md"
                },
                "fixable": "code",
                "messages": {
                  "non-zero": "The non-empty check is useless as `Array#some()` returns `false` for an empty array.",
                  "zero": "The empty check is useless as `Array#every()` returns `true` for an empty array."
                }
              }
            },
            "no-useless-promise-resolve-reject": {
              "meta": {
                "schema": [],
                "type": "suggestion",
                "docs": {
                  "description": "Disallow returning/yielding `Promise.resolve/reject()` in async functions or promise callbacks",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-useless-promise-resolve-reject.md"
                },
                "fixable": "code",
                "messages": {
                  "resolve": "Prefer `{{type}} value` over `{{type}} Promise.resolve(value)`.",
                  "reject": "Prefer `throw error` over `{{type}} Promise.reject(error)`."
                }
              }
            },
            "no-useless-spread": {
              "meta": {
                "schema": [],
                "type": "suggestion",
                "docs": {
                  "description": "Disallow unnecessary spread.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-useless-spread.md"
                },
                "fixable": "code",
                "messages": {
                  "spread-in-list": "Spread an {{argumentType}} literal in {{parentDescription}} is unnecessary.",
                  "iterable-to-array": "`{{parentDescription}}` accepts iterable as argument, it's unnecessary to convert to an array.",
                  "iterable-to-array-in-for-of": "`for…of` can iterate over iterable, it's unnecessary to convert to an array.",
                  "iterable-to-array-in-yield-star": "`yield*` can delegate iterable, it's unnecessary to convert to an array.",
                  "clone-array": "Unnecessarily cloning an array."
                }
              }
            },
            "no-useless-switch-case": {
              "meta": {
                "schema": [],
                "type": "suggestion",
                "docs": {
                  "description": "Disallow useless case in switch statements.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-useless-switch-case.md"
                },
                "hasSuggestions": true,
                "messages": {
                  "no-useless-switch-case/error": "Useless case in switch statement.",
                  "no-useless-switch-case/suggestion": "Remove this case."
                }
              }
            },
            "no-useless-undefined": {
              "meta": {
                "schema": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "checkArguments": { "type": "boolean" },
                      "checkArrowFunctionBody": { "type": "boolean" }
                    }
                  }
                ],
                "type": "suggestion",
                "docs": {
                  "description": "Disallow useless `undefined`.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-useless-undefined.md"
                },
                "fixable": "code",
                "defaultOptions": [{}],
                "messages": {
                  "no-useless-undefined": "Do not use useless `undefined`."
                }
              }
            },
            "no-zero-fractions": {
              "meta": {
                "schema": [],
                "type": "suggestion",
                "docs": {
                  "description": "Disallow number literals with zero fractions or dangling dots.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/no-zero-fractions.md"
                },
                "fixable": "code",
                "messages": {
                  "zero-fraction": "Don't use a zero fraction in the number.",
                  "dangling-dot": "Don't use a dangling dot in the number."
                }
              }
            },
            "number-literal-case": {
              "meta": {
                "schema": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "hexadecimalValue": { "enum": ["uppercase", "lowercase"] }
                    }
                  }
                ],
                "type": "suggestion",
                "docs": {
                  "description": "Enforce proper case for numeric literals.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/number-literal-case.md"
                },
                "fixable": "code",
                "defaultOptions": [{ "hexadecimalValue": "uppercase" }],
                "messages": {
                  "number-literal-case": "Invalid number literal casing."
                }
              }
            },
            "numeric-separators-style": {
              "meta": {
                "schema": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "binary": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "onlyIfContainsSeparator": { "type": "boolean" },
                          "minimumDigits": { "type": "integer", "minimum": 0 },
                          "groupLength": { "type": "integer", "minimum": 1 }
                        }
                      },
                      "octal": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "onlyIfContainsSeparator": { "type": "boolean" },
                          "minimumDigits": { "type": "integer", "minimum": 0 },
                          "groupLength": { "type": "integer", "minimum": 1 }
                        }
                      },
                      "hexadecimal": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "onlyIfContainsSeparator": { "type": "boolean" },
                          "minimumDigits": { "type": "integer", "minimum": 0 },
                          "groupLength": { "type": "integer", "minimum": 1 }
                        }
                      },
                      "number": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "onlyIfContainsSeparator": { "type": "boolean" },
                          "minimumDigits": { "type": "integer", "minimum": 0 },
                          "groupLength": { "type": "integer", "minimum": 1 }
                        }
                      },
                      "onlyIfContainsSeparator": { "type": "boolean" }
                    }
                  }
                ],
                "type": "suggestion",
                "docs": {
                  "description": "Enforce the style of numeric separators by correctly grouping digits.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/numeric-separators-style.md"
                },
                "fixable": "code",
                "defaultOptions": [
                  {
                    "onlyIfContainsSeparator": false,
                    "binary": { "minimumDigits": 0, "groupLength": 4 },
                    "octal": { "minimumDigits": 0, "groupLength": 4 },
                    "hexadecimal": { "minimumDigits": 0, "groupLength": 2 },
                    "number": { "minimumDigits": 5, "groupLength": 3 }
                  }
                ],
                "messages": {
                  "numeric-separators-style": "Invalid group length in numeric value."
                }
              }
            },
            "prefer-add-event-listener": {
              "meta": {
                "schema": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "excludedPackages": {
                        "type": "array",
                        "items": { "type": "string" },
                        "uniqueItems": true
                      }
                    }
                  }
                ],
                "type": "suggestion",
                "docs": {
                  "description": "Prefer `.addEventListener()` and `.removeEventListener()` over `on`-functions.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-add-event-listener.md"
                },
                "fixable": "code",
                "defaultOptions": [{}],
                "messages": {
                  "prefer-add-event-listener": "Prefer `{{replacement}}` over `{{method}}`.{{extra}}"
                }
              }
            },
            "prefer-array-find": {
              "meta": {
                "schema": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": { "checkFromLast": { "type": "boolean" } }
                  }
                ],
                "type": "suggestion",
                "docs": {
                  "description": "Prefer `.find(…)` and `.findLast(…)` over the first or last element from `.filter(…)`.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-array-find.md"
                },
                "fixable": "code",
                "hasSuggestions": true,
                "defaultOptions": [{ "checkFromLast": true }],
                "messages": {
                  "error-variable": "Prefer `.find(…)` over `.filter(…)`.",
                  "error-zero-index": "Prefer `.find(…)` over `.filter(…)[0]`.",
                  "error-at-zero": "Prefer `.find(…)` over `.filter(…).at(0)`.",
                  "error-shift": "Prefer `.find(…)` over `.filter(…).shift()`.",
                  "error-pop": "Prefer `.findLast(…)` over `.filter(…).pop()`.",
                  "error-at-minus-one": "Prefer `.findLast(…)` over `.filter(…).at(-1)`.",
                  "error-destructuring-declaration": "Prefer `.find(…)` over destructuring `.filter(…)`.",
                  "error-destructuring-assignment": "Prefer `.find(…)` over destructuring `.filter(…)`.",
                  "suggest-nullish-coalescing-operator": "Replace `.filter(…)` with `.find(…) ?? …`.",
                  "suggest-logical-or-operator": "Replace `.filter(…)` with `.find(…) || …`."
                }
              }
            },
            "prefer-array-flat-map": {
              "meta": {
                "schema": [],
                "type": "suggestion",
                "docs": {
                  "description": "Prefer `.flatMap(…)` over `.map(…).flat()`.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-array-flat-map.md"
                },
                "fixable": "code",
                "messages": {
                  "prefer-array-flat-map": "Prefer `.flatMap(…)` over `.map(…).flat()`."
                }
              }
            },
            "prefer-array-flat": {
              "meta": {
                "schema": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "functions": { "type": "array", "uniqueItems": true }
                    }
                  }
                ],
                "type": "suggestion",
                "docs": {
                  "description": "Prefer `Array#flat()` over legacy techniques to flatten arrays.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-array-flat.md"
                },
                "fixable": "code",
                "defaultOptions": [{}],
                "messages": {
                  "prefer-array-flat": "Prefer `Array#flat()` over `{{description}}` to flatten an array."
                }
              }
            },
            "prefer-array-index-of": {
              "meta": {
                "schema": [],
                "type": "suggestion",
                "docs": {
                  "description": "Prefer `Array#{indexOf,lastIndexOf}()` over `Array#{findIndex,findLastIndex}()` when looking for the index of an item.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-array-index-of.md"
                },
                "fixable": "code",
                "hasSuggestions": true,
                "messages": {
                  "prefer-indexOf-over-findIndex/error": "Use `.indexOf()` instead of `.findIndex()` when looking for the index of an item.",
                  "prefer-indexOf-over-findIndex/suggestion": "Replace `.findIndex()` with `.indexOf()`.",
                  "prefer-lastIndexOf-over-findLastIndex/error": "Use `.lastIndexOf()` instead of `findLastIndex() when looking for the index of an item.`",
                  "prefer-lastIndexOf-over-findLastIndex/suggestion": "Replace `.findLastIndex()` with `.lastIndexOf()`."
                }
              }
            },
            "prefer-array-some": {
              "meta": {
                "schema": [],
                "type": "suggestion",
                "docs": {
                  "description": "Prefer `.some(…)` over `.filter(…).length` check and `.{find,findLast,findIndex,findLastIndex}(…)`.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-array-some.md"
                },
                "fixable": "code",
                "messages": {
                  "some": "Prefer `.some(…)` over `.{{method}}(…)`.",
                  "some-suggestion": "Replace `.{{method}}(…)` with `.some(…)`.",
                  "filter": "Prefer `.some(…)` over non-zero length check from `.filter(…)`."
                },
                "hasSuggestions": true
              }
            },
            "prefer-at": {
              "meta": {
                "schema": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "getLastElementFunctions": {
                        "type": "array",
                        "uniqueItems": true
                      },
                      "checkAllIndexAccess": { "type": "boolean" }
                    }
                  }
                ],
                "type": "suggestion",
                "docs": {
                  "description": "Prefer `.at()` method for index access and `String#charAt()`.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-at.md"
                },
                "fixable": "code",
                "hasSuggestions": true,
                "defaultOptions": [
                  {
                    "getLastElementFunctions": [],
                    "checkAllIndexAccess": false
                  }
                ],
                "messages": {
                  "negative-index": "Prefer `.at(…)` over `[….length - index]`.",
                  "index": "Prefer `.at(…)` over index access.",
                  "string-char-at-negative": "Prefer `String#at(…)` over `String#charAt(….length - index)`.",
                  "string-char-at": "Prefer `String#at(…)` over `String#charAt(…)`.",
                  "slice": "Prefer `.at(…)` over the first element from `.slice(…)`.",
                  "get-last-function": "Prefer `.at(-1)` over `{{description}}(…)` to get the last element.",
                  "use-at": "Use `.at(…)`."
                }
              }
            },
            "prefer-blob-reading-methods": {
              "meta": {
                "schema": [],
                "type": "suggestion",
                "docs": {
                  "description": "Prefer `Blob#arrayBuffer()` over `FileReader#readAsArrayBuffer(…)` and `Blob#text()` over `FileReader#readAsText(…)`.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-blob-reading-methods.md"
                },
                "messages": {
                  "error": "Prefer `Blob#{{replacement}}()` over `FileReader#{{method}}(blob)`."
                }
              }
            },
            "prefer-code-point": {
              "meta": {
                "schema": [],
                "type": "suggestion",
                "docs": {
                  "description": "Prefer `String#codePointAt(…)` over `String#charCodeAt(…)` and `String.fromCodePoint(…)` over `String.fromCharCode(…)`.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-code-point.md"
                },
                "hasSuggestions": true,
                "messages": {
                  "error/charCodeAt": "Prefer `String#codePointAt()` over `String#charCodeAt()`.",
                  "error/fromCharCode": "Prefer `String.fromCodePoint()` over `String.fromCharCode()`.",
                  "suggestion/codePointAt": "Use `String#codePointAt()`.",
                  "suggestion/fromCodePoint": "Use `String.fromCodePoint()`."
                }
              }
            },
            "prefer-date-now": {
              "meta": {
                "schema": [],
                "type": "suggestion",
                "docs": {
                  "description": "Prefer `Date.now()` to get the number of milliseconds since the Unix Epoch.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-date-now.md"
                },
                "fixable": "code",
                "messages": {
                  "prefer-date": "Prefer `Date.now()` over `new Date()`.",
                  "prefer-date-now-over-methods": "Prefer `Date.now()` over `Date#{{method}}()`.",
                  "prefer-date-now-over-number-data-object": "Prefer `Date.now()` over `Number(new Date())`."
                }
              }
            },
            "prefer-default-parameters": {
              "meta": {
                "schema": [],
                "type": "suggestion",
                "docs": {
                  "description": "Prefer default parameters over reassignment.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-default-parameters.md"
                },
                "fixable": "code",
                "hasSuggestions": true,
                "messages": {
                  "preferDefaultParameters": "Prefer default parameters over reassignment.",
                  "preferDefaultParametersSuggest": "Replace reassignment with default parameter."
                }
              }
            },
            "prefer-dom-node-append": {
              "meta": {
                "schema": [],
                "type": "suggestion",
                "docs": {
                  "description": "Prefer `Node#append()` over `Node#appendChild()`.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-dom-node-append.md"
                },
                "fixable": "code",
                "messages": {
                  "prefer-dom-node-append": "Prefer `Node#append()` over `Node#appendChild()`."
                }
              }
            },
            "prefer-dom-node-dataset": {
              "meta": {
                "schema": [],
                "type": "suggestion",
                "docs": {
                  "description": "Prefer using `.dataset` on DOM elements over calling attribute methods.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-dom-node-dataset.md"
                },
                "fixable": "code",
                "messages": {
                  "prefer-dom-node-dataset": "Prefer `.dataset` over `{{method}}(…)`."
                }
              }
            },
            "prefer-dom-node-remove": {
              "meta": {
                "schema": [],
                "type": "suggestion",
                "docs": {
                  "description": "Prefer `childNode.remove()` over `parentNode.removeChild(childNode)`.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-dom-node-remove.md"
                },
                "fixable": "code",
                "hasSuggestions": true,
                "messages": {
                  "error": "Prefer `childNode.remove()` over `parentNode.removeChild(childNode)`.",
                  "suggestion": "Replace `parentNode.removeChild(childNode)` with `childNode{{dotOrQuestionDot}}remove()`."
                }
              }
            },
            "prefer-dom-node-text-content": {
              "meta": {
                "schema": [],
                "type": "suggestion",
                "docs": {
                  "description": "Prefer `.textContent` over `.innerText`.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-dom-node-text-content.md"
                },
                "hasSuggestions": true,
                "messages": {
                  "error": "Prefer `.textContent` over `.innerText`.",
                  "suggestion": "Switch to `.textContent`."
                }
              }
            },
            "prefer-event-target": {
              "meta": {
                "schema": [],
                "type": "suggestion",
                "docs": {
                  "description": "Prefer `EventTarget` over `EventEmitter`.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-event-target.md"
                },
                "messages": {
                  "prefer-event-target": "Prefer `EventTarget` over `EventEmitter`."
                }
              }
            },
            "prefer-export-from": {
              "meta": {
                "schema": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "ignoreUsedVariables": { "type": "boolean" }
                    }
                  }
                ],
                "type": "suggestion",
                "docs": {
                  "description": "Prefer `export…from` when re-exporting.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-export-from.md"
                },
                "fixable": "code",
                "hasSuggestions": true,
                "defaultOptions": [{ "ignoreUsedVariables": false }],
                "messages": {
                  "error": "Use `export…from` to re-export `{{exported}}`.",
                  "suggestion": "Switch to `export…from`."
                }
              }
            },
            "prefer-global-this": {
              "meta": {
                "schema": [],
                "type": "suggestion",
                "docs": {
                  "description": "Prefer `globalThis` over `window`, `self`, and `global`.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-global-this.md"
                },
                "fixable": "code",
                "hasSuggestions": false,
                "messages": {
                  "prefer-global-this/error": "Prefer `{{replacement}}` over `{{value}}`."
                }
              }
            },
            "prefer-import-meta-properties": {
              "meta": {
                "schema": [],
                "type": "suggestion",
                "docs": {
                  "description": "Prefer `import.meta.{dirname,filename}` over legacy techniques for getting file paths.",
                  "recommended": false,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-import-meta-properties.md"
                },
                "fixable": "code",
                "messages": {
                  "error/calculate-dirname": "Do not construct dirname.",
                  "error/calculate-filename": "Do not construct filename using `fileURLToPath()`."
                }
              }
            },
            "prefer-includes": {
              "meta": {
                "schema": [],
                "type": "suggestion",
                "docs": {
                  "description": "Prefer `.includes()` over `.indexOf()`, `.lastIndexOf()`, and `Array#some()` when checking for existence or non-existence.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-includes.md"
                },
                "fixable": "code",
                "hasSuggestions": true,
                "messages": {
                  "prefer-includes": "Use `.includes()`, rather than `.{{method}}()`, when checking for existence.",
                  "prefer-includes-over-some/error": "Use `.includes()` instead of `.some()` when checking value existence.",
                  "prefer-includes-over-some/suggestion": "Replace `.some()` with `.includes()`."
                }
              }
            },
            "prefer-json-parse-buffer": {
              "meta": {
                "schema": [],
                "type": "suggestion",
                "docs": {
                  "description": "Prefer reading a JSON file as a buffer.",
                  "recommended": false,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-json-parse-buffer.md"
                },
                "fixable": "code",
                "messages": {
                  "prefer-json-parse-buffer": "Prefer reading the JSON file as a buffer."
                }
              }
            },
            "prefer-keyboard-event-key": {
              "meta": {
                "schema": [],
                "type": "suggestion",
                "docs": {
                  "description": "Prefer `KeyboardEvent#key` over `KeyboardEvent#keyCode`.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-keyboard-event-key.md"
                },
                "fixable": "code",
                "messages": {
                  "prefer-keyboard-event-key": "Use `.key` instead of `.{{name}}`."
                }
              }
            },
            "prefer-logical-operator-over-ternary": {
              "meta": {
                "schema": [],
                "type": "suggestion",
                "docs": {
                  "description": "Prefer using a logical operator over a ternary.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-logical-operator-over-ternary.md"
                },
                "hasSuggestions": true,
                "messages": {
                  "prefer-logical-operator-over-ternary/error": "Prefer using a logical operator over a ternary.",
                  "prefer-logical-operator-over-ternary/suggestion": "Switch to `{{operator}}` operator."
                }
              }
            },
            "prefer-math-min-max": {
              "meta": {
                "schema": [],
                "type": "problem",
                "docs": {
                  "description": "Prefer `Math.min()` and `Math.max()` over ternaries for simple comparisons.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-math-min-max.md"
                },
                "fixable": "code",
                "messages": {
                  "prefer-math-min-max": "Prefer `Math.{{method}}()` to simplify ternary expressions."
                }
              }
            },
            "prefer-math-trunc": {
              "meta": {
                "schema": [],
                "type": "suggestion",
                "docs": {
                  "description": "Enforce the use of `Math.trunc` instead of bitwise operators.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-math-trunc.md"
                },
                "fixable": "code",
                "hasSuggestions": true,
                "messages": {
                  "error-bitwise": "Use `Math.trunc` instead of `{{operator}} {{value}}`.",
                  "error-bitwise-not": "Use `Math.trunc` instead of `~~`.",
                  "suggestion-bitwise": "Replace `{{operator}} {{value}}` with `Math.trunc`."
                }
              }
            },
            "prefer-modern-dom-apis": {
              "meta": {
                "schema": [],
                "type": "suggestion",
                "docs": {
                  "description": "Prefer `.before()` over `.insertBefore()`, `.replaceWith()` over `.replaceChild()`, prefer one of `.before()`, `.after()`, `.append()` or `.prepend()` over `insertAdjacentText()` and `insertAdjacentElement()`.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-modern-dom-apis.md"
                },
                "fixable": "code",
                "messages": {
                  "replaceChildOrInsertBefore": "Prefer `{{oldChildNode}}.{{preferredMethod}}({{newChildNode}})` over `{{parentNode}}.{{method}}({{newChildNode}}, {{oldChildNode}})`.",
                  "insertAdjacentTextOrInsertAdjacentElement": "Prefer `{{reference}}.{{preferredMethod}}({{content}})` over `{{reference}}.{{method}}({{position}}, {{content}})`."
                }
              }
            },
            "prefer-modern-math-apis": {
              "meta": {
                "schema": [],
                "type": "suggestion",
                "docs": {
                  "description": "Prefer modern `Math` APIs over legacy patterns.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-modern-math-apis.md"
                },
                "fixable": "code",
                "messages": {
                  "prefer-modern-math-apis": "Prefer `{{replacement}}` over `{{description}}`."
                }
              }
            },
            "prefer-module": {
              "meta": {
                "schema": [],
                "type": "suggestion",
                "docs": {
                  "description": "Prefer JavaScript modules (ESM) over CommonJS.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-module.md"
                },
                "fixable": "code",
                "hasSuggestions": true,
                "messages": {
                  "error/use-strict-directive": "Do not use \"use strict\" directive.",
                  "error/global-return": "\"return\" should be used inside a function.",
                  "error/identifier": "Do not use \"{{name}}\".",
                  "suggestion/use-strict-directive": "Remove \"use strict\" directive.",
                  "suggestion/import-meta-dirname": "Replace `__dirname` with `import.meta.dirname`.",
                  "suggestion/import-meta-url-to-dirname": "Replace `__dirname` with `…(import.meta.url)`.",
                  "suggestion/import-meta-filename": "Replace `__filename` with `import.meta.filename`.",
                  "suggestion/import-meta-url-to-filename": "Replace `__filename` with `…(import.meta.url)`.",
                  "suggestion/import": "Switch to `import`.",
                  "suggestion/export": "Switch to `export`."
                }
              }
            },
            "prefer-native-coercion-functions": {
              "meta": {
                "schema": [],
                "type": "suggestion",
                "docs": {
                  "description": "Prefer using `String`, `Number`, `BigInt`, `Boolean`, and `Symbol` directly.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-native-coercion-functions.md"
                },
                "fixable": "code",
                "messages": {
                  "prefer-native-coercion-functions": "{{functionNameWithKind}} is equivalent to `{{replacementFunction}}`. Use `{{replacementFunction}}` directly."
                }
              }
            },
            "prefer-negative-index": {
              "meta": {
                "schema": [],
                "type": "suggestion",
                "docs": {
                  "description": "Prefer negative index over `.length - index` when possible.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-negative-index.md"
                },
                "fixable": "code",
                "messages": {
                  "prefer-negative-index": "Prefer negative index over length minus index for `{{method}}`."
                }
              }
            },
            "prefer-node-protocol": {
              "meta": {
                "schema": [],
                "type": "suggestion",
                "docs": {
                  "description": "Prefer using the `node:` protocol when importing Node.js builtin modules.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-node-protocol.md"
                },
                "fixable": "code",
                "messages": {
                  "prefer-node-protocol": "Prefer `node:{{moduleName}}` over `{{moduleName}}`."
                }
              }
            },
            "prefer-number-properties": {
              "meta": {
                "schema": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "checkInfinity": { "type": "boolean" },
                      "checkNaN": { "type": "boolean" }
                    }
                  }
                ],
                "type": "suggestion",
                "docs": {
                  "description": "Prefer `Number` static properties over global ones.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-number-properties.md"
                },
                "fixable": "code",
                "hasSuggestions": true,
                "defaultOptions": [
                  { "checkInfinity": false, "checkNaN": true }
                ],
                "messages": {
                  "error": "Prefer `Number.{{property}}` over `{{description}}`.",
                  "suggestion": "Replace `{{description}}` with `Number.{{property}}`."
                }
              }
            },
            "prefer-object-from-entries": {
              "meta": {
                "schema": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "functions": { "type": "array", "uniqueItems": true }
                    }
                  }
                ],
                "type": "suggestion",
                "docs": {
                  "description": "Prefer using `Object.fromEntries(…)` to transform a list of key-value pairs into an object.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-object-from-entries.md"
                },
                "fixable": "code",
                "defaultOptions": [{}],
                "messages": {
                  "reduce": "Prefer `Object.fromEntries()` over `Array#reduce()`.",
                  "function": "Prefer `Object.fromEntries()` over `{{functionName}}()`."
                }
              }
            },
            "prefer-optional-catch-binding": {
              "meta": {
                "schema": [],
                "type": "suggestion",
                "docs": {
                  "description": "Prefer omitting the `catch` binding parameter.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-optional-catch-binding.md"
                },
                "fixable": "code",
                "messages": {
                  "with-name": "Remove unused catch binding `{{name}}`.",
                  "without-name": "Remove unused catch binding."
                }
              }
            },
            "prefer-prototype-methods": {
              "meta": {
                "schema": [],
                "type": "suggestion",
                "docs": {
                  "description": "Prefer borrowing methods from the prototype instead of the instance.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-prototype-methods.md"
                },
                "fixable": "code",
                "messages": {
                  "known-method": "Prefer using `{{constructorName}}.prototype.{{methodName}}`.",
                  "unknown-method": "Prefer using method from `{{constructorName}}.prototype`."
                }
              }
            },
            "prefer-query-selector": {
              "meta": {
                "schema": [],
                "type": "suggestion",
                "docs": {
                  "description": "Prefer `.querySelector()` over `.getElementById()`, `.querySelectorAll()` over `.getElementsByClassName()` and `.getElementsByTagName()` and `.getElementsByName()`.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-query-selector.md"
                },
                "fixable": "code",
                "messages": {
                  "prefer-query-selector": "Prefer `.{{replacement}}()` over `.{{method}}()`."
                }
              }
            },
            "prefer-reflect-apply": {
              "meta": {
                "schema": [],
                "type": "suggestion",
                "docs": {
                  "description": "Prefer `Reflect.apply()` over `Function#apply()`.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-reflect-apply.md"
                },
                "fixable": "code",
                "messages": {
                  "prefer-reflect-apply": "Prefer `Reflect.apply()` over `Function#apply()`."
                }
              }
            },
            "prefer-regexp-test": {
              "meta": {
                "schema": [],
                "type": "suggestion",
                "docs": {
                  "description": "Prefer `RegExp#test()` over `String#match()` and `RegExp#exec()`.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-regexp-test.md"
                },
                "fixable": "code",
                "hasSuggestions": true,
                "messages": {
                  "regexp-exec": "Prefer `.test(…)` over `.exec(…)`.",
                  "string-match": "Prefer `RegExp#test(…)` over `String#match(…)`.",
                  "suggestion": "Switch to `RegExp#test(…)`."
                }
              }
            },
            "prefer-set-has": {
              "meta": {
                "schema": [],
                "type": "suggestion",
                "docs": {
                  "description": "Prefer `Set#has()` over `Array#includes()` when checking for existence or non-existence.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-set-has.md"
                },
                "fixable": "code",
                "hasSuggestions": true,
                "messages": {
                  "error": "`{{name}}` should be a `Set`, and use `{{name}}.has()` to check existence or non-existence.",
                  "suggestion": "Switch `{{name}}` to `Set`."
                }
              }
            },
            "prefer-set-size": {
              "meta": {
                "schema": [],
                "type": "suggestion",
                "docs": {
                  "description": "Prefer using `Set#size` instead of `Array#length`.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-set-size.md"
                },
                "fixable": "code",
                "messages": {
                  "prefer-set-size": "Prefer using `Set#size` instead of `Array#length`."
                }
              }
            },
            "prefer-single-call": {
              "meta": {
                "schema": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "ignore": { "type": "array", "uniqueItems": true }
                    }
                  }
                ],
                "type": "suggestion",
                "docs": {
                  "description": "Enforce combining multiple `Array#push()`, `Element#classList.{add,remove}()`, and `importScripts()` into one call.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-single-call.md"
                },
                "fixable": "code",
                "hasSuggestions": true,
                "defaultOptions": [{}],
                "messages": {
                  "error/array-push": "Do not call `{{description}}` multiple times.",
                  "suggestion": "Merge with previous one."
                }
              }
            },
            "prefer-spread": {
              "meta": {
                "schema": [],
                "type": "suggestion",
                "docs": {
                  "description": "Prefer the spread operator over `Array.from(…)`, `Array#concat(…)`, `Array#{slice,toSpliced}()` and `String#split('')`.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-spread.md"
                },
                "fixable": "code",
                "hasSuggestions": true,
                "messages": {
                  "array-from": "Prefer the spread operator over `Array.from(…)`.",
                  "array-concat": "Prefer the spread operator over `Array#concat(…)`.",
                  "array-slice": "Prefer the spread operator over `Array#slice()`.",
                  "array-to-spliced": "Prefer the spread operator over `Array#toSpliced()`.",
                  "string-split": "Prefer the spread operator over `String#split('')`.",
                  "argument-is-spreadable": "First argument is an `array`.",
                  "argument-is-not-spreadable": "First argument is not an `array`.",
                  "test-argument": "Test first argument with `Array.isArray(…)`.",
                  "spread-all-arguments": "Spread all unknown arguments`.",
                  "use-spread": "Use `...` operator."
                }
              }
            },
            "prefer-string-raw": {
              "meta": {
                "schema": [],
                "type": "suggestion",
                "docs": {
                  "description": "Prefer using the `String.raw` tag to avoid escaping `\\`.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-string-raw.md"
                },
                "fixable": "code",
                "messages": {
                  "prefer-string-raw": "`String.raw` should be used to avoid escaping `\\`."
                }
              }
            },
            "prefer-string-replace-all": {
              "meta": {
                "schema": [],
                "type": "suggestion",
                "docs": {
                  "description": "Prefer `String#replaceAll()` over regex searches with the global flag.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-string-replace-all.md"
                },
                "fixable": "code",
                "messages": {
                  "method": "Prefer `String#replaceAll()` over `String#replace()`.",
                  "pattern": "This pattern can be replaced with {{replacement}}."
                }
              }
            },
            "prefer-string-slice": {
              "meta": {
                "schema": [],
                "type": "suggestion",
                "docs": {
                  "description": "Prefer `String#slice()` over `String#substr()` and `String#substring()`.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-string-slice.md"
                },
                "fixable": "code",
                "messages": {
                  "substr": "Prefer `String#slice()` over `String#substr()`.",
                  "substring": "Prefer `String#slice()` over `String#substring()`."
                }
              }
            },
            "prefer-string-starts-ends-with": {
              "meta": {
                "schema": [],
                "type": "suggestion",
                "docs": {
                  "description": "Prefer `String#startsWith()` & `String#endsWith()` over `RegExp#test()`.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-string-starts-ends-with.md"
                },
                "fixable": "code",
                "hasSuggestions": true,
                "messages": {
                  "prefer-starts-with": "Prefer `String#startsWith()` over a regex with `^`.",
                  "prefer-ends-with": "Prefer `String#endsWith()` over a regex with `$`.",
                  "useStringCasting": "Convert to string `String(…).{{method}}()`.",
                  "useOptionalChaining": "Use optional chaining `…?.{{method}}()`.",
                  "useNullishCoalescing": "Use nullish coalescing `(… ?? '').{{method}}()`."
                }
              }
            },
            "prefer-string-trim-start-end": {
              "meta": {
                "schema": [],
                "type": "suggestion",
                "docs": {
                  "description": "Prefer `String#trimStart()` / `String#trimEnd()` over `String#trimLeft()` / `String#trimRight()`.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-string-trim-start-end.md"
                },
                "fixable": "code",
                "messages": {
                  "prefer-string-trim-start-end": "Prefer `String#{{replacement}}()` over `String#{{method}}()`."
                }
              }
            },
            "prefer-structured-clone": {
              "meta": {
                "schema": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "functions": { "type": "array", "uniqueItems": true }
                    }
                  }
                ],
                "type": "suggestion",
                "docs": {
                  "description": "Prefer using `structuredClone` to create a deep clone.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-structured-clone.md"
                },
                "hasSuggestions": true,
                "defaultOptions": [{}],
                "messages": {
                  "prefer-structured-clone/error": "Prefer `structuredClone(…)` over `{{description}}` to create a deep clone.",
                  "prefer-structured-clone/suggestion": "Switch to `structuredClone(…)`."
                }
              }
            },
            "prefer-switch": {
              "meta": {
                "schema": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "minimumCases": { "type": "integer", "minimum": 2 },
                      "emptyDefaultCase": {
                        "enum": [
                          "no-default-comment",
                          "do-nothing-comment",
                          "no-default-case"
                        ]
                      }
                    }
                  }
                ],
                "type": "suggestion",
                "docs": {
                  "description": "Prefer `switch` over multiple `else-if`.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-switch.md"
                },
                "fixable": "code",
                "defaultOptions": [
                  {
                    "minimumCases": 3,
                    "emptyDefaultCase": "no-default-comment"
                  }
                ],
                "messages": {
                  "prefer-switch": "Use `switch` instead of multiple `else-if`."
                }
              }
            },
            "prefer-ternary": {
              "meta": {
                "schema": [{ "enum": ["always", "only-single-line"] }],
                "type": "suggestion",
                "docs": {
                  "description": "Prefer ternary expressions over simple `if-else` statements.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-ternary.md"
                },
                "fixable": "code",
                "defaultOptions": ["always"],
                "messages": {
                  "prefer-ternary": "This `if` statement can be replaced by a ternary expression."
                }
              }
            },
            "prefer-top-level-await": {
              "meta": {
                "schema": [],
                "type": "suggestion",
                "docs": {
                  "description": "Prefer top-level await over top-level promises and async function calls.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-top-level-await.md"
                },
                "hasSuggestions": true,
                "messages": {
                  "promise": "Prefer top-level await over using a promise chain.",
                  "iife": "Prefer top-level await over an async IIFE.",
                  "identifier": "Prefer top-level await over an async function `{{name}}` call.",
                  "add-await": "Insert `await`."
                }
              }
            },
            "prefer-type-error": {
              "meta": {
                "schema": [],
                "type": "suggestion",
                "docs": {
                  "description": "Enforce throwing `TypeError` in type checking conditions.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prefer-type-error.md"
                },
                "fixable": "code",
                "messages": {
                  "prefer-type-error": "`new Error()` is too unspecific for a type check. Use `new TypeError()` instead."
                }
              }
            },
            "prevent-abbreviations": {
              "meta": {
                "schema": {
                  "type": "array",
                  "additionalItems": false,
                  "items": [
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "checkProperties": { "type": "boolean" },
                        "checkVariables": { "type": "boolean" },
                        "checkDefaultAndNamespaceImports": {
                          "type": ["boolean", "string"],
                          "pattern": "internal"
                        },
                        "checkShorthandImports": {
                          "type": ["boolean", "string"],
                          "pattern": "internal"
                        },
                        "checkShorthandProperties": { "type": "boolean" },
                        "checkFilenames": { "type": "boolean" },
                        "extendDefaultReplacements": { "type": "boolean" },
                        "replacements": {
                          "$ref": "#/definitions/abbreviations"
                        },
                        "extendDefaultAllowList": { "type": "boolean" },
                        "allowList": { "$ref": "#/definitions/booleanObject" },
                        "ignore": { "type": "array", "uniqueItems": true }
                      }
                    }
                  ],
                  "definitions": {
                    "abbreviations": {
                      "type": "object",
                      "additionalProperties": {
                        "$ref": "#/definitions/replacements"
                      }
                    },
                    "replacements": {
                      "anyOf": [
                        { "enum": [false] },
                        { "$ref": "#/definitions/booleanObject" }
                      ]
                    },
                    "booleanObject": {
                      "type": "object",
                      "additionalProperties": { "type": "boolean" }
                    }
                  }
                },
                "type": "suggestion",
                "docs": {
                  "description": "Prevent abbreviations.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/prevent-abbreviations.md"
                },
                "fixable": "code",
                "defaultOptions": [{}],
                "messages": {
                  "replace": "The {{nameTypeText}} `{{discouragedName}}` should be named `{{replacement}}`. A more descriptive name will do too.",
                  "suggestion": "Please rename the {{nameTypeText}} `{{discouragedName}}`. Suggested names are: {{replacementsText}}. A more descriptive name will do too."
                }
              }
            },
            "relative-url-style": {
              "meta": {
                "schema": [{ "enum": ["never", "always"] }],
                "type": "suggestion",
                "docs": {
                  "description": "Enforce consistent relative URL style.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/relative-url-style.md"
                },
                "fixable": "code",
                "hasSuggestions": true,
                "defaultOptions": ["never"],
                "messages": {
                  "never": "Remove the `./` prefix from the relative URL.",
                  "always": "Add a `./` prefix to the relative URL.",
                  "remove": "Remove leading `./`."
                }
              }
            },
            "require-array-join-separator": {
              "meta": {
                "schema": [],
                "type": "suggestion",
                "docs": {
                  "description": "Enforce using the separator argument with `Array#join()`.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/require-array-join-separator.md"
                },
                "fixable": "code",
                "messages": {
                  "require-array-join-separator": "Missing the separator argument."
                }
              }
            },
            "require-number-to-fixed-digits-argument": {
              "meta": {
                "schema": [],
                "type": "suggestion",
                "docs": {
                  "description": "Enforce using the digits argument with `Number#toFixed()`.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/require-number-to-fixed-digits-argument.md"
                },
                "fixable": "code",
                "messages": {
                  "require-number-to-fixed-digits-argument": "Missing the digits argument."
                }
              }
            },
            "require-post-message-target-origin": {
              "meta": {
                "schema": [],
                "type": "problem",
                "docs": {
                  "description": "Enforce using the `targetOrigin` argument with `window.postMessage()`.",
                  "recommended": false,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/require-post-message-target-origin.md"
                },
                "hasSuggestions": true,
                "messages": {
                  "error": "Missing the `targetOrigin` argument.",
                  "suggestion": "Use `{{code}}`."
                }
              }
            },
            "string-content": {
              "meta": {
                "schema": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "patterns": {
                        "type": "object",
                        "additionalProperties": {
                          "anyOf": [
                            { "type": "string" },
                            {
                              "type": "object",
                              "required": ["suggest"],
                              "properties": {
                                "suggest": { "type": "string" },
                                "fix": { "type": "boolean" },
                                "message": { "type": "string" }
                              },
                              "additionalProperties": false
                            }
                          ]
                        }
                      }
                    }
                  }
                ],
                "type": "suggestion",
                "docs": {
                  "description": "Enforce better string content.",
                  "recommended": false,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/string-content.md"
                },
                "fixable": "code",
                "hasSuggestions": true,
                "defaultOptions": [{}],
                "messages": {
                  "replace": "Replace `{{match}}` with `{{suggest}}`."
                }
              }
            },
            "switch-case-braces": {
              "meta": {
                "schema": [{ "enum": ["always", "avoid"] }],
                "type": "layout",
                "docs": {
                  "description": "Enforce consistent brace style for `case` clauses.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/switch-case-braces.md"
                },
                "fixable": "code",
                "defaultOptions": ["always"],
                "messages": {
                  "switch-case-braces/empty": "Unexpected braces in empty case clause.",
                  "switch-case-braces/missing": "Missing braces in case clause.",
                  "switch-case-braces/unnecessary": "Unnecessary braces in case clause."
                }
              }
            },
            "template-indent": {
              "meta": {
                "schema": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "indent": {
                        "oneOf": [
                          { "type": "string", "pattern": "^\\s+$" },
                          { "type": "integer", "minimum": 1 }
                        ]
                      },
                      "tags": {
                        "type": "array",
                        "uniqueItems": true,
                        "items": { "type": "string" }
                      },
                      "functions": {
                        "type": "array",
                        "uniqueItems": true,
                        "items": { "type": "string" }
                      },
                      "selectors": {
                        "type": "array",
                        "uniqueItems": true,
                        "items": { "type": "string" }
                      },
                      "comments": {
                        "type": "array",
                        "uniqueItems": true,
                        "items": { "type": "string" }
                      }
                    }
                  }
                ],
                "type": "suggestion",
                "docs": {
                  "description": "Fix whitespace-insensitive template indentation.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/template-indent.md"
                },
                "fixable": "code",
                "defaultOptions": [{}],
                "messages": {
                  "template-indent": "Templates should be properly indented."
                }
              }
            },
            "text-encoding-identifier-case": {
              "meta": {
                "schema": [],
                "type": "suggestion",
                "docs": {
                  "description": "Enforce consistent case for text encoding identifiers.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/text-encoding-identifier-case.md"
                },
                "fixable": "code",
                "hasSuggestions": true,
                "messages": {
                  "text-encoding-identifier/error": "Prefer `{{replacement}}` over `{{value}}`.",
                  "text-encoding-identifier/suggestion": "Replace `{{value}}` with `{{replacement}}`."
                }
              }
            },
            "throw-new-error": {
              "meta": {
                "schema": [],
                "type": "suggestion",
                "docs": {
                  "description": "Require `new` when creating an error.",
                  "recommended": true,
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/rules/throw-new-error.md"
                },
                "fixable": "code",
                "messages": {
                  "throw-new-error": "Use `new` when creating an error."
                }
              }
            },
            "no-instanceof-array": {
              "meta": {
                "docs": {
                  "description": "Replaced by `unicorn/no-instanceof-builtins` which covers more cases.",
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/deprecated-rules.md#no-instanceof-array"
                },
                "deprecated": {
                  "message": "Replaced by `unicorn/no-instanceof-builtins` which covers more cases.",
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/deprecated-rules.md#no-instanceof-array",
                  "replacedBy": ["unicorn/no-instanceof-builtins"]
                }
              }
            },
            "no-length-as-slice-end": {
              "meta": {
                "docs": {
                  "description": "Replaced by `unicorn/no-unnecessary-slice-end` which covers more cases.",
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/deprecated-rules.md#no-length-as-slice-end"
                },
                "deprecated": {
                  "message": "Replaced by `unicorn/no-unnecessary-slice-end` which covers more cases.",
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/deprecated-rules.md#no-length-as-slice-end",
                  "replacedBy": ["unicorn/no-unnecessary-slice-end"]
                }
              }
            },
            "no-array-push-push": {
              "meta": {
                "docs": {
                  "description": "Replaced by `unicorn/prefer-single-call` which covers more cases.",
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/deprecated-rules.md#no-array-push-push"
                },
                "deprecated": {
                  "message": "Replaced by `unicorn/prefer-single-call` which covers more cases.",
                  "url": "https://github.com/sindresorhus/eslint-plugin-unicorn/blob/v59.0.1/docs/deprecated-rules.md#no-array-push-push",
                  "replacedBy": ["unicorn/prefer-single-call"]
                }
              }
            }
          }
        }
      },
      "rules": {
        "no-negated-condition": "off",
        "no-nested-ternary": "off",
        "unicorn/better-regex": "off",
        "unicorn/catch-error-name": "error",
        "unicorn/consistent-assert": "error",
        "unicorn/consistent-date-clone": "error",
        "unicorn/consistent-destructuring": "off",
        "unicorn/consistent-empty-array-spread": "error",
        "unicorn/consistent-existence-index-check": "error",
        "unicorn/consistent-function-scoping": "error",
        "unicorn/custom-error-definition": "off",
        "unicorn/empty-brace-spaces": "error",
        "unicorn/error-message": "error",
        "unicorn/escape-case": "error",
        "unicorn/expiring-todo-comments": "error",
        "unicorn/explicit-length-check": "error",
        "unicorn/filename-case": "error",
        "unicorn/import-style": "error",
        "unicorn/new-for-builtins": "error",
        "unicorn/no-abusive-eslint-disable": "error",
        "unicorn/no-accessor-recursion": "error",
        "unicorn/no-anonymous-default-export": "error",
        "unicorn/no-array-callback-reference": "error",
        "unicorn/no-array-for-each": "error",
        "unicorn/no-array-method-this-argument": "error",
        "unicorn/no-array-reduce": "error",
        "unicorn/no-await-expression-member": "error",
        "unicorn/no-await-in-promise-methods": "error",
        "unicorn/no-console-spaces": "error",
        "unicorn/no-document-cookie": "error",
        "unicorn/no-empty-file": "error",
        "unicorn/no-for-loop": "error",
        "unicorn/no-hex-escape": "error",
        "unicorn/no-instanceof-builtins": "error",
        "unicorn/no-invalid-fetch-options": "error",
        "unicorn/no-invalid-remove-event-listener": "error",
        "unicorn/no-keyword-prefix": "off",
        "unicorn/no-lonely-if": "error",
        "unicorn/no-magic-array-flat-depth": "error",
        "unicorn/no-named-default": "error",
        "unicorn/no-negated-condition": "error",
        "unicorn/no-negation-in-equality-check": "error",
        "unicorn/no-nested-ternary": "error",
        "unicorn/no-new-array": "error",
        "unicorn/no-new-buffer": "error",
        "unicorn/no-null": "error",
        "unicorn/no-object-as-default-parameter": "error",
        "unicorn/no-process-exit": "error",
        "unicorn/no-single-promise-in-promise-methods": "error",
        "unicorn/no-static-only-class": "error",
        "unicorn/no-thenable": "error",
        "unicorn/no-this-assignment": "error",
        "unicorn/no-typeof-undefined": "error",
        "unicorn/no-unnecessary-array-flat-depth": "error",
        "unicorn/no-unnecessary-array-splice-count": "error",
        "unicorn/no-unnecessary-await": "error",
        "unicorn/no-unnecessary-polyfills": "error",
        "unicorn/no-unnecessary-slice-end": "error",
        "unicorn/no-unreadable-array-destructuring": "error",
        "unicorn/no-unreadable-iife": "error",
        "unicorn/no-unused-properties": "off",
        "unicorn/no-useless-fallback-in-spread": "error",
        "unicorn/no-useless-length-check": "error",
        "unicorn/no-useless-promise-resolve-reject": "error",
        "unicorn/no-useless-spread": "error",
        "unicorn/no-useless-switch-case": "error",
        "unicorn/no-useless-undefined": "error",
        "unicorn/no-zero-fractions": "error",
        "unicorn/number-literal-case": "error",
        "unicorn/numeric-separators-style": "error",
        "unicorn/prefer-add-event-listener": "error",
        "unicorn/prefer-array-find": "error",
        "unicorn/prefer-array-flat-map": "error",
        "unicorn/prefer-array-flat": "error",
        "unicorn/prefer-array-index-of": "error",
        "unicorn/prefer-array-some": "error",
        "unicorn/prefer-at": "error",
        "unicorn/prefer-blob-reading-methods": "error",
        "unicorn/prefer-code-point": "error",
        "unicorn/prefer-date-now": "error",
        "unicorn/prefer-default-parameters": "error",
        "unicorn/prefer-dom-node-append": "error",
        "unicorn/prefer-dom-node-dataset": "error",
        "unicorn/prefer-dom-node-remove": "error",
        "unicorn/prefer-dom-node-text-content": "error",
        "unicorn/prefer-event-target": "error",
        "unicorn/prefer-export-from": "error",
        "unicorn/prefer-global-this": "error",
        "unicorn/prefer-import-meta-properties": "off",
        "unicorn/prefer-includes": "error",
        "unicorn/prefer-json-parse-buffer": "off",
        "unicorn/prefer-keyboard-event-key": "error",
        "unicorn/prefer-logical-operator-over-ternary": "error",
        "unicorn/prefer-math-min-max": "error",
        "unicorn/prefer-math-trunc": "error",
        "unicorn/prefer-modern-dom-apis": "error",
        "unicorn/prefer-modern-math-apis": "error",
        "unicorn/prefer-module": "error",
        "unicorn/prefer-native-coercion-functions": "error",
        "unicorn/prefer-negative-index": "error",
        "unicorn/prefer-node-protocol": "error",
        "unicorn/prefer-number-properties": "error",
        "unicorn/prefer-object-from-entries": "error",
        "unicorn/prefer-optional-catch-binding": "error",
        "unicorn/prefer-prototype-methods": "error",
        "unicorn/prefer-query-selector": "error",
        "unicorn/prefer-reflect-apply": "error",
        "unicorn/prefer-regexp-test": "error",
        "unicorn/prefer-set-has": "error",
        "unicorn/prefer-set-size": "error",
        "unicorn/prefer-single-call": "error",
        "unicorn/prefer-spread": "error",
        "unicorn/prefer-string-raw": "error",
        "unicorn/prefer-string-replace-all": "error",
        "unicorn/prefer-string-slice": "error",
        "unicorn/prefer-string-starts-ends-with": "error",
        "unicorn/prefer-string-trim-start-end": "error",
        "unicorn/prefer-structured-clone": "error",
        "unicorn/prefer-switch": "error",
        "unicorn/prefer-ternary": "error",
        "unicorn/prefer-top-level-await": "error",
        "unicorn/prefer-type-error": "error",
        "unicorn/prevent-abbreviations": "error",
        "unicorn/relative-url-style": "error",
        "unicorn/require-array-join-separator": "error",
        "unicorn/require-number-to-fixed-digits-argument": "error",
        "unicorn/require-post-message-target-origin": "off",
        "unicorn/string-content": "off",
        "unicorn/switch-case-braces": "error",
        "unicorn/template-indent": "error",
        "unicorn/text-encoding-identifier-case": "error",
        "unicorn/throw-new-error": "error"
      }
    },
    {
      "name": "@repo/eslint-config/unicorn",
      "rules": {
        "unicorn/filename-case": ["error", { "case": "kebabCase" }],
        "unicorn/no-null": "off"
      }
    },
    {
      "files": ["**/*.test.ts", "**/*.spec.ts"],
      "plugins": {
        "vitest": {
          "meta": { "name": "vitest", "version": "1.3.4" },
          "rules": {
            "prefer-lowercase-title": {
              "defaultOptions": [
                {
                  "ignore": [],
                  "allowedPrefixes": [],
                  "ignoreTopLevelDescribe": false,
                  "lowercaseFirstCharacterOnly": true
                }
              ],
              "meta": {
                "type": "problem",
                "docs": {
                  "description": "enforce lowercase titles",
                  "recommended": false,
                  "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-lowercase-title.md"
                },
                "fixable": "code",
                "messages": {
                  "lowerCaseTitle": "`{{ method }}`s should begin with lowercase",
                  "fullyLowerCaseTitle": "`{{ method }}`s should be lowercase"
                },
                "schema": [
                  {
                    "type": "object",
                    "properties": {
                      "ignore": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "enum": ["describe", "test", "it"]
                        }
                      },
                      "allowedPrefixes": {
                        "type": "array",
                        "items": { "type": "string" },
                        "additionalItems": false
                      },
                      "ignoreTopLevelDescribe": {
                        "type": "boolean",
                        "default": false
                      },
                      "lowercaseFirstCharacterOnly": {
                        "type": "boolean",
                        "default": true
                      }
                    },
                    "additionalProperties": false
                  }
                ]
              }
            },
            "max-nested-describe": {
              "defaultOptions": [{ "max": 5 }],
              "meta": {
                "type": "problem",
                "docs": {
                  "description": "require describe block to be less than set max value or default value",
                  "recommended": false,
                  "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/max-nested-describe.md"
                },
                "schema": [
                  {
                    "type": "object",
                    "properties": { "max": { "type": "number" } },
                    "additionalProperties": false
                  }
                ],
                "messages": {
                  "maxNestedDescribe": "Nested describe block should be less than set max value"
                }
              }
            },
            "no-identical-title": {
              "defaultOptions": [],
              "meta": {
                "type": "problem",
                "docs": {
                  "description": "disallow identical titles",
                  "recommended": false,
                  "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/no-identical-title.md"
                },
                "fixable": "code",
                "schema": [],
                "messages": {
                  "multipleTestTitle": "Test is used multiple times in the same describe(suite) block",
                  "multipleDescribeTitle": "Describe is used multiple times in the same describe(suite) block"
                }
              }
            },
            "no-focused-tests": {
              "defaultOptions": [{ "fixable": true }],
              "meta": {
                "type": "problem",
                "docs": {
                  "description": "disallow focused tests",
                  "recommended": false,
                  "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/no-focused-tests.md"
                },
                "fixable": "code",
                "schema": [
                  {
                    "type": "object",
                    "properties": {
                      "fixable": { "type": "boolean", "default": true }
                    },
                    "additionalProperties": false
                  }
                ],
                "messages": {
                  "noFocusedTests": "Focused tests are not allowed"
                }
              }
            },
            "no-conditional-tests": {
              "defaultOptions": [],
              "meta": {
                "type": "problem",
                "docs": {
                  "description": "disallow conditional tests",
                  "recommended": false,
                  "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/no-conditional-tests.md"
                },
                "schema": [],
                "messages": {
                  "noConditionalTests": "Avoid using if conditions in a test"
                }
              }
            },
            "expect-expect": {
              "defaultOptions": [
                {
                  "assertFunctionNames": ["expect", "assert"],
                  "additionalTestBlockFunctions": []
                }
              ],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "enforce having expectation in test body",
                  "recommended": false,
                  "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/expect-expect.md"
                },
                "schema": [
                  {
                    "type": "object",
                    "properties": {
                      "assertFunctionNames": {
                        "type": "array",
                        "items": { "type": "string" }
                      },
                      "additionalTestBlockFunctions": {
                        "type": "array",
                        "items": { "type": "string" }
                      }
                    },
                    "additionalProperties": false
                  }
                ],
                "messages": { "noAssertions": "Test has no assertions" }
              }
            },
            "consistent-test-it": {
              "defaultOptions": [{ "fn": "test", "withinDescribe": "it" }],
              "meta": {
                "type": "suggestion",
                "fixable": "code",
                "docs": {
                  "description": "enforce using test or it but not both",
                  "recommended": false,
                  "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/consistent-test-it.md"
                },
                "messages": {
                  "consistentMethod": "Prefer using {{ testFnKeyWork }} instead of {{ oppositeTestKeyword }}",
                  "consistentMethodWithinDescribe": "Prefer using {{ testKeywordWithinDescribe }} instead of {{ oppositeTestKeyword }} within describe"
                },
                "schema": [
                  {
                    "type": "object",
                    "properties": {
                      "fn": { "type": "string", "enum": ["test", "it"] },
                      "withinDescribe": {
                        "type": "string",
                        "enum": ["test", "it"]
                      }
                    },
                    "additionalProperties": false
                  }
                ]
              }
            },
            "consistent-vitest-vi": {
              "defaultOptions": [{ "fn": "vi" }],
              "meta": {
                "type": "suggestion",
                "fixable": "code",
                "docs": {
                  "description": "enforce using vitest or vi but not both",
                  "recommended": false,
                  "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/consistent-vitest-vi.md"
                },
                "messages": {
                  "consistentUtil": "Prefer using {{ utilKeyword }} instead of {{ oppositeUtilKeyword }}"
                },
                "schema": [
                  {
                    "type": "object",
                    "properties": {
                      "fn": { "type": "string", "enum": ["vi", "vitest"] }
                    },
                    "additionalProperties": false
                  }
                ]
              }
            },
            "prefer-to-be": {
              "defaultOptions": [],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "enforce using toBe()",
                  "recommended": false,
                  "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-to-be.md"
                },
                "schema": [],
                "fixable": "code",
                "messages": {
                  "useToBe": "Use `toBe` instead",
                  "useToBeUndefined": "Use `toBeUndefined()` instead",
                  "useToBeDefined": "Use `toBeDefined()` instead",
                  "useToBeNull": "Use `toBeNull()` instead",
                  "useToBeNaN": "Use `toBeNaN()` instead"
                }
              }
            },
            "no-hooks": {
              "defaultOptions": [{ "allow": [] }],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "disallow setup and teardown hooks",
                  "recommended": false,
                  "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/no-hooks.md"
                },
                "schema": [
                  {
                    "type": "object",
                    "properties": {
                      "allow": {
                        "type": "array",
                        "contains": [
                          "beforeAll",
                          "beforeEach",
                          "afterAll",
                          "afterEach"
                        ]
                      }
                    },
                    "additionalProperties": false
                  }
                ],
                "messages": {
                  "unexpectedHook": "Unexpected '{{ hookName }}' hook"
                }
              }
            },
            "no-restricted-vi-methods": {
              "defaultOptions": [{}],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "disallow specific `vi.` methods",
                  "recommended": false,
                  "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/no-restricted-vi-methods.md"
                },
                "schema": [
                  {
                    "type": "object",
                    "additionalProperties": { "type": ["string", "null"] }
                  }
                ],
                "messages": {
                  "restrictedViMethod": "Use of `{{ restriction }}` is disallowed",
                  "restrictedViMethodWithMessage": "{{ message }}"
                }
              }
            },
            "consistent-test-filename": {
              "defaultOptions": [
                {
                  "pattern": ".*\\.(test|spec)\\.[tj]sx?$",
                  "allTestPattern": ".*\\.(test|spec)\\.[tj]sx?$"
                }
              ],
              "meta": {
                "type": "problem",
                "docs": {
                  "recommended": false,
                  "requiresTypeChecking": false,
                  "description": "require .spec test file pattern",
                  "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/consistent-test-filename.md"
                },
                "messages": {
                  "consistentTestFilename": "Use test file name pattern {{ pattern }}"
                },
                "schema": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "pattern": {
                        "format": "regex",
                        "default": ".*\\.test\\.[tj]sx?$"
                      },
                      "allTestPattern": {
                        "format": "regex",
                        "default": ".*\\.(test|spec)\\.[tj]sx?$"
                      }
                    }
                  }
                ]
              }
            },
            "max-expects": {
              "defaultOptions": [{ "max": 5 }],
              "meta": {
                "docs": {
                  "requiresTypeChecking": false,
                  "recommended": false,
                  "description": "enforce a maximum number of expect per test",
                  "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/max-expects.md"
                },
                "messages": {
                  "maxExpect": "Too many assertion calls ({{ count }}) - maximum allowed is {{ max }}"
                },
                "type": "suggestion",
                "schema": [
                  {
                    "type": "object",
                    "properties": { "max": { "type": "number" } },
                    "additionalProperties": false
                  }
                ]
              }
            },
            "no-alias-methods": {
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "description": "disallow alias methods",
                  "requiresTypeChecking": false,
                  "recommended": false,
                  "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/no-alias-methods.md"
                },
                "messages": {
                  "noAliasMethods": "Replace {{ alias }}() with its canonical name {{ canonical }}()"
                },
                "type": "suggestion",
                "fixable": "code",
                "schema": []
              }
            },
            "no-commented-out-tests": {
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "description": "disallow commented out tests",
                  "requiresTypeChecking": false,
                  "recommended": false,
                  "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/no-commented-out-tests.md"
                },
                "messages": {
                  "noCommentedOutTests": "Remove commented out tests - you may want to use `skip` or `only` instead"
                },
                "schema": [],
                "type": "suggestion"
              }
            },
            "no-conditional-expect": {
              "defaultOptions": [],
              "meta": {
                "type": "problem",
                "docs": {
                  "description": "disallow conditional expects",
                  "requiresTypeChecking": false,
                  "recommended": false,
                  "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/no-conditional-expect.md"
                },
                "messages": {
                  "noConditionalExpect": "Avoid calling `expect` inside conditional statements"
                },
                "schema": []
              }
            },
            "no-conditional-in-test": {
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "description": "disallow conditional tests",
                  "requiresTypeChecking": false,
                  "recommended": false,
                  "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/no-conditional-in-test.md"
                },
                "messages": {
                  "noConditionalInTest": "Remove conditional tests"
                },
                "schema": [],
                "type": "problem"
              }
            },
            "no-disabled-tests": {
              "defaultOptions": [],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "disallow disabled tests",
                  "recommended": false,
                  "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/no-disabled-tests.md"
                },
                "messages": {
                  "missingFunction": "Test is missing function argument",
                  "pending": "Call to pending()",
                  "pendingSuite": "Call to pending() within test suite",
                  "pendingTest": "Call to pending() within test",
                  "disabledSuite": "Disabled test suite - if you want to skip a test suite temporarily, use .todo() instead",
                  "disabledTest": "Disabled test - if you want to skip a test temporarily, use .todo() instead"
                },
                "schema": []
              }
            },
            "no-done-callback": {
              "defaultOptions": [],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "disallow using a callback in asynchronous tests and hooks",
                  "recommended": false,
                  "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/no-done-callback.md"
                },
                "deprecated": true,
                "schema": [],
                "messages": {
                  "noDoneCallback": "Return a promise instead of relying on callback parameter",
                  "suggestWrappingInPromise": "Wrap in `new Promise({{ callback }} => ...`",
                  "useAwaitInsteadOfCallback": "Use `await` instead of callback in async function"
                },
                "hasSuggestions": true
              }
            },
            "no-duplicate-hooks": {
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "recommended": false,
                  "description": "disallow duplicate hooks and teardown hooks",
                  "requiresTypeChecking": false,
                  "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/no-duplicate-hooks.md"
                },
                "messages": {
                  "noDuplicateHooks": "Duplicate {{ hook }} in describe block"
                },
                "schema": [],
                "type": "suggestion"
              }
            },
            "no-large-snapshots": {
              "defaultOptions": [{}],
              "meta": {
                "docs": {
                  "description": "disallow large snapshots",
                  "recommended": false,
                  "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/no-large-snapshots.md"
                },
                "messages": {
                  "noSnapShot": "`{{ lineCount }}`s should begin with lowercase",
                  "tooLongSnapShot": "Expected vitest snapshot to be smaller than {{ lineLimit }} lines but was {{ lineCount }} lines long"
                },
                "type": "suggestion",
                "schema": [
                  {
                    "type": "object",
                    "properties": {
                      "maxSize": { "type": "number" },
                      "inlineMaxSize": { "type": "number" },
                      "allowedSnapshots": {
                        "type": "object",
                        "additionalProperties": { "type": "array" }
                      }
                    },
                    "additionalProperties": false
                  }
                ]
              }
            },
            "no-interpolation-in-snapshots": {
              "defaultOptions": [],
              "meta": {
                "type": "problem",
                "docs": {
                  "description": "disallow string interpolation in snapshots",
                  "recommended": false,
                  "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/no-interpolation-in-snapshots.md"
                },
                "fixable": "code",
                "schema": [],
                "messages": {
                  "noInterpolationInSnapshots": "Do not use string interpolation in snapshots"
                }
              }
            },
            "no-mocks-import": {
              "defaultOptions": [],
              "meta": {
                "type": "problem",
                "docs": {
                  "description": "disallow importing from __mocks__ directory",
                  "recommended": false,
                  "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/no-mocks-import.md"
                },
                "messages": {
                  "noMocksImport": "Mocks should not be manually imported from a __mocks__ directory. Instead use `vi.mock` and import from the original module path"
                },
                "schema": []
              }
            },
            "no-restricted-matchers": {
              "defaultOptions": [{}],
              "meta": {
                "docs": {
                  "description": "disallow the use of certain matchers",
                  "recommended": false,
                  "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/no-restricted-matchers.md"
                },
                "type": "suggestion",
                "schema": [
                  {
                    "type": "object",
                    "additionalProperties": { "type": ["string", "null"] }
                  }
                ],
                "messages": {
                  "restrictedChain": "use of {{ restriction }} is disallowed",
                  "restrictedChainWithMessage": "{{ message }}"
                }
              }
            },
            "no-standalone-expect": {
              "defaultOptions": [{ "additionalTestBlockFunctions": [] }],
              "meta": {
                "docs": {
                  "description": "disallow using `expect` outside of `it` or `test` blocks",
                  "recommended": false,
                  "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/no-standalone-expect.md"
                },
                "type": "suggestion",
                "messages": {
                  "noStandaloneExpect": "Expect must be called inside a test block"
                },
                "schema": [
                  {
                    "type": "object",
                    "properties": {
                      "additionalTestBlockFunctions": {
                        "type": "array",
                        "items": { "type": "string" }
                      }
                    },
                    "additionalProperties": false
                  }
                ]
              }
            },
            "no-test-prefixes": {
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "description": "disallow using the `f` and `x` prefixes in favour of `.only` and `.skip`",
                  "recommended": false,
                  "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/no-test-prefixes.md"
                },
                "type": "suggestion",
                "messages": {
                  "usePreferredName": "Use \"{{ preferredNodeName }}\" instead"
                },
                "fixable": "code",
                "schema": []
              }
            },
            "no-test-return-statement": {
              "defaultOptions": [],
              "meta": {
                "type": "problem",
                "docs": {
                  "description": "disallow return statements in tests",
                  "recommended": false,
                  "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/no-test-return-statement.md"
                },
                "schema": [],
                "messages": {
                  "noTestReturnStatement": "Return statements are not allowed in tests"
                }
              }
            },
            "no-import-node-test": {
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "description": "disallow importing `node:test`",
                  "recommended": false,
                  "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/no-import-node-test.md"
                },
                "type": "suggestion",
                "messages": {
                  "noImportNodeTest": "Import from `vitest` instead of `node:test`"
                },
                "fixable": "code",
                "schema": []
              }
            },
            "prefer-called-with": {
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "description": "enforce using `toBeCalledWith()` or `toHaveBeenCalledWith()`",
                  "recommended": false,
                  "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-called-with.md"
                },
                "messages": {
                  "preferCalledWith": "Prefer {{ matcherName }}With(/* expected args */)"
                },
                "type": "suggestion",
                "fixable": "code",
                "schema": []
              }
            },
            "valid-title": {
              "defaultOptions": [
                {
                  "ignoreTypeOfDescribeName": false,
                  "allowArguments": false,
                  "disallowedWords": []
                }
              ],
              "meta": {
                "docs": {
                  "description": "enforce valid titles",
                  "recommended": false,
                  "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/valid-title.md"
                },
                "messages": {
                  "titleMustBeString": "Test title must be a string, a function or class name",
                  "emptyTitle": "{{ functionName }} should not have an empty title",
                  "duplicatePrefix": "should not have duplicate prefix",
                  "accidentalSpace": "should not have leading or trailing spaces",
                  "disallowedWord": "\"{{ word }}\" is not allowed in test title",
                  "mustNotMatch": "{{ functionName }} should not match {{ pattern }}",
                  "mustMatch": "{{ functionName }} should match {{ pattern }}",
                  "mustNotMatchCustom": "{{ message }}",
                  "mustMatchCustom": "{{ message }}"
                },
                "type": "suggestion",
                "schema": [
                  {
                    "type": "object",
                    "properties": {
                      "ignoreTypeOfDescribeName": {
                        "type": "boolean",
                        "default": false
                      },
                      "allowArguments": { "type": "boolean", "default": false },
                      "disallowedWords": {
                        "type": "array",
                        "items": { "type": "string" }
                      }
                    },
                    "patternProperties": {
                      "^must(?:Not)?Match$": {
                        "oneOf": [
                          { "type": "string" },
                          {
                            "type": "array",
                            "items": { "type": "string" },
                            "minItems": 1,
                            "maxItems": 2,
                            "additionalItems": false
                          },
                          {
                            "type": "object",
                            "propertyNames": {
                              "type": "string",
                              "enum": ["describe", "test", "it"]
                            },
                            "additionalProperties": {
                              "oneOf": [{ "type": "string" }, null]
                            }
                          }
                        ]
                      }
                    },
                    "additionalProperties": false
                  }
                ],
                "fixable": "code"
              }
            },
            "valid-expect": {
              "defaultOptions": [
                {
                  "alwaysAwait": false,
                  "asyncMatchers": ["toReject", "toResolve"],
                  "minArgs": 1,
                  "maxArgs": 1
                }
              ],
              "meta": {
                "docs": {
                  "description": "enforce valid `expect()` usage",
                  "recommended": false,
                  "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/valid-expect.md"
                },
                "messages": {
                  "tooManyArgs": "Expect takes at most {{ amount}} argument{{ s }}",
                  "notEnoughArgs": "Expect requires at least {{ amount }} argument{{ s }}",
                  "modifierUnknown": "Expect has an unknown modifier",
                  "matcherNotFound": "Expect must have a corresponding matcher call",
                  "matcherNotCalled": "Matchers must be called to assert",
                  "asyncMustBeAwaited": "Async assertions must be awaited{{ orReturned }}",
                  "promisesWithAsyncAssertionsMustBeAwaited": "Promises which return async assertions must be awaited{{ orReturned }}"
                },
                "type": "suggestion",
                "fixable": "code",
                "schema": [
                  {
                    "type": "object",
                    "properties": {
                      "alwaysAwait": { "type": "boolean", "default": false },
                      "asyncMatchers": {
                        "type": "array",
                        "items": { "type": "string" }
                      },
                      "minArgs": { "type": "number", "minimum": 1 },
                      "maxArgs": { "type": "number", "minimum": 1 }
                    },
                    "additionalProperties": false
                  }
                ]
              }
            },
            "prefer-to-be-falsy": {
              "defaultOptions": [],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "enforce using toBeFalsy()",
                  "recommended": false,
                  "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-to-be-falsy.md"
                },
                "fixable": "code",
                "schema": [],
                "messages": { "preferToBeFalsy": "Prefer using toBeFalsy()" }
              }
            },
            "prefer-to-be-object": {
              "defaultOptions": [],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "enforce using toBeObject()",
                  "recommended": false,
                  "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-to-be-object.md"
                },
                "fixable": "code",
                "messages": {
                  "preferToBeObject": "Prefer toBeObject() to test if a value is an object"
                },
                "schema": []
              }
            },
            "prefer-to-be-truthy": {
              "defaultOptions": [],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "enforce using `toBeTruthy`",
                  "recommended": false,
                  "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-to-be-truthy.md"
                },
                "messages": {
                  "preferToBeTruthy": "Prefer using `toBeTruthy` to test value is `true`"
                },
                "fixable": "code",
                "schema": []
              }
            },
            "prefer-to-have-length": {
              "defaultOptions": [],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "enforce using toHaveLength()",
                  "recommended": false,
                  "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-to-have-length.md"
                },
                "fixable": "code",
                "messages": { "preferToHaveLength": "Prefer toHaveLength()" },
                "schema": []
              }
            },
            "prefer-equality-matcher": {
              "defaultOptions": [],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "enforce using the built-in quality matchers",
                  "recommended": false,
                  "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-equality-matcher.md"
                },
                "messages": {
                  "useEqualityMatcher": "Prefer using one of the equality matchers instead",
                  "suggestEqualityMatcher": "Use `{{ equalityMatcher }}`"
                },
                "hasSuggestions": true,
                "schema": []
              }
            },
            "prefer-strict-equal": {
              "defaultOptions": [],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "enforce strict equal over equal",
                  "recommended": false,
                  "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-strict-equal.md"
                },
                "messages": {
                  "useToStrictEqual": "Use `toStrictEqual()` instead",
                  "suggestReplaceWithStrictEqual": "Replace with `toStrictEqual()`"
                },
                "schema": [],
                "hasSuggestions": true
              }
            },
            "prefer-expect-resolves": {
              "defaultOptions": [],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "enforce using `expect().resolves` over `expect(await ...)` syntax",
                  "recommended": false,
                  "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-expect-resolves.md"
                },
                "fixable": "code",
                "messages": {
                  "expectResolves": "Use `expect().resolves` instead"
                },
                "schema": []
              }
            },
            "prefer-each": {
              "defaultOptions": [],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "enforce using `each` rather than manual loops",
                  "recommended": false,
                  "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-each.md"
                },
                "schema": [],
                "messages": {
                  "preferEach": "Prefer using `{{ fn }}.each` rather than a manual loop"
                }
              }
            },
            "prefer-hooks-on-top": {
              "defaultOptions": [],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "enforce having hooks before any test cases",
                  "recommended": false,
                  "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-hooks-on-top.md"
                },
                "messages": {
                  "noHookOnTop": "Hooks should come before test cases"
                },
                "schema": []
              }
            },
            "prefer-hooks-in-order": {
              "defaultOptions": [],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "enforce having hooks in consistent order",
                  "recommended": false,
                  "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-hooks-in-order.md"
                },
                "messages": {
                  "reorderHooks": "`{{ currentHook }}` hooks should be before any `{{ previousHook }}` hooks"
                },
                "schema": []
              }
            },
            "require-local-test-context-for-concurrent-snapshots": {
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "description": "require local Test Context for concurrent snapshot tests",
                  "recommended": false,
                  "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/require-local-test-context-for-concurrent-snapshots.md"
                },
                "messages": {
                  "requireLocalTestContext": "Use local Test Context instead"
                },
                "type": "problem",
                "schema": []
              }
            },
            "prefer-mock-promise-shorthand": {
              "defaultOptions": [],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "enforce mock resolved/rejected shorthands for promises",
                  "recommended": false,
                  "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-mock-promise-shorthand.md"
                },
                "messages": { "useMockShorthand": "Prefer {{ replacement }}" },
                "schema": [],
                "fixable": "code"
              }
            },
            "prefer-vi-mocked": {
              "defaultOptions": [],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "require `vi.mocked()` over `fn as Mock`",
                  "requiresTypeChecking": true,
                  "recommended": false,
                  "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-vi-mocked.md"
                },
                "fixable": "code",
                "messages": { "useViMocked": "Prefer `vi.mocked()`" },
                "schema": []
              }
            },
            "prefer-snapshot-hint": {
              "defaultOptions": ["multi"],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "enforce including a hint with external snapshots",
                  "recommended": false,
                  "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-snapshot-hint.md"
                },
                "messages": {
                  "missingHint": "You should provide a hint for this snapshot"
                },
                "schema": [{ "type": "string", "enum": ["always", "multi"] }]
              }
            },
            "valid-describe-callback": {
              "defaultOptions": [],
              "meta": {
                "type": "problem",
                "docs": {
                  "description": "enforce valid describe callback",
                  "recommended": false,
                  "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/valid-describe-callback.md"
                },
                "messages": {
                  "nameAndCallback": "Describe requires a name and callback arguments",
                  "secondArgumentMustBeFunction": "Second argument must be a function",
                  "unexpectedDescribeArgument": "Unexpected argument in describe callback",
                  "unexpectedReturnInDescribe": "Unexpected return statement in describe callback"
                },
                "schema": []
              }
            },
            "require-top-level-describe": {
              "defaultOptions": [{}],
              "meta": {
                "docs": {
                  "description": "enforce that all tests are in a top-level describe",
                  "recommended": false,
                  "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/require-top-level-describe.md"
                },
                "messages": {
                  "tooManyDescribes": "There should not be more than {{ max }} describe{{ s }} at the top level",
                  "unexpectedTestCase": "All test cases must be wrapped in a describe block",
                  "unexpectedHook": "All hooks must be wrapped in a describe block"
                },
                "type": "suggestion",
                "schema": [
                  {
                    "type": "object",
                    "properties": {
                      "maxNumberOfTopLevelDescribes": {
                        "type": "number",
                        "minimum": 1
                      }
                    },
                    "additionalProperties": false
                  }
                ]
              }
            },
            "require-to-throw-message": {
              "defaultOptions": [],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "require toThrow() to be called with an error message",
                  "recommended": false,
                  "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/require-to-throw-message.md"
                },
                "schema": [],
                "messages": {
                  "addErrorMessage": "Add an error message to {{ matcherName }}()"
                }
              }
            },
            "require-hook": {
              "defaultOptions": [{ "allowedFunctionCalls": [] }],
              "meta": {
                "docs": {
                  "description": "require setup and teardown to be within a hook",
                  "recommended": false,
                  "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/require-hook.md"
                },
                "messages": { "useHook": "This should be done within a hook" },
                "type": "suggestion",
                "schema": [
                  {
                    "type": "object",
                    "properties": {
                      "allowedFunctionCalls": {
                        "type": "array",
                        "items": { "type": "string" }
                      }
                    },
                    "additionalProperties": false
                  }
                ]
              }
            },
            "prefer-todo": {
              "defaultOptions": [],
              "meta": {
                "type": "layout",
                "docs": {
                  "description": "enforce using `test.todo`",
                  "recommended": false,
                  "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-todo.md"
                },
                "messages": {
                  "emptyTest": "Prefer todo test case over empty test case",
                  "unimplementedTest": "Prefer todo test case over unimplemented test case"
                },
                "fixable": "code",
                "schema": []
              }
            },
            "prefer-spy-on": {
              "defaultOptions": [],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "enforce using `vi.spyOn`",
                  "recommended": false,
                  "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-spy-on.md"
                },
                "messages": { "useViSpayOn": "Use `vi.spyOn` instead" },
                "fixable": "code",
                "schema": []
              }
            },
            "prefer-comparison-matcher": {
              "defaultOptions": [],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "enforce using the built-in comparison matchers",
                  "recommended": false,
                  "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-comparison-matcher.md"
                },
                "schema": [],
                "fixable": "code",
                "messages": {
                  "useToBeComparison": "Prefer using `{{ preferredMatcher }}` instead"
                }
              }
            },
            "prefer-describe-function-title": {
              "defaultOptions": [],
              "meta": {
                "type": "problem",
                "docs": {
                  "description": "enforce using a function as a describe title over an equivalent string",
                  "recommended": false,
                  "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-describe-function-title.md"
                },
                "fixable": "code",
                "schema": [],
                "messages": {
                  "preferFunction": "Enforce using a function over an equivalent string"
                }
              }
            },
            "prefer-to-contain": {
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "description": "enforce using toContain()",
                  "recommended": false,
                  "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-to-contain.md"
                },
                "messages": { "useToContain": "Use toContain() instead" },
                "fixable": "code",
                "type": "suggestion",
                "schema": []
              }
            },
            "prefer-expect-assertions": {
              "defaultOptions": [
                {
                  "onlyFunctionsWithAsyncKeyword": false,
                  "onlyFunctionsWithExpectInCallback": false,
                  "onlyFunctionsWithExpectInLoop": false
                }
              ],
              "meta": {
                "docs": {
                  "description": "enforce using expect assertions instead of callbacks",
                  "recommended": false,
                  "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-expect-assertions.md"
                },
                "messages": {
                  "hasAssertionsTakesNoArguments": "`expect.hasAssertions` expects no arguments",
                  "assertionsRequiresOneArgument": "`expect.assertions` excepts a single argument of type number",
                  "assertionsRequiresNumberArgument": "This argument should be a number",
                  "haveExpectAssertions": "Every test should have either `expect.assertions(<number of assertions>)` or `expect.hasAssertions()` as its first expression",
                  "suggestAddingHasAssertions": "Add `expect.hasAssertions()`",
                  "suggestAddingAssertions": "Add `expect.assertions(<number of assertions>)`",
                  "suggestRemovingExtraArguments": "Remove extra arguments"
                },
                "type": "suggestion",
                "hasSuggestions": true,
                "schema": [
                  {
                    "type": "object",
                    "properties": {
                      "onlyFunctionsWithAsyncKeyword": { "type": "boolean" },
                      "onlyFunctionsWithExpectInLoop": { "type": "boolean" },
                      "onlyFunctionsWithExpectInCallback": { "type": "boolean" }
                    },
                    "additionalProperties": false
                  }
                ]
              }
            },
            "padding-around-after-all-blocks": {
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "description": "Enforce padding around `afterAll` blocks",
                  "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/padding-around-after-all-blocks.md"
                },
                "fixable": "whitespace",
                "deprecated": false,
                "messages": {
                  "missingPadding": "expect blank line before this statement"
                },
                "schema": [],
                "type": "suggestion"
              }
            },
            "padding-around-after-each-blocks": {
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "description": "Enforce padding around `afterEach` blocks",
                  "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/padding-around-after-each-blocks.md"
                },
                "fixable": "whitespace",
                "deprecated": false,
                "messages": {
                  "missingPadding": "expect blank line before this statement"
                },
                "schema": [],
                "type": "suggestion"
              }
            },
            "padding-around-all": {
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "description": "Enforce padding around vitest functions",
                  "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/padding-around-all.md"
                },
                "fixable": "whitespace",
                "deprecated": false,
                "messages": {
                  "missingPadding": "expect blank line before this statement"
                },
                "schema": [],
                "type": "suggestion"
              }
            },
            "padding-around-before-all-blocks": {
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "description": "Enforce padding around `beforeAll` blocks",
                  "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/padding-around-before-all-blocks.md"
                },
                "fixable": "whitespace",
                "deprecated": false,
                "messages": {
                  "missingPadding": "expect blank line before this statement"
                },
                "schema": [],
                "type": "suggestion"
              }
            },
            "padding-around-before-each-blocks": {
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "description": "Enforce padding around `beforeEach` blocks",
                  "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/padding-around-before-each-blocks.md"
                },
                "fixable": "whitespace",
                "deprecated": false,
                "messages": {
                  "missingPadding": "expect blank line before this statement"
                },
                "schema": [],
                "type": "suggestion"
              }
            },
            "padding-around-describe-blocks": {
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "description": "Enforce padding around `describe` blocks",
                  "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/padding-around-describe-blocks.md"
                },
                "fixable": "whitespace",
                "deprecated": false,
                "messages": {
                  "missingPadding": "expect blank line before this statement"
                },
                "schema": [],
                "type": "suggestion"
              }
            },
            "padding-around-expect-groups": {
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "description": "Enforce padding around `expect` groups",
                  "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/padding-around-expect-groups.md"
                },
                "fixable": "whitespace",
                "deprecated": false,
                "messages": {
                  "missingPadding": "expect blank line before this statement"
                },
                "schema": [],
                "type": "suggestion"
              }
            },
            "padding-around-test-blocks": {
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "description": "Enforce padding around `test` blocks",
                  "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/padding-around-test-blocks.md"
                },
                "fixable": "whitespace",
                "deprecated": false,
                "messages": {
                  "missingPadding": "expect blank line before this statement"
                },
                "schema": [],
                "type": "suggestion"
              }
            },
            "valid-expect-in-promise": {
              "defaultOptions": [
                {
                  "alwaysAwait": false,
                  "asyncMatchers": ["toRejectWith", "toResolveWith"],
                  "minArgs": 1,
                  "maxArgs": 1
                }
              ],
              "meta": {
                "docs": {
                  "description": "require promises that have expectations in their chain to be valid",
                  "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/valid-expect-in-promise.md"
                },
                "messages": {
                  "expectInFloatingPromise": "This promise should either be returned or awaited to ensure the expects in its chain are called"
                },
                "type": "suggestion",
                "schema": []
              }
            },
            "prefer-strict-boolean-matchers": {
              "defaultOptions": [],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "enforce using `toBe(true)` and `toBe(false)` over matchers that coerce types to boolean",
                  "recommended": false,
                  "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-strict-boolean-matchers.md"
                },
                "messages": {
                  "preferToBeTrue": "Prefer using `toBe(true)` to test value is `true`",
                  "preferToBeFalse": "Prefer using `toBe(false)` to test value is `false`"
                },
                "fixable": "code",
                "schema": []
              }
            },
            "require-mock-type-parameters": {
              "defaultOptions": [{ "checkImportFunctions": false }],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "enforce using type parameters with vitest mock functions",
                  "recommended": false,
                  "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/require-mock-type-parameters.md"
                },
                "messages": { "noTypeParameter": "Missing type parameters" },
                "fixable": "code",
                "schema": [
                  {
                    "type": "object",
                    "properties": {
                      "checkImportFunctions": { "type": "boolean" }
                    },
                    "additionalProperties": false
                  }
                ]
              }
            },
            "no-importing-vitest-globals": {
              "defaultOptions": [],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "disallow importing Vitest globals",
                  "recommended": false,
                  "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/no-importing-vitest-globals.md"
                },
                "messages": {
                  "noImportingVitestGlobals": "Do not import '{{name}}' from 'vitest'. Use globals configuration instead.",
                  "noRequiringVitestGlobals": "Do not require '{{name}}' from 'vitest'. Use globals configuration instead."
                },
                "fixable": "code",
                "schema": []
              }
            },
            "prefer-importing-vitest-globals": {
              "defaultOptions": [],
              "meta": {
                "type": "suggestion",
                "docs": {
                  "description": "enforce importing Vitest globals",
                  "recommended": false,
                  "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-importing-vitest-globals.md"
                },
                "messages": {
                  "preferImportingVitestGlobals": "Import '{{name}}' from 'vitest'"
                },
                "schema": [],
                "fixable": "code"
              }
            },
            "prefer-called-once": {
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "description": "enforce using `toBeCalledOnce()` or `toHaveBeenCalledOnce()`",
                  "recommended": false,
                  "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-called-once.md"
                },
                "messages": {
                  "preferCalledOnce": "Prefer {{ replacedMatcherName }}()"
                },
                "type": "suggestion",
                "fixable": "code",
                "schema": []
              }
            },
            "prefer-called-times": {
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "description": "enforce using `toBeCalledTimes(1)` or `toHaveBeenCalledTimes(1)`",
                  "recommended": false,
                  "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/prefer-called-times.md"
                },
                "messages": {
                  "preferCalledTimes": "Prefer {{ replacedMatcherName }}(1)"
                },
                "type": "suggestion",
                "fixable": "code",
                "schema": []
              }
            },
            "warn-todo": {
              "defaultOptions": [],
              "meta": {
                "docs": {
                  "description": "disallow `.todo` usage",
                  "recommended": false,
                  "url": "https://github.com/vitest-dev/eslint-plugin-vitest/blob/main/docs/rules/warn-todo.md"
                },
                "messages": {
                  "warnTodo": "The use of `.todo` is not recommended."
                },
                "type": "suggestion",
                "schema": []
              }
            }
          },
          "environments": {
            "env": {
              "globals": {
                "suite": true,
                "test": true,
                "describe": true,
                "it": true,
                "expectTypeOf": true,
                "assertType": true,
                "expect": true,
                "assert": true,
                "chai": true,
                "vitest": true,
                "vi": true,
                "beforeAll": true,
                "afterAll": true,
                "beforeEach": true,
                "afterEach": true,
                "onTestFailed": true,
                "onTestFinished": true
              }
            }
          },
          "configs": {
            "legacy-recommended": {
              "plugins": ["@vitest"],
              "rules": {
                "@vitest/expect-expect": "error",
                "@vitest/no-identical-title": "error",
                "@vitest/no-commented-out-tests": "error",
                "@vitest/valid-title": "error",
                "@vitest/valid-expect": "error",
                "@vitest/valid-describe-callback": "error",
                "@vitest/require-local-test-context-for-concurrent-snapshots": "error",
                "@vitest/no-import-node-test": "error"
              }
            },
            "legacy-all": {
              "plugins": ["@vitest"],
              "rules": {
                "@vitest/prefer-lowercase-title": "warn",
                "@vitest/max-nested-describe": "warn",
                "@vitest/no-focused-tests": "warn",
                "@vitest/no-conditional-tests": "warn",
                "@vitest/consistent-test-it": "warn",
                "@vitest/consistent-vitest-vi": "warn",
                "@vitest/no-hooks": "warn",
                "@vitest/no-restricted-vi-methods": "warn",
                "@vitest/consistent-test-filename": "warn",
                "@vitest/max-expects": "warn",
                "@vitest/no-alias-methods": "warn",
                "@vitest/no-conditional-expect": "warn",
                "@vitest/no-conditional-in-test": "warn",
                "@vitest/no-disabled-tests": "warn",
                "@vitest/no-done-callback": "warn",
                "@vitest/no-duplicate-hooks": "warn",
                "@vitest/no-large-snapshots": "warn",
                "@vitest/no-interpolation-in-snapshots": "warn",
                "@vitest/no-mocks-import": "warn",
                "@vitest/no-restricted-matchers": "warn",
                "@vitest/no-standalone-expect": "warn",
                "@vitest/no-test-prefixes": "warn",
                "@vitest/no-test-return-statement": "warn",
                "@vitest/prefer-called-with": "warn",
                "@vitest/prefer-to-be-falsy": "off",
                "@vitest/prefer-to-be-object": "warn",
                "@vitest/prefer-to-be-truthy": "off",
                "@vitest/prefer-to-have-length": "warn",
                "@vitest/prefer-equality-matcher": "warn",
                "@vitest/prefer-strict-equal": "warn",
                "@vitest/prefer-expect-resolves": "warn",
                "@vitest/prefer-each": "warn",
                "@vitest/prefer-hooks-on-top": "warn",
                "@vitest/prefer-hooks-in-order": "warn",
                "@vitest/prefer-mock-promise-shorthand": "warn",
                "@vitest/prefer-vi-mocked": "warn",
                "@vitest/prefer-snapshot-hint": "warn",
                "@vitest/require-top-level-describe": "warn",
                "@vitest/require-to-throw-message": "warn",
                "@vitest/require-hook": "warn",
                "@vitest/prefer-todo": "warn",
                "@vitest/prefer-spy-on": "warn",
                "@vitest/prefer-comparison-matcher": "warn",
                "@vitest/prefer-describe-function-title": "warn",
                "@vitest/prefer-to-contain": "warn",
                "@vitest/prefer-expect-assertions": "warn",
                "@vitest/prefer-to-be": "warn",
                "@vitest/padding-around-after-all-blocks": "warn",
                "@vitest/padding-around-after-each-blocks": "warn",
                "@vitest/padding-around-all": "warn",
                "@vitest/padding-around-before-all-blocks": "warn",
                "@vitest/padding-around-before-each-blocks": "warn",
                "@vitest/padding-around-describe-blocks": "warn",
                "@vitest/padding-around-expect-groups": "warn",
                "@vitest/padding-around-test-blocks": "warn",
                "@vitest/valid-expect-in-promise": "warn",
                "@vitest/expect-expect": "warn",
                "@vitest/no-identical-title": "warn",
                "@vitest/no-commented-out-tests": "warn",
                "@vitest/valid-title": "warn",
                "@vitest/valid-expect": "warn",
                "@vitest/valid-describe-callback": "warn",
                "@vitest/require-local-test-context-for-concurrent-snapshots": "warn",
                "@vitest/no-import-node-test": "warn",
                "@vitest/prefer-strict-boolean-matchers": "warn",
                "@vitest/require-mock-type-parameters": "warn",
                "@vitest/no-importing-vitest-globals": "off",
                "@vitest/prefer-importing-vitest-globals": "warn",
                "@vitest/prefer-called-once": "off",
                "@vitest/prefer-called-times": "warn"
              }
            },
            "recommended": {
              "name": "vitest/recommended",
              "plugins": {},
              "rules": {
                "vitest/expect-expect": "error",
                "vitest/no-identical-title": "error",
                "vitest/no-commented-out-tests": "error",
                "vitest/valid-title": "error",
                "vitest/valid-expect": "error",
                "vitest/valid-describe-callback": "error",
                "vitest/require-local-test-context-for-concurrent-snapshots": "error",
                "vitest/no-import-node-test": "error"
              }
            },
            "all": {
              "name": "vitest/all",
              "plugins": {},
              "rules": {
                "vitest/prefer-lowercase-title": "warn",
                "vitest/max-nested-describe": "warn",
                "vitest/no-focused-tests": "warn",
                "vitest/no-conditional-tests": "warn",
                "vitest/consistent-test-it": "warn",
                "vitest/consistent-vitest-vi": "warn",
                "vitest/no-hooks": "warn",
                "vitest/no-restricted-vi-methods": "warn",
                "vitest/consistent-test-filename": "warn",
                "vitest/max-expects": "warn",
                "vitest/no-alias-methods": "warn",
                "vitest/no-conditional-expect": "warn",
                "vitest/no-conditional-in-test": "warn",
                "vitest/no-disabled-tests": "warn",
                "vitest/no-done-callback": "warn",
                "vitest/no-duplicate-hooks": "warn",
                "vitest/no-large-snapshots": "warn",
                "vitest/no-interpolation-in-snapshots": "warn",
                "vitest/no-mocks-import": "warn",
                "vitest/no-restricted-matchers": "warn",
                "vitest/no-standalone-expect": "warn",
                "vitest/no-test-prefixes": "warn",
                "vitest/no-test-return-statement": "warn",
                "vitest/prefer-called-with": "warn",
                "vitest/prefer-to-be-falsy": "off",
                "vitest/prefer-to-be-object": "warn",
                "vitest/prefer-to-be-truthy": "off",
                "vitest/prefer-to-have-length": "warn",
                "vitest/prefer-equality-matcher": "warn",
                "vitest/prefer-strict-equal": "warn",
                "vitest/prefer-expect-resolves": "warn",
                "vitest/prefer-each": "warn",
                "vitest/prefer-hooks-on-top": "warn",
                "vitest/prefer-hooks-in-order": "warn",
                "vitest/prefer-mock-promise-shorthand": "warn",
                "vitest/prefer-vi-mocked": "warn",
                "vitest/prefer-snapshot-hint": "warn",
                "vitest/require-top-level-describe": "warn",
                "vitest/require-to-throw-message": "warn",
                "vitest/require-hook": "warn",
                "vitest/prefer-todo": "warn",
                "vitest/prefer-spy-on": "warn",
                "vitest/prefer-comparison-matcher": "warn",
                "vitest/prefer-describe-function-title": "warn",
                "vitest/prefer-to-contain": "warn",
                "vitest/prefer-expect-assertions": "warn",
                "vitest/prefer-to-be": "warn",
                "vitest/padding-around-after-all-blocks": "warn",
                "vitest/padding-around-after-each-blocks": "warn",
                "vitest/padding-around-all": "warn",
                "vitest/padding-around-before-all-blocks": "warn",
                "vitest/padding-around-before-each-blocks": "warn",
                "vitest/padding-around-describe-blocks": "warn",
                "vitest/padding-around-expect-groups": "warn",
                "vitest/padding-around-test-blocks": "warn",
                "vitest/valid-expect-in-promise": "warn",
                "vitest/expect-expect": "warn",
                "vitest/no-identical-title": "warn",
                "vitest/no-commented-out-tests": "warn",
                "vitest/valid-title": "warn",
                "vitest/valid-expect": "warn",
                "vitest/valid-describe-callback": "warn",
                "vitest/require-local-test-context-for-concurrent-snapshots": "warn",
                "vitest/no-import-node-test": "warn",
                "vitest/prefer-strict-boolean-matchers": "warn",
                "vitest/require-mock-type-parameters": "warn",
                "vitest/no-importing-vitest-globals": "off",
                "vitest/prefer-importing-vitest-globals": "warn",
                "vitest/prefer-called-once": "off",
                "vitest/prefer-called-times": "warn"
              }
            },
            "env": {
              "name": "vitest/env",
              "languageOptions": {
                "globals": {
                  "suite": "writable",
                  "test": "writable",
                  "describe": "writable",
                  "it": "writable",
                  "expectTypeOf": "writable",
                  "assertType": "writable",
                  "expect": "writable",
                  "assert": "writable",
                  "chai": "writable",
                  "vitest": "writable",
                  "vi": "writable",
                  "beforeAll": "writable",
                  "afterAll": "writable",
                  "beforeEach": "writable",
                  "afterEach": "writable",
                  "onTestFailed": "writable",
                  "onTestFinished": "writable"
                }
              }
            }
          }
        }
      },
      "rules": {
        "vitest/expect-expect": "error",
        "vitest/no-identical-title": "error",
        "vitest/no-commented-out-tests": "error",
        "vitest/valid-title": "error",
        "vitest/valid-expect": "error",
        "vitest/valid-describe-callback": "error",
        "vitest/require-local-test-context-for-concurrent-snapshots": "error",
        "vitest/no-import-node-test": "error",
        "vitest/consistent-test-filename": "error"
      }
    },
    {
      "files": ["**/*.ts"],
      "plugins": {
        "import-access": {
          "rules": {
            "jsdoc": {
              "meta": {
                "type": "problem",
                "docs": {
                  "description": "Prohibit importing private exports.",
                  "url": "TODO"
                },
                "messages": {
                  "no-program": "Type information is not available for this file. See https://typescript-eslint.io/getting-started/typed-linting/ for how to set this up.",
                  "package": "Cannot import a package-private export '{{ identifier }}'",
                  "package:reexport": "Cannot re-export a package-private export '{{ identifier }}'",
                  "private": "Cannot import a private export '{{ identifier }}'",
                  "private:reexport": "Cannot re-export a private export '{{ identifier }}'"
                },
                "schema": [
                  {
                    "type": "object",
                    "properties": {
                      "indexLoophole": { "type": "boolean" },
                      "filenameLoophole": { "type": "boolean" },
                      "defaultImportability": {
                        "type": "string",
                        "enum": ["public", "package", "private"]
                      },
                      "treatSelfReferenceAs": {
                        "type": "string",
                        "enum": ["external", "internal"]
                      },
                      "excludeSourcePatterns": {
                        "type": "array",
                        "items": { "type": "string" }
                      }
                    },
                    "additionalProperties": false
                  }
                ]
              },
              "defaultOptions": [
                {
                  "indexLoophole": true,
                  "filenameLoophole": false,
                  "defaultImportability": "public",
                  "treatSelfReferenceAs": "external",
                  "excludeSourcePatterns": []
                }
              ]
            }
          }
        }
      },
      "rules": { "import-access/jsdoc": "error" }
    },
    {
      "files": ["bin/eslint-todo.mjs"],
      "languageOptions": {
        "globals": {
          "AbortController": false,
          "AbortSignal": false,
          "AsyncDisposableStack": false,
          "atob": false,
          "Blob": false,
          "BroadcastChannel": false,
          "btoa": false,
          "Buffer": false,
          "ByteLengthQueuingStrategy": false,
          "clearImmediate": false,
          "clearInterval": false,
          "clearTimeout": false,
          "CloseEvent": false,
          "CompressionStream": false,
          "console": false,
          "CountQueuingStrategy": false,
          "crypto": false,
          "Crypto": false,
          "CryptoKey": false,
          "CustomEvent": false,
          "DecompressionStream": false,
          "DisposableStack": false,
          "DOMException": false,
          "Event": false,
          "EventTarget": false,
          "fetch": false,
          "File": false,
          "FormData": false,
          "global": false,
          "Headers": false,
          "MessageChannel": false,
          "MessageEvent": false,
          "MessagePort": false,
          "navigator": false,
          "Navigator": false,
          "performance": false,
          "Performance": false,
          "PerformanceEntry": false,
          "PerformanceMark": false,
          "PerformanceMeasure": false,
          "PerformanceObserver": false,
          "PerformanceObserverEntryList": false,
          "PerformanceResourceTiming": false,
          "process": false,
          "queueMicrotask": false,
          "ReadableByteStreamController": false,
          "ReadableStream": false,
          "ReadableStreamBYOBReader": false,
          "ReadableStreamBYOBRequest": false,
          "ReadableStreamDefaultController": false,
          "ReadableStreamDefaultReader": false,
          "Request": false,
          "Response": false,
          "setImmediate": false,
          "setInterval": false,
          "setTimeout": false,
          "structuredClone": false,
          "SubtleCrypto": false,
          "SuppressedError": false,
          "TextDecoder": false,
          "TextDecoderStream": false,
          "TextEncoder": false,
          "TextEncoderStream": false,
          "TransformStream": false,
          "TransformStreamDefaultController": false,
          "URL": false,
          "URLPattern": false,
          "URLSearchParams": false,
          "WebAssembly": false,
          "WebSocket": false,
          "WritableStream": false,
          "WritableStreamDefaultController": false,
          "WritableStreamDefaultWriter": false
        }
      },
      "rules": { "unicorn/filename-case": "off" }
    },
    { "name": "@sushichan044/eslint-todo/setup" },
    {
      "ignores": [".eslint-todo.js"],
      "name": "@sushichan044/eslint-todo/ignore"
    }
  ],
  "dependencies": [
    "dist/_virtual/rolldown_runtime.mjs",
    "dist/utils/string.mjs",
    "dist/todofile/v2.mjs",
    "dist/config/config.mjs",
    "dist/path.mjs",
    "dist/serializer.mjs",
    "dist/utils/command.mjs",
    "dist/utils/git.mjs",
    "dist/utils/import.mjs",
    "dist/index.mjs",
    "dist/config/validation.mjs",
    "dist/config/file.mjs",
    "dist/config/resolve.mjs",
    "dist/suppressions-json/rule-based.mjs",
    "dist/suppressions-json/index.mjs",
    "dist/config/index.mjs",
    "dist/todofile/v1.mjs",
    "dist/eslint/index.mjs",
    "eslint.config.ts"
  ],
  "payload": {
    "configs": [
      {
        "languageOptions": { "ecmaVersion": "latest", "sourceType": "module" },
        "name": "eslint/defaults/languages",
        "index": 0
      },
      { "name": "eslint/defaults/ignores", "index": 1 },
      { "name": "eslint/defaults/files", "index": 2 },
      {
        "languageOptions": {
          "ecmaVersion": "latest",
          "sourceType": "commonjs"
        },
        "name": "eslint/defaults/files-cjs",
        "index": 3
      },
      { "index": 4 },
      { "name": "@repo/eslint-config/base__gitignore", "index": 5 },
      { "name": "@repo/eslint-config/base", "index": 6 },
      {
        "name": "@repo/eslint-config/base__@virtual-live-lab/eslint-config/stylistic__config-prettier",
        "index": 7
      },
      {
        "plugins": { "perfectionist": {} },
        "name": "@repo/eslint-config/base__@virtual-live-lab/eslint-config/stylistic",
        "index": 8
      },
      {
        "name": "@repo/eslint-config/base__@virtual-live-lab/eslint-config/stylistic",
        "index": 9
      },
      {
        "name": "@repo/eslint-config/base__@virtual-live-lab/eslint-config/typescript__typescript-eslint/base",
        "languageOptions": {
          "parser": "typescript-eslint/parser",
          "sourceType": "module"
        },
        "plugins": { "@typescript-eslint": {} },
        "index": 10
      },
      {
        "name": "@repo/eslint-config/base__@virtual-live-lab/eslint-config/typescript__typescript-eslint/eslint-recommended",
        "index": 11
      },
      {
        "name": "@repo/eslint-config/base__@virtual-live-lab/eslint-config/typescript__typescript-eslint/recommended-type-checked",
        "index": 12
      },
      {
        "name": "@repo/eslint-config/base__@virtual-live-lab/eslint-config/typescript__typescript-eslint/base",
        "languageOptions": {
          "parser": "typescript-eslint/parser",
          "sourceType": "module"
        },
        "plugins": { "@typescript-eslint": {} },
        "index": 13
      },
      {
        "name": "@repo/eslint-config/base__@virtual-live-lab/eslint-config/typescript__typescript-eslint/eslint-recommended",
        "index": 14
      },
      {
        "name": "@repo/eslint-config/base__@virtual-live-lab/eslint-config/typescript__typescript-eslint/stylistic-type-checked",
        "index": 15
      },
      {
        "languageOptions": {},
        "name": "@repo/eslint-config/base__@virtual-live-lab/eslint-config/typescript",
        "plugins": { "@stylistic/ts": {} },
        "index": 16
      },
      {
        "languageOptions": {},
        "name": "@repo/eslint-config/unicorn__unicorn/recommended",
        "plugins": { "unicorn": {} },
        "index": 17
      },
      { "name": "@repo/eslint-config/unicorn", "index": 18 },
      { "plugins": { "vitest": {} }, "index": 19 },
      { "plugins": { "import-access": {} }, "index": 20 },
      { "languageOptions": {}, "index": 21 },
      { "name": "@sushichan044/eslint-todo/setup", "index": 22 },
      { "name": "@sushichan044/eslint-todo/ignore", "index": 23 }
    ],
    "files": null,
    "meta": {
      "basePath": "/Users/sushichan044/workspace/github.com/sushichan044/eslint-todo",
      "configPath": "/Users/sushichan044/workspace/github.com/sushichan044/eslint-todo/eslint.config.ts",
      "lastUpdate": 1753281282123
    },
    "rules": {
      "accessor-pairs": {
        "type": "suggestion",
        "defaultOptions": [
          {
            "enforceForClassMembers": true,
            "getWithoutSet": false,
            "setWithoutGet": true
          }
        ],
        "docs": {
          "description": "Enforce getter and setter pairs in objects and classes",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/accessor-pairs"
        },
        "name": "accessor-pairs",
        "plugin": "eslint"
      },
      "array-bracket-newline": {
        "deprecated": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "array-bracket-newline",
                "url": "https://eslint.style/rules/array-bracket-newline"
              }
            }
          ]
        },
        "type": "layout",
        "docs": {
          "description": "Enforce linebreaks after opening and before closing array brackets",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/array-bracket-newline"
        },
        "fixable": "whitespace",
        "name": "array-bracket-newline",
        "plugin": "eslint"
      },
      "array-bracket-spacing": {
        "deprecated": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "array-bracket-spacing",
                "url": "https://eslint.style/rules/array-bracket-spacing"
              }
            }
          ]
        },
        "type": "layout",
        "docs": {
          "description": "Enforce consistent spacing inside array brackets",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/array-bracket-spacing"
        },
        "fixable": "whitespace",
        "name": "array-bracket-spacing",
        "plugin": "eslint"
      },
      "array-callback-return": {
        "type": "problem",
        "defaultOptions": [
          { "allowImplicit": false, "checkForEach": false, "allowVoid": false }
        ],
        "docs": {
          "description": "Enforce `return` statements in callbacks of array methods",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/array-callback-return"
        },
        "hasSuggestions": true,
        "name": "array-callback-return",
        "plugin": "eslint"
      },
      "array-element-newline": {
        "deprecated": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "array-element-newline",
                "url": "https://eslint.style/rules/array-element-newline"
              }
            }
          ]
        },
        "type": "layout",
        "docs": {
          "description": "Enforce line breaks after each array element",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/array-element-newline"
        },
        "fixable": "whitespace",
        "name": "array-element-newline",
        "plugin": "eslint"
      },
      "arrow-body-style": {
        "type": "suggestion",
        "defaultOptions": ["as-needed"],
        "docs": {
          "description": "Require braces around arrow function bodies",
          "recommended": false,
          "frozen": true,
          "url": "https://eslint.org/docs/latest/rules/arrow-body-style"
        },
        "fixable": "code",
        "name": "arrow-body-style",
        "plugin": "eslint"
      },
      "arrow-parens": {
        "deprecated": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "arrow-parens",
                "url": "https://eslint.style/rules/arrow-parens"
              }
            }
          ]
        },
        "type": "layout",
        "docs": {
          "description": "Require parentheses around arrow function arguments",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/arrow-parens"
        },
        "fixable": "code",
        "name": "arrow-parens",
        "plugin": "eslint"
      },
      "arrow-spacing": {
        "deprecated": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "arrow-spacing",
                "url": "https://eslint.style/rules/arrow-spacing"
              }
            }
          ]
        },
        "type": "layout",
        "docs": {
          "description": "Enforce consistent spacing before and after the arrow in arrow functions",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/arrow-spacing"
        },
        "fixable": "whitespace",
        "name": "arrow-spacing",
        "plugin": "eslint"
      },
      "block-scoped-var": {
        "type": "suggestion",
        "docs": {
          "description": "Enforce the use of variables within the scope they are defined",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/block-scoped-var"
        },
        "name": "block-scoped-var",
        "plugin": "eslint"
      },
      "block-spacing": {
        "deprecated": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "block-spacing",
                "url": "https://eslint.style/rules/block-spacing"
              }
            }
          ]
        },
        "type": "layout",
        "docs": {
          "description": "Disallow or enforce spaces inside of blocks after opening block and before closing block",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/block-spacing"
        },
        "fixable": "whitespace",
        "name": "block-spacing",
        "plugin": "eslint"
      },
      "brace-style": {
        "deprecated": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "brace-style",
                "url": "https://eslint.style/rules/brace-style"
              }
            }
          ]
        },
        "type": "layout",
        "docs": {
          "description": "Enforce consistent brace style for blocks",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/brace-style"
        },
        "fixable": "whitespace",
        "name": "brace-style",
        "plugin": "eslint"
      },
      "callback-return": {
        "deprecated": {
          "message": "Node.js rules were moved out of ESLint core.",
          "url": "https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules",
          "deprecatedSince": "7.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "message": "eslint-plugin-n now maintains deprecated Node.js-related rules.",
              "plugin": {
                "name": "eslint-plugin-n",
                "url": "https://github.com/eslint-community/eslint-plugin-n"
              },
              "rule": {
                "name": "callback-return",
                "url": "https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/callback-return.md"
              }
            }
          ]
        },
        "type": "suggestion",
        "docs": {
          "description": "Require `return` statements after callbacks",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/callback-return"
        },
        "name": "callback-return",
        "plugin": "eslint"
      },
      "camelcase": {
        "type": "suggestion",
        "defaultOptions": [
          {
            "allow": [],
            "ignoreDestructuring": false,
            "ignoreGlobals": false,
            "ignoreImports": false,
            "properties": "always"
          }
        ],
        "docs": {
          "description": "Enforce camelcase naming convention",
          "recommended": false,
          "frozen": true,
          "url": "https://eslint.org/docs/latest/rules/camelcase"
        },
        "name": "camelcase",
        "plugin": "eslint"
      },
      "capitalized-comments": {
        "type": "suggestion",
        "docs": {
          "description": "Enforce or disallow capitalization of the first letter of a comment",
          "recommended": false,
          "frozen": true,
          "url": "https://eslint.org/docs/latest/rules/capitalized-comments"
        },
        "fixable": "code",
        "name": "capitalized-comments",
        "plugin": "eslint"
      },
      "class-methods-use-this": {
        "dialects": ["javascript", "typescript"],
        "language": "javascript",
        "type": "suggestion",
        "defaultOptions": [
          {
            "enforceForClassFields": true,
            "exceptMethods": [],
            "ignoreOverrideMethods": false
          }
        ],
        "docs": {
          "description": "Enforce that class methods utilize `this`",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/class-methods-use-this"
        },
        "name": "class-methods-use-this",
        "plugin": "eslint"
      },
      "comma-dangle": {
        "deprecated": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "comma-dangle",
                "url": "https://eslint.style/rules/comma-dangle"
              }
            }
          ]
        },
        "type": "layout",
        "docs": {
          "description": "Require or disallow trailing commas",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/comma-dangle"
        },
        "fixable": "code",
        "name": "comma-dangle",
        "plugin": "eslint"
      },
      "comma-spacing": {
        "deprecated": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "comma-spacing",
                "url": "https://eslint.style/rules/comma-spacing"
              }
            }
          ]
        },
        "type": "layout",
        "docs": {
          "description": "Enforce consistent spacing before and after commas",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/comma-spacing"
        },
        "fixable": "whitespace",
        "name": "comma-spacing",
        "plugin": "eslint"
      },
      "comma-style": {
        "deprecated": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "comma-style",
                "url": "https://eslint.style/rules/comma-style"
              }
            }
          ]
        },
        "type": "layout",
        "docs": {
          "description": "Enforce consistent comma style",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/comma-style"
        },
        "fixable": "code",
        "name": "comma-style",
        "plugin": "eslint"
      },
      "complexity": {
        "type": "suggestion",
        "defaultOptions": [20],
        "docs": {
          "description": "Enforce a maximum cyclomatic complexity allowed in a program",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/complexity"
        },
        "name": "complexity",
        "plugin": "eslint"
      },
      "computed-property-spacing": {
        "deprecated": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "computed-property-spacing",
                "url": "https://eslint.style/rules/computed-property-spacing"
              }
            }
          ]
        },
        "type": "layout",
        "docs": {
          "description": "Enforce consistent spacing inside computed property brackets",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/computed-property-spacing"
        },
        "fixable": "whitespace",
        "name": "computed-property-spacing",
        "plugin": "eslint"
      },
      "consistent-return": {
        "type": "suggestion",
        "docs": {
          "description": "Require `return` statements to either always or never specify values",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/consistent-return"
        },
        "defaultOptions": [{ "treatUndefinedAsUnspecified": false }],
        "name": "consistent-return",
        "plugin": "eslint"
      },
      "consistent-this": {
        "type": "suggestion",
        "docs": {
          "description": "Enforce consistent naming when capturing the current execution context",
          "recommended": false,
          "frozen": true,
          "url": "https://eslint.org/docs/latest/rules/consistent-this"
        },
        "defaultOptions": ["that"],
        "name": "consistent-this",
        "plugin": "eslint"
      },
      "constructor-super": {
        "type": "problem",
        "docs": {
          "description": "Require `super()` calls in constructors",
          "recommended": true,
          "url": "https://eslint.org/docs/latest/rules/constructor-super"
        },
        "name": "constructor-super",
        "plugin": "eslint"
      },
      "curly": {
        "type": "suggestion",
        "docs": {
          "description": "Enforce consistent brace style for all control statements",
          "recommended": false,
          "frozen": true,
          "url": "https://eslint.org/docs/latest/rules/curly"
        },
        "defaultOptions": ["all"],
        "fixable": "code",
        "name": "curly",
        "plugin": "eslint"
      },
      "default-case": {
        "type": "suggestion",
        "defaultOptions": [{}],
        "docs": {
          "description": "Require `default` cases in `switch` statements",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/default-case"
        },
        "name": "default-case",
        "plugin": "eslint"
      },
      "default-case-last": {
        "type": "suggestion",
        "docs": {
          "description": "Enforce `default` clauses in `switch` statements to be last",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/default-case-last"
        },
        "name": "default-case-last",
        "plugin": "eslint"
      },
      "default-param-last": {
        "dialects": ["javascript", "typescript"],
        "language": "javascript",
        "type": "suggestion",
        "docs": {
          "description": "Enforce default parameters to be last",
          "recommended": false,
          "frozen": true,
          "url": "https://eslint.org/docs/latest/rules/default-param-last"
        },
        "name": "default-param-last",
        "plugin": "eslint"
      },
      "dot-location": {
        "deprecated": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "dot-location",
                "url": "https://eslint.style/rules/dot-location"
              }
            }
          ]
        },
        "type": "layout",
        "docs": {
          "description": "Enforce consistent newlines before and after dots",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/dot-location"
        },
        "fixable": "code",
        "name": "dot-location",
        "plugin": "eslint"
      },
      "dot-notation": {
        "type": "suggestion",
        "defaultOptions": [{ "allowKeywords": true, "allowPattern": "" }],
        "docs": {
          "description": "Enforce dot notation whenever possible",
          "recommended": false,
          "frozen": true,
          "url": "https://eslint.org/docs/latest/rules/dot-notation"
        },
        "fixable": "code",
        "name": "dot-notation",
        "plugin": "eslint"
      },
      "eol-last": {
        "deprecated": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "eol-last",
                "url": "https://eslint.style/rules/eol-last"
              }
            }
          ]
        },
        "type": "layout",
        "docs": {
          "description": "Require or disallow newline at the end of files",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/eol-last"
        },
        "fixable": "whitespace",
        "name": "eol-last",
        "plugin": "eslint"
      },
      "eqeqeq": {
        "type": "suggestion",
        "hasSuggestions": true,
        "docs": {
          "description": "Require the use of `===` and `!==`",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/eqeqeq"
        },
        "fixable": "code",
        "name": "eqeqeq",
        "plugin": "eslint"
      },
      "for-direction": {
        "type": "problem",
        "docs": {
          "description": "Enforce `for` loop update clause moving the counter in the right direction",
          "recommended": true,
          "url": "https://eslint.org/docs/latest/rules/for-direction"
        },
        "fixable": null,
        "name": "for-direction",
        "plugin": "eslint"
      },
      "func-call-spacing": {
        "deprecated": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "function-call-spacing",
                "url": "https://eslint.style/rules/function-call-spacing"
              }
            }
          ]
        },
        "type": "layout",
        "docs": {
          "description": "Require or disallow spacing between function identifiers and their invocations",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/func-call-spacing"
        },
        "fixable": "whitespace",
        "name": "func-call-spacing",
        "plugin": "eslint"
      },
      "func-name-matching": {
        "type": "suggestion",
        "docs": {
          "description": "Require function names to match the name of the variable or property to which they are assigned",
          "recommended": false,
          "frozen": true,
          "url": "https://eslint.org/docs/latest/rules/func-name-matching"
        },
        "name": "func-name-matching",
        "plugin": "eslint"
      },
      "func-names": {
        "type": "suggestion",
        "defaultOptions": ["always", {}],
        "docs": {
          "description": "Require or disallow named `function` expressions",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/func-names"
        },
        "name": "func-names",
        "plugin": "eslint"
      },
      "func-style": {
        "dialects": ["javascript", "typescript"],
        "language": "javascript",
        "type": "suggestion",
        "defaultOptions": [
          "expression",
          {
            "allowArrowFunctions": false,
            "allowTypeAnnotation": false,
            "overrides": {}
          }
        ],
        "docs": {
          "description": "Enforce the consistent use of either `function` declarations or expressions assigned to variables",
          "recommended": false,
          "frozen": true,
          "url": "https://eslint.org/docs/latest/rules/func-style"
        },
        "name": "func-style",
        "plugin": "eslint"
      },
      "function-call-argument-newline": {
        "deprecated": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "function-call-argument-newline",
                "url": "https://eslint.style/rules/function-call-argument-newline"
              }
            }
          ]
        },
        "type": "layout",
        "docs": {
          "description": "Enforce line breaks between arguments of a function call",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/function-call-argument-newline"
        },
        "fixable": "whitespace",
        "name": "function-call-argument-newline",
        "plugin": "eslint"
      },
      "function-paren-newline": {
        "deprecated": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "function-paren-newline",
                "url": "https://eslint.style/rules/function-paren-newline"
              }
            }
          ]
        },
        "type": "layout",
        "docs": {
          "description": "Enforce consistent line breaks inside function parentheses",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/function-paren-newline"
        },
        "fixable": "whitespace",
        "name": "function-paren-newline",
        "plugin": "eslint"
      },
      "generator-star-spacing": {
        "deprecated": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "generator-star-spacing",
                "url": "https://eslint.style/rules/generator-star-spacing"
              }
            }
          ]
        },
        "type": "layout",
        "docs": {
          "description": "Enforce consistent spacing around `*` operators in generator functions",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/generator-star-spacing"
        },
        "fixable": "whitespace",
        "name": "generator-star-spacing",
        "plugin": "eslint"
      },
      "getter-return": {
        "type": "problem",
        "defaultOptions": [{ "allowImplicit": false }],
        "docs": {
          "description": "Enforce `return` statements in getters",
          "recommended": true,
          "url": "https://eslint.org/docs/latest/rules/getter-return"
        },
        "fixable": null,
        "name": "getter-return",
        "plugin": "eslint"
      },
      "global-require": {
        "deprecated": {
          "message": "Node.js rules were moved out of ESLint core.",
          "url": "https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules",
          "deprecatedSince": "7.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "message": "eslint-plugin-n now maintains deprecated Node.js-related rules.",
              "plugin": {
                "name": "eslint-plugin-n",
                "url": "https://github.com/eslint-community/eslint-plugin-n"
              },
              "rule": {
                "name": "global-require",
                "url": "https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/global-require.md"
              }
            }
          ]
        },
        "type": "suggestion",
        "docs": {
          "description": "Require `require()` calls to be placed at top-level module scope",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/global-require"
        },
        "name": "global-require",
        "plugin": "eslint"
      },
      "grouped-accessor-pairs": {
        "type": "suggestion",
        "defaultOptions": ["anyOrder"],
        "docs": {
          "description": "Require grouped accessor pairs in object literals and classes",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/grouped-accessor-pairs"
        },
        "name": "grouped-accessor-pairs",
        "plugin": "eslint"
      },
      "guard-for-in": {
        "type": "suggestion",
        "docs": {
          "description": "Require `for-in` loops to include an `if` statement",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/guard-for-in"
        },
        "name": "guard-for-in",
        "plugin": "eslint"
      },
      "handle-callback-err": {
        "deprecated": {
          "message": "Node.js rules were moved out of ESLint core.",
          "url": "https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules",
          "deprecatedSince": "7.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "message": "eslint-plugin-n now maintains deprecated Node.js-related rules.",
              "plugin": {
                "name": "eslint-plugin-n",
                "url": "https://github.com/eslint-community/eslint-plugin-n"
              },
              "rule": {
                "name": "handle-callback-err",
                "url": "https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/handle-callback-err.md"
              }
            }
          ]
        },
        "type": "suggestion",
        "docs": {
          "description": "Require error handling in callbacks",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/handle-callback-err"
        },
        "name": "handle-callback-err",
        "plugin": "eslint"
      },
      "id-blacklist": {
        "deprecated": {
          "message": "The rule was renamed.",
          "url": "https://eslint.org/blog/2020/07/eslint-v7.5.0-released/#deprecating-id-blacklist",
          "deprecatedSince": "7.5.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "id-denylist",
                "url": "https://eslint.org/docs/rules/id-denylist"
              }
            }
          ]
        },
        "type": "suggestion",
        "docs": {
          "description": "Disallow specified identifiers",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/id-blacklist"
        },
        "name": "id-blacklist",
        "plugin": "eslint"
      },
      "id-denylist": {
        "type": "suggestion",
        "defaultOptions": [],
        "docs": {
          "description": "Disallow specified identifiers",
          "recommended": false,
          "frozen": true,
          "url": "https://eslint.org/docs/latest/rules/id-denylist"
        },
        "name": "id-denylist",
        "plugin": "eslint"
      },
      "id-length": {
        "type": "suggestion",
        "defaultOptions": [
          {
            "exceptionPatterns": [],
            "exceptions": [],
            "min": 2,
            "properties": "always"
          }
        ],
        "docs": {
          "description": "Enforce minimum and maximum identifier lengths",
          "recommended": false,
          "frozen": true,
          "url": "https://eslint.org/docs/latest/rules/id-length"
        },
        "name": "id-length",
        "plugin": "eslint"
      },
      "id-match": {
        "type": "suggestion",
        "defaultOptions": [
          "^.+$",
          {
            "classFields": false,
            "ignoreDestructuring": false,
            "onlyDeclarations": false,
            "properties": false
          }
        ],
        "docs": {
          "description": "Require identifiers to match a specified regular expression",
          "recommended": false,
          "frozen": true,
          "url": "https://eslint.org/docs/latest/rules/id-match"
        },
        "name": "id-match",
        "plugin": "eslint"
      },
      "implicit-arrow-linebreak": {
        "deprecated": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "implicit-arrow-linebreak",
                "url": "https://eslint.style/rules/implicit-arrow-linebreak"
              }
            }
          ]
        },
        "type": "layout",
        "docs": {
          "description": "Enforce the location of arrow function bodies",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/implicit-arrow-linebreak"
        },
        "fixable": "whitespace",
        "name": "implicit-arrow-linebreak",
        "plugin": "eslint"
      },
      "indent": {
        "deprecated": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "indent",
                "url": "https://eslint.style/rules/indent"
              }
            }
          ]
        },
        "type": "layout",
        "docs": {
          "description": "Enforce consistent indentation",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/indent"
        },
        "fixable": "whitespace",
        "name": "indent",
        "plugin": "eslint"
      },
      "indent-legacy": {
        "type": "layout",
        "docs": {
          "description": "Enforce consistent indentation",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/indent-legacy"
        },
        "deprecated": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "4.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "indent",
                "url": "https://eslint.style/rules/indent"
              }
            }
          ]
        },
        "fixable": "whitespace",
        "name": "indent-legacy",
        "plugin": "eslint"
      },
      "init-declarations": {
        "type": "suggestion",
        "dialects": ["typescript", "javascript"],
        "language": "javascript",
        "docs": {
          "description": "Require or disallow initialization in variable declarations",
          "recommended": false,
          "frozen": true,
          "url": "https://eslint.org/docs/latest/rules/init-declarations"
        },
        "name": "init-declarations",
        "plugin": "eslint"
      },
      "jsx-quotes": {
        "deprecated": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "jsx-quotes",
                "url": "https://eslint.style/rules/jsx-quotes"
              }
            }
          ]
        },
        "type": "layout",
        "docs": {
          "description": "Enforce the consistent use of either double or single quotes in JSX attributes",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/jsx-quotes"
        },
        "fixable": "whitespace",
        "name": "jsx-quotes",
        "plugin": "eslint"
      },
      "key-spacing": {
        "deprecated": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "key-spacing",
                "url": "https://eslint.style/rules/key-spacing"
              }
            }
          ]
        },
        "type": "layout",
        "docs": {
          "description": "Enforce consistent spacing between keys and values in object literal properties",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/key-spacing"
        },
        "fixable": "whitespace",
        "name": "key-spacing",
        "plugin": "eslint"
      },
      "keyword-spacing": {
        "deprecated": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "keyword-spacing",
                "url": "https://eslint.style/rules/keyword-spacing"
              }
            }
          ]
        },
        "type": "layout",
        "docs": {
          "description": "Enforce consistent spacing before and after keywords",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/keyword-spacing"
        },
        "fixable": "whitespace",
        "name": "keyword-spacing",
        "plugin": "eslint"
      },
      "line-comment-position": {
        "deprecated": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "9.3.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "line-comment-position",
                "url": "https://eslint.style/rules/line-comment-position"
              }
            }
          ]
        },
        "type": "layout",
        "docs": {
          "description": "Enforce position of line comments",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/line-comment-position"
        },
        "name": "line-comment-position",
        "plugin": "eslint"
      },
      "linebreak-style": {
        "deprecated": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "linebreak-style",
                "url": "https://eslint.style/rules/linebreak-style"
              }
            }
          ]
        },
        "type": "layout",
        "docs": {
          "description": "Enforce consistent linebreak style",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/linebreak-style"
        },
        "fixable": "whitespace",
        "name": "linebreak-style",
        "plugin": "eslint"
      },
      "lines-around-comment": {
        "deprecated": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "lines-around-comment",
                "url": "https://eslint.style/rules/lines-around-comment"
              }
            }
          ]
        },
        "type": "layout",
        "docs": {
          "description": "Require empty lines around comments",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/lines-around-comment"
        },
        "fixable": "whitespace",
        "name": "lines-around-comment",
        "plugin": "eslint"
      },
      "lines-around-directive": {
        "type": "layout",
        "docs": {
          "description": "Require or disallow newlines around directives",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/lines-around-directive"
        },
        "fixable": "whitespace",
        "deprecated": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/blog/2017/06/eslint-v4.0.0-released/",
          "deprecatedSince": "4.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "message": "The new rule moved to a plugin.",
              "url": "https://eslint.org/docs/latest/rules/padding-line-between-statements#examples",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "padding-line-between-statements",
                "url": "https://eslint.style/rules/padding-line-between-statements"
              }
            }
          ]
        },
        "name": "lines-around-directive",
        "plugin": "eslint"
      },
      "lines-between-class-members": {
        "deprecated": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "lines-between-class-members",
                "url": "https://eslint.style/rules/lines-between-class-members"
              }
            }
          ]
        },
        "type": "layout",
        "docs": {
          "description": "Require or disallow an empty line between class members",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/lines-between-class-members"
        },
        "fixable": "whitespace",
        "name": "lines-between-class-members",
        "plugin": "eslint"
      },
      "logical-assignment-operators": {
        "type": "suggestion",
        "docs": {
          "description": "Require or disallow logical assignment operator shorthand",
          "recommended": false,
          "frozen": true,
          "url": "https://eslint.org/docs/latest/rules/logical-assignment-operators"
        },
        "fixable": "code",
        "hasSuggestions": true,
        "name": "logical-assignment-operators",
        "plugin": "eslint"
      },
      "max-classes-per-file": {
        "type": "suggestion",
        "docs": {
          "description": "Enforce a maximum number of classes per file",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/max-classes-per-file"
        },
        "name": "max-classes-per-file",
        "plugin": "eslint"
      },
      "max-depth": {
        "type": "suggestion",
        "docs": {
          "description": "Enforce a maximum depth that blocks can be nested",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/max-depth"
        },
        "name": "max-depth",
        "plugin": "eslint"
      },
      "max-len": {
        "deprecated": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "max-len",
                "url": "https://eslint.style/rules/max-len"
              }
            }
          ]
        },
        "type": "layout",
        "docs": {
          "description": "Enforce a maximum line length",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/max-len"
        },
        "name": "max-len",
        "plugin": "eslint"
      },
      "max-lines": {
        "type": "suggestion",
        "docs": {
          "description": "Enforce a maximum number of lines per file",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/max-lines"
        },
        "name": "max-lines",
        "plugin": "eslint"
      },
      "max-lines-per-function": {
        "type": "suggestion",
        "docs": {
          "description": "Enforce a maximum number of lines of code in a function",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/max-lines-per-function"
        },
        "name": "max-lines-per-function",
        "plugin": "eslint"
      },
      "max-nested-callbacks": {
        "type": "suggestion",
        "docs": {
          "description": "Enforce a maximum depth that callbacks can be nested",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/max-nested-callbacks"
        },
        "name": "max-nested-callbacks",
        "plugin": "eslint"
      },
      "max-params": {
        "type": "suggestion",
        "dialects": ["typescript", "javascript"],
        "language": "javascript",
        "docs": {
          "description": "Enforce a maximum number of parameters in function definitions",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/max-params"
        },
        "name": "max-params",
        "plugin": "eslint"
      },
      "max-statements": {
        "type": "suggestion",
        "docs": {
          "description": "Enforce a maximum number of statements allowed in function blocks",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/max-statements"
        },
        "name": "max-statements",
        "plugin": "eslint"
      },
      "max-statements-per-line": {
        "deprecated": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "max-statements-per-line",
                "url": "https://eslint.style/rules/max-statements-per-line"
              }
            }
          ]
        },
        "type": "layout",
        "docs": {
          "description": "Enforce a maximum number of statements allowed per line",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/max-statements-per-line"
        },
        "name": "max-statements-per-line",
        "plugin": "eslint"
      },
      "multiline-comment-style": {
        "deprecated": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "9.3.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "multiline-comment-style",
                "url": "https://eslint.style/rules/multiline-comment-style"
              }
            }
          ]
        },
        "type": "suggestion",
        "docs": {
          "description": "Enforce a particular style for multiline comments",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/multiline-comment-style"
        },
        "fixable": "whitespace",
        "name": "multiline-comment-style",
        "plugin": "eslint"
      },
      "multiline-ternary": {
        "deprecated": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "multiline-ternary",
                "url": "https://eslint.style/rules/multiline-ternary"
              }
            }
          ]
        },
        "type": "layout",
        "docs": {
          "description": "Enforce newlines between operands of ternary expressions",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/multiline-ternary"
        },
        "fixable": "whitespace",
        "name": "multiline-ternary",
        "plugin": "eslint"
      },
      "new-cap": {
        "type": "suggestion",
        "docs": {
          "description": "Require constructor names to begin with a capital letter",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/new-cap"
        },
        "defaultOptions": [
          {
            "capIsNew": true,
            "capIsNewExceptions": [
              "Array",
              "Boolean",
              "Date",
              "Error",
              "Function",
              "Number",
              "Object",
              "RegExp",
              "String",
              "Symbol",
              "BigInt"
            ],
            "newIsCap": true,
            "newIsCapExceptions": [],
            "properties": true
          }
        ],
        "name": "new-cap",
        "plugin": "eslint"
      },
      "new-parens": {
        "deprecated": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "new-parens",
                "url": "https://eslint.style/rules/new-parens"
              }
            }
          ]
        },
        "type": "layout",
        "docs": {
          "description": "Enforce or disallow parentheses when invoking a constructor with no arguments",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/new-parens"
        },
        "fixable": "code",
        "name": "new-parens",
        "plugin": "eslint"
      },
      "newline-after-var": {
        "type": "layout",
        "docs": {
          "description": "Require or disallow an empty line after variable declarations",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/newline-after-var"
        },
        "fixable": "whitespace",
        "deprecated": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/blog/2017/06/eslint-v4.0.0-released/",
          "deprecatedSince": "4.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "message": "The new rule moved to a plugin.",
              "url": "https://eslint.org/docs/latest/rules/padding-line-between-statements#examples",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "padding-line-between-statements",
                "url": "https://eslint.style/rules/padding-line-between-statements"
              }
            }
          ]
        },
        "name": "newline-after-var",
        "plugin": "eslint"
      },
      "newline-before-return": {
        "type": "layout",
        "docs": {
          "description": "Require an empty line before `return` statements",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/newline-before-return"
        },
        "fixable": "whitespace",
        "deprecated": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/blog/2017/06/eslint-v4.0.0-released/",
          "deprecatedSince": "4.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "message": "The new rule moved to a plugin.",
              "url": "https://eslint.org/docs/latest/rules/padding-line-between-statements#examples",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "padding-line-between-statements",
                "url": "https://eslint.style/rules/padding-line-between-statements"
              }
            }
          ]
        },
        "name": "newline-before-return",
        "plugin": "eslint"
      },
      "newline-per-chained-call": {
        "deprecated": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "newline-per-chained-call",
                "url": "https://eslint.style/rules/newline-per-chained-call"
              }
            }
          ]
        },
        "type": "layout",
        "docs": {
          "description": "Require a newline after each call in a method chain",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/newline-per-chained-call"
        },
        "fixable": "whitespace",
        "name": "newline-per-chained-call",
        "plugin": "eslint"
      },
      "no-alert": {
        "type": "suggestion",
        "docs": {
          "description": "Disallow the use of `alert`, `confirm`, and `prompt`",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/no-alert"
        },
        "name": "no-alert",
        "plugin": "eslint"
      },
      "no-array-constructor": {
        "dialects": ["javascript", "typescript"],
        "language": "javascript",
        "type": "suggestion",
        "docs": {
          "description": "Disallow `Array` constructors",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/no-array-constructor"
        },
        "fixable": "code",
        "hasSuggestions": true,
        "name": "no-array-constructor",
        "plugin": "eslint"
      },
      "no-async-promise-executor": {
        "type": "problem",
        "docs": {
          "description": "Disallow using an async function as a Promise executor",
          "recommended": true,
          "url": "https://eslint.org/docs/latest/rules/no-async-promise-executor"
        },
        "fixable": null,
        "name": "no-async-promise-executor",
        "plugin": "eslint"
      },
      "no-await-in-loop": {
        "type": "problem",
        "docs": {
          "description": "Disallow `await` inside of loops",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/no-await-in-loop"
        },
        "name": "no-await-in-loop",
        "plugin": "eslint"
      },
      "no-bitwise": {
        "type": "suggestion",
        "defaultOptions": [{ "allow": [], "int32Hint": false }],
        "docs": {
          "description": "Disallow bitwise operators",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/no-bitwise"
        },
        "name": "no-bitwise",
        "plugin": "eslint"
      },
      "no-buffer-constructor": {
        "deprecated": {
          "message": "Node.js rules were moved out of ESLint core.",
          "url": "https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules",
          "deprecatedSince": "7.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "message": "eslint-plugin-n now maintains deprecated Node.js-related rules.",
              "plugin": {
                "name": "eslint-plugin-n",
                "url": "https://github.com/eslint-community/eslint-plugin-n"
              },
              "rule": {
                "name": "no-deprecated-api",
                "url": "https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-deprecated-api.md"
              }
            }
          ]
        },
        "type": "problem",
        "docs": {
          "description": "Disallow use of the `Buffer()` constructor",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/no-buffer-constructor"
        },
        "name": "no-buffer-constructor",
        "plugin": "eslint"
      },
      "no-caller": {
        "type": "suggestion",
        "docs": {
          "description": "Disallow the use of `arguments.caller` or `arguments.callee`",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/no-caller"
        },
        "name": "no-caller",
        "plugin": "eslint"
      },
      "no-case-declarations": {
        "type": "suggestion",
        "docs": {
          "description": "Disallow lexical declarations in case clauses",
          "recommended": true,
          "url": "https://eslint.org/docs/latest/rules/no-case-declarations"
        },
        "hasSuggestions": true,
        "name": "no-case-declarations",
        "plugin": "eslint"
      },
      "no-catch-shadow": {
        "type": "suggestion",
        "docs": {
          "description": "Disallow `catch` clause parameters from shadowing variables in the outer scope",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/no-catch-shadow"
        },
        "deprecated": {
          "message": "This rule was renamed.",
          "url": "https://eslint.org/blog/2018/07/eslint-v5.1.0-released/",
          "deprecatedSince": "5.1.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-shadow",
                "url": "https://eslint.org/docs/rules/no-shadow"
              }
            }
          ]
        },
        "name": "no-catch-shadow",
        "plugin": "eslint"
      },
      "no-class-assign": {
        "type": "problem",
        "docs": {
          "description": "Disallow reassigning class members",
          "recommended": true,
          "url": "https://eslint.org/docs/latest/rules/no-class-assign"
        },
        "name": "no-class-assign",
        "plugin": "eslint"
      },
      "no-compare-neg-zero": {
        "type": "problem",
        "docs": {
          "description": "Disallow comparing against `-0`",
          "recommended": true,
          "url": "https://eslint.org/docs/latest/rules/no-compare-neg-zero"
        },
        "fixable": null,
        "name": "no-compare-neg-zero",
        "plugin": "eslint"
      },
      "no-cond-assign": {
        "type": "problem",
        "defaultOptions": ["except-parens"],
        "docs": {
          "description": "Disallow assignment operators in conditional expressions",
          "recommended": true,
          "url": "https://eslint.org/docs/latest/rules/no-cond-assign"
        },
        "name": "no-cond-assign",
        "plugin": "eslint"
      },
      "no-confusing-arrow": {
        "deprecated": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "no-confusing-arrow",
                "url": "https://eslint.style/rules/no-confusing-arrow"
              }
            }
          ]
        },
        "type": "suggestion",
        "docs": {
          "description": "Disallow arrow functions where they could be confused with comparisons",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/no-confusing-arrow"
        },
        "fixable": "code",
        "name": "no-confusing-arrow",
        "plugin": "eslint"
      },
      "no-console": {
        "type": "suggestion",
        "defaultOptions": [{}],
        "docs": {
          "description": "Disallow the use of `console`",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/no-console"
        },
        "hasSuggestions": true,
        "name": "no-console",
        "plugin": "eslint"
      },
      "no-const-assign": {
        "type": "problem",
        "docs": {
          "description": "Disallow reassigning `const`, `using`, and `await using` variables",
          "recommended": true,
          "url": "https://eslint.org/docs/latest/rules/no-const-assign"
        },
        "name": "no-const-assign",
        "plugin": "eslint"
      },
      "no-constant-binary-expression": {
        "type": "problem",
        "docs": {
          "description": "Disallow expressions where the operation doesn't affect the value",
          "recommended": true,
          "url": "https://eslint.org/docs/latest/rules/no-constant-binary-expression"
        },
        "name": "no-constant-binary-expression",
        "plugin": "eslint"
      },
      "no-constant-condition": {
        "type": "problem",
        "defaultOptions": [{ "checkLoops": "allExceptWhileTrue" }],
        "docs": {
          "description": "Disallow constant expressions in conditions",
          "recommended": true,
          "url": "https://eslint.org/docs/latest/rules/no-constant-condition"
        },
        "name": "no-constant-condition",
        "plugin": "eslint"
      },
      "no-constructor-return": {
        "type": "problem",
        "docs": {
          "description": "Disallow returning value from constructor",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/no-constructor-return"
        },
        "fixable": null,
        "name": "no-constructor-return",
        "plugin": "eslint"
      },
      "no-continue": {
        "type": "suggestion",
        "docs": {
          "description": "Disallow `continue` statements",
          "recommended": false,
          "frozen": true,
          "url": "https://eslint.org/docs/latest/rules/no-continue"
        },
        "name": "no-continue",
        "plugin": "eslint"
      },
      "no-control-regex": {
        "type": "problem",
        "docs": {
          "description": "Disallow control characters in regular expressions",
          "recommended": true,
          "url": "https://eslint.org/docs/latest/rules/no-control-regex"
        },
        "name": "no-control-regex",
        "plugin": "eslint"
      },
      "no-debugger": {
        "type": "problem",
        "docs": {
          "description": "Disallow the use of `debugger`",
          "recommended": true,
          "url": "https://eslint.org/docs/latest/rules/no-debugger"
        },
        "fixable": null,
        "name": "no-debugger",
        "plugin": "eslint"
      },
      "no-delete-var": {
        "type": "suggestion",
        "docs": {
          "description": "Disallow deleting variables",
          "recommended": true,
          "url": "https://eslint.org/docs/latest/rules/no-delete-var"
        },
        "name": "no-delete-var",
        "plugin": "eslint"
      },
      "no-div-regex": {
        "type": "suggestion",
        "docs": {
          "description": "Disallow equal signs explicitly at the beginning of regular expressions",
          "recommended": false,
          "frozen": true,
          "url": "https://eslint.org/docs/latest/rules/no-div-regex"
        },
        "fixable": "code",
        "name": "no-div-regex",
        "plugin": "eslint"
      },
      "no-dupe-args": {
        "type": "problem",
        "docs": {
          "description": "Disallow duplicate arguments in `function` definitions",
          "recommended": true,
          "url": "https://eslint.org/docs/latest/rules/no-dupe-args"
        },
        "name": "no-dupe-args",
        "plugin": "eslint"
      },
      "no-dupe-class-members": {
        "type": "problem",
        "dialects": ["javascript", "typescript"],
        "language": "javascript",
        "docs": {
          "description": "Disallow duplicate class members",
          "recommended": true,
          "url": "https://eslint.org/docs/latest/rules/no-dupe-class-members"
        },
        "name": "no-dupe-class-members",
        "plugin": "eslint"
      },
      "no-dupe-else-if": {
        "type": "problem",
        "docs": {
          "description": "Disallow duplicate conditions in if-else-if chains",
          "recommended": true,
          "url": "https://eslint.org/docs/latest/rules/no-dupe-else-if"
        },
        "name": "no-dupe-else-if",
        "plugin": "eslint"
      },
      "no-dupe-keys": {
        "type": "problem",
        "docs": {
          "description": "Disallow duplicate keys in object literals",
          "recommended": true,
          "url": "https://eslint.org/docs/latest/rules/no-dupe-keys"
        },
        "name": "no-dupe-keys",
        "plugin": "eslint"
      },
      "no-duplicate-case": {
        "type": "problem",
        "docs": {
          "description": "Disallow duplicate case labels",
          "recommended": true,
          "url": "https://eslint.org/docs/latest/rules/no-duplicate-case"
        },
        "name": "no-duplicate-case",
        "plugin": "eslint"
      },
      "no-duplicate-imports": {
        "dialects": ["javascript", "typescript"],
        "language": "javascript",
        "type": "problem",
        "defaultOptions": [
          { "includeExports": false, "allowSeparateTypeImports": false }
        ],
        "docs": {
          "description": "Disallow duplicate module imports",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/no-duplicate-imports"
        },
        "name": "no-duplicate-imports",
        "plugin": "eslint"
      },
      "no-else-return": {
        "type": "suggestion",
        "defaultOptions": [{ "allowElseIf": true }],
        "docs": {
          "description": "Disallow `else` blocks after `return` statements in `if` statements",
          "recommended": false,
          "frozen": true,
          "url": "https://eslint.org/docs/latest/rules/no-else-return"
        },
        "fixable": "code",
        "name": "no-else-return",
        "plugin": "eslint"
      },
      "no-empty": {
        "hasSuggestions": true,
        "type": "suggestion",
        "defaultOptions": [{ "allowEmptyCatch": false }],
        "docs": {
          "description": "Disallow empty block statements",
          "recommended": true,
          "url": "https://eslint.org/docs/latest/rules/no-empty"
        },
        "name": "no-empty",
        "plugin": "eslint"
      },
      "no-empty-character-class": {
        "type": "problem",
        "docs": {
          "description": "Disallow empty character classes in regular expressions",
          "recommended": true,
          "url": "https://eslint.org/docs/latest/rules/no-empty-character-class"
        },
        "name": "no-empty-character-class",
        "plugin": "eslint"
      },
      "no-empty-function": {
        "dialects": ["javascript", "typescript"],
        "language": "javascript",
        "type": "suggestion",
        "defaultOptions": [{ "allow": [] }],
        "docs": {
          "description": "Disallow empty functions",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/no-empty-function"
        },
        "name": "no-empty-function",
        "plugin": "eslint"
      },
      "no-empty-pattern": {
        "type": "problem",
        "defaultOptions": [{ "allowObjectPatternsAsParameters": false }],
        "docs": {
          "description": "Disallow empty destructuring patterns",
          "recommended": true,
          "url": "https://eslint.org/docs/latest/rules/no-empty-pattern"
        },
        "name": "no-empty-pattern",
        "plugin": "eslint"
      },
      "no-empty-static-block": {
        "type": "suggestion",
        "docs": {
          "description": "Disallow empty static blocks",
          "recommended": true,
          "url": "https://eslint.org/docs/latest/rules/no-empty-static-block"
        },
        "name": "no-empty-static-block",
        "plugin": "eslint"
      },
      "no-eq-null": {
        "type": "suggestion",
        "docs": {
          "description": "Disallow `null` comparisons without type-checking operators",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/no-eq-null"
        },
        "name": "no-eq-null",
        "plugin": "eslint"
      },
      "no-eval": {
        "type": "suggestion",
        "defaultOptions": [{ "allowIndirect": false }],
        "docs": {
          "description": "Disallow the use of `eval()`",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/no-eval"
        },
        "name": "no-eval",
        "plugin": "eslint"
      },
      "no-ex-assign": {
        "type": "problem",
        "docs": {
          "description": "Disallow reassigning exceptions in `catch` clauses",
          "recommended": true,
          "url": "https://eslint.org/docs/latest/rules/no-ex-assign"
        },
        "name": "no-ex-assign",
        "plugin": "eslint"
      },
      "no-extend-native": {
        "type": "suggestion",
        "defaultOptions": [{ "exceptions": [] }],
        "docs": {
          "description": "Disallow extending native types",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/no-extend-native"
        },
        "name": "no-extend-native",
        "plugin": "eslint"
      },
      "no-extra-bind": {
        "type": "suggestion",
        "docs": {
          "description": "Disallow unnecessary calls to `.bind()`",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/no-extra-bind"
        },
        "fixable": "code",
        "name": "no-extra-bind",
        "plugin": "eslint"
      },
      "no-extra-boolean-cast": {
        "type": "suggestion",
        "defaultOptions": [{}],
        "docs": {
          "description": "Disallow unnecessary boolean casts",
          "recommended": true,
          "frozen": true,
          "url": "https://eslint.org/docs/latest/rules/no-extra-boolean-cast"
        },
        "fixable": "code",
        "name": "no-extra-boolean-cast",
        "plugin": "eslint"
      },
      "no-extra-label": {
        "type": "suggestion",
        "docs": {
          "description": "Disallow unnecessary labels",
          "recommended": false,
          "frozen": true,
          "url": "https://eslint.org/docs/latest/rules/no-extra-label"
        },
        "fixable": "code",
        "name": "no-extra-label",
        "plugin": "eslint"
      },
      "no-extra-parens": {
        "deprecated": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "no-extra-parens",
                "url": "https://eslint.style/rules/no-extra-parens"
              }
            }
          ]
        },
        "type": "layout",
        "docs": {
          "description": "Disallow unnecessary parentheses",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/no-extra-parens"
        },
        "fixable": "code",
        "name": "no-extra-parens",
        "plugin": "eslint"
      },
      "no-extra-semi": {
        "deprecated": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "no-extra-semi",
                "url": "https://eslint.style/rules/no-extra-semi"
              }
            }
          ]
        },
        "type": "suggestion",
        "docs": {
          "description": "Disallow unnecessary semicolons",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/no-extra-semi"
        },
        "fixable": "code",
        "name": "no-extra-semi",
        "plugin": "eslint"
      },
      "no-fallthrough": {
        "type": "problem",
        "defaultOptions": [
          { "allowEmptyCase": false, "reportUnusedFallthroughComment": false }
        ],
        "docs": {
          "description": "Disallow fallthrough of `case` statements",
          "recommended": true,
          "url": "https://eslint.org/docs/latest/rules/no-fallthrough"
        },
        "name": "no-fallthrough",
        "plugin": "eslint"
      },
      "no-floating-decimal": {
        "deprecated": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "no-floating-decimal",
                "url": "https://eslint.style/rules/no-floating-decimal"
              }
            }
          ]
        },
        "type": "suggestion",
        "docs": {
          "description": "Disallow leading or trailing decimal points in numeric literals",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/no-floating-decimal"
        },
        "fixable": "code",
        "name": "no-floating-decimal",
        "plugin": "eslint"
      },
      "no-func-assign": {
        "type": "problem",
        "docs": {
          "description": "Disallow reassigning `function` declarations",
          "recommended": true,
          "url": "https://eslint.org/docs/latest/rules/no-func-assign"
        },
        "name": "no-func-assign",
        "plugin": "eslint"
      },
      "no-global-assign": {
        "type": "suggestion",
        "defaultOptions": [{ "exceptions": [] }],
        "docs": {
          "description": "Disallow assignments to native objects or read-only global variables",
          "recommended": true,
          "url": "https://eslint.org/docs/latest/rules/no-global-assign"
        },
        "name": "no-global-assign",
        "plugin": "eslint"
      },
      "no-implicit-coercion": {
        "hasSuggestions": true,
        "type": "suggestion",
        "docs": {
          "description": "Disallow shorthand type conversions",
          "recommended": false,
          "frozen": true,
          "url": "https://eslint.org/docs/latest/rules/no-implicit-coercion"
        },
        "fixable": "code",
        "defaultOptions": [
          {
            "allow": [],
            "boolean": true,
            "disallowTemplateShorthand": false,
            "number": true,
            "string": true
          }
        ],
        "name": "no-implicit-coercion",
        "plugin": "eslint"
      },
      "no-implicit-globals": {
        "type": "suggestion",
        "defaultOptions": [{ "lexicalBindings": false }],
        "docs": {
          "description": "Disallow declarations in the global scope",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/no-implicit-globals"
        },
        "name": "no-implicit-globals",
        "plugin": "eslint"
      },
      "no-implied-eval": {
        "type": "suggestion",
        "docs": {
          "description": "Disallow the use of `eval()`-like methods",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/no-implied-eval"
        },
        "name": "no-implied-eval",
        "plugin": "eslint"
      },
      "no-import-assign": {
        "type": "problem",
        "docs": {
          "description": "Disallow assigning to imported bindings",
          "recommended": true,
          "url": "https://eslint.org/docs/latest/rules/no-import-assign"
        },
        "name": "no-import-assign",
        "plugin": "eslint"
      },
      "no-inline-comments": {
        "type": "suggestion",
        "defaultOptions": [{}],
        "docs": {
          "description": "Disallow inline comments after code",
          "recommended": false,
          "frozen": true,
          "url": "https://eslint.org/docs/latest/rules/no-inline-comments"
        },
        "name": "no-inline-comments",
        "plugin": "eslint"
      },
      "no-inner-declarations": {
        "type": "problem",
        "defaultOptions": ["functions", { "blockScopedFunctions": "allow" }],
        "docs": {
          "description": "Disallow variable or `function` declarations in nested blocks",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/no-inner-declarations"
        },
        "name": "no-inner-declarations",
        "plugin": "eslint"
      },
      "no-invalid-regexp": {
        "type": "problem",
        "defaultOptions": [{}],
        "docs": {
          "description": "Disallow invalid regular expression strings in `RegExp` constructors",
          "recommended": true,
          "url": "https://eslint.org/docs/latest/rules/no-invalid-regexp"
        },
        "name": "no-invalid-regexp",
        "plugin": "eslint"
      },
      "no-invalid-this": {
        "dialects": ["javascript", "typescript"],
        "language": "javascript",
        "type": "suggestion",
        "defaultOptions": [{ "capIsConstructor": true }],
        "docs": {
          "description": "Disallow use of `this` in contexts where the value of `this` is `undefined`",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/no-invalid-this"
        },
        "name": "no-invalid-this",
        "plugin": "eslint"
      },
      "no-irregular-whitespace": {
        "type": "problem",
        "defaultOptions": [
          {
            "skipComments": false,
            "skipJSXText": false,
            "skipRegExps": false,
            "skipStrings": true,
            "skipTemplates": false
          }
        ],
        "docs": {
          "description": "Disallow irregular whitespace",
          "recommended": true,
          "url": "https://eslint.org/docs/latest/rules/no-irregular-whitespace"
        },
        "name": "no-irregular-whitespace",
        "plugin": "eslint"
      },
      "no-iterator": {
        "type": "suggestion",
        "docs": {
          "description": "Disallow the use of the `__iterator__` property",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/no-iterator"
        },
        "name": "no-iterator",
        "plugin": "eslint"
      },
      "no-label-var": {
        "type": "suggestion",
        "docs": {
          "description": "Disallow labels that share a name with a variable",
          "recommended": false,
          "frozen": true,
          "url": "https://eslint.org/docs/latest/rules/no-label-var"
        },
        "name": "no-label-var",
        "plugin": "eslint"
      },
      "no-labels": {
        "type": "suggestion",
        "defaultOptions": [{ "allowLoop": false, "allowSwitch": false }],
        "docs": {
          "description": "Disallow labeled statements",
          "recommended": false,
          "frozen": true,
          "url": "https://eslint.org/docs/latest/rules/no-labels"
        },
        "name": "no-labels",
        "plugin": "eslint"
      },
      "no-lone-blocks": {
        "type": "suggestion",
        "docs": {
          "description": "Disallow unnecessary nested blocks",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/no-lone-blocks"
        },
        "name": "no-lone-blocks",
        "plugin": "eslint"
      },
      "no-lonely-if": {
        "type": "suggestion",
        "docs": {
          "description": "Disallow `if` statements as the only statement in `else` blocks",
          "recommended": false,
          "frozen": true,
          "url": "https://eslint.org/docs/latest/rules/no-lonely-if"
        },
        "fixable": "code",
        "name": "no-lonely-if",
        "plugin": "eslint"
      },
      "no-loop-func": {
        "type": "suggestion",
        "dialects": ["typescript", "javascript"],
        "language": "javascript",
        "docs": {
          "description": "Disallow function declarations that contain unsafe references inside loop statements",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/no-loop-func"
        },
        "name": "no-loop-func",
        "plugin": "eslint"
      },
      "no-loss-of-precision": {
        "type": "problem",
        "dialects": ["typescript", "javascript"],
        "language": "javascript",
        "docs": {
          "description": "Disallow literal numbers that lose precision",
          "recommended": true,
          "url": "https://eslint.org/docs/latest/rules/no-loss-of-precision"
        },
        "name": "no-loss-of-precision",
        "plugin": "eslint"
      },
      "no-magic-numbers": {
        "type": "suggestion",
        "dialects": ["typescript", "javascript"],
        "language": "javascript",
        "docs": {
          "description": "Disallow magic numbers",
          "recommended": false,
          "frozen": true,
          "url": "https://eslint.org/docs/latest/rules/no-magic-numbers"
        },
        "name": "no-magic-numbers",
        "plugin": "eslint"
      },
      "no-misleading-character-class": {
        "type": "problem",
        "docs": {
          "description": "Disallow characters which are made with multiple code points in character class syntax",
          "recommended": true,
          "url": "https://eslint.org/docs/latest/rules/no-misleading-character-class"
        },
        "hasSuggestions": true,
        "name": "no-misleading-character-class",
        "plugin": "eslint"
      },
      "no-mixed-operators": {
        "deprecated": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "no-mixed-operators",
                "url": "https://eslint.style/rules/no-mixed-operators"
              }
            }
          ]
        },
        "type": "suggestion",
        "docs": {
          "description": "Disallow mixed binary operators",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/no-mixed-operators"
        },
        "name": "no-mixed-operators",
        "plugin": "eslint"
      },
      "no-mixed-requires": {
        "deprecated": {
          "message": "Node.js rules were moved out of ESLint core.",
          "url": "https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules",
          "deprecatedSince": "7.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "message": "eslint-plugin-n now maintains deprecated Node.js-related rules.",
              "plugin": {
                "name": "eslint-plugin-n",
                "url": "https://github.com/eslint-community/eslint-plugin-n"
              },
              "rule": {
                "name": "no-mixed-requires",
                "url": "https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-mixed-requires.md"
              }
            }
          ]
        },
        "type": "suggestion",
        "docs": {
          "description": "Disallow `require` calls to be mixed with regular variable declarations",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/no-mixed-requires"
        },
        "name": "no-mixed-requires",
        "plugin": "eslint"
      },
      "no-mixed-spaces-and-tabs": {
        "deprecated": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "no-mixed-spaces-and-tabs",
                "url": "https://eslint.style/rules/no-mixed-spaces-and-tabs"
              }
            }
          ]
        },
        "type": "layout",
        "docs": {
          "description": "Disallow mixed spaces and tabs for indentation",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/no-mixed-spaces-and-tabs"
        },
        "name": "no-mixed-spaces-and-tabs",
        "plugin": "eslint"
      },
      "no-multi-assign": {
        "type": "suggestion",
        "defaultOptions": [{ "ignoreNonDeclaration": false }],
        "docs": {
          "description": "Disallow use of chained assignment expressions",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/no-multi-assign"
        },
        "name": "no-multi-assign",
        "plugin": "eslint"
      },
      "no-multi-spaces": {
        "deprecated": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "no-multi-spaces",
                "url": "https://eslint.style/rules/no-multi-spaces"
              }
            }
          ]
        },
        "type": "layout",
        "docs": {
          "description": "Disallow multiple spaces",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/no-multi-spaces"
        },
        "fixable": "whitespace",
        "name": "no-multi-spaces",
        "plugin": "eslint"
      },
      "no-multi-str": {
        "type": "suggestion",
        "docs": {
          "description": "Disallow multiline strings",
          "recommended": false,
          "frozen": true,
          "url": "https://eslint.org/docs/latest/rules/no-multi-str"
        },
        "name": "no-multi-str",
        "plugin": "eslint"
      },
      "no-multiple-empty-lines": {
        "deprecated": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "no-multiple-empty-lines",
                "url": "https://eslint.style/rules/no-multiple-empty-lines"
              }
            }
          ]
        },
        "type": "layout",
        "docs": {
          "description": "Disallow multiple empty lines",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/no-multiple-empty-lines"
        },
        "fixable": "whitespace",
        "name": "no-multiple-empty-lines",
        "plugin": "eslint"
      },
      "no-native-reassign": {
        "type": "suggestion",
        "docs": {
          "description": "Disallow assignments to native objects or read-only global variables",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/no-native-reassign"
        },
        "deprecated": {
          "message": "Renamed rule.",
          "url": "https://eslint.org/blog/2016/08/eslint-v3.3.0-released/#deprecated-rules",
          "deprecatedSince": "3.3.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-global-assign",
                "url": "https://eslint.org/docs/rules/no-global-assign"
              }
            }
          ]
        },
        "name": "no-native-reassign",
        "plugin": "eslint"
      },
      "no-negated-condition": {
        "type": "suggestion",
        "docs": {
          "description": "Disallow negated conditions",
          "recommended": false,
          "frozen": true,
          "url": "https://eslint.org/docs/latest/rules/no-negated-condition"
        },
        "name": "no-negated-condition",
        "plugin": "eslint"
      },
      "no-negated-in-lhs": {
        "type": "problem",
        "docs": {
          "description": "Disallow negating the left operand in `in` expressions",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/no-negated-in-lhs"
        },
        "deprecated": {
          "message": "Renamed rule.",
          "url": "https://eslint.org/blog/2016/08/eslint-v3.3.0-released/#deprecated-rules",
          "deprecatedSince": "3.3.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-unsafe-negation",
                "url": "https://eslint.org/docs/rules/no-unsafe-negation"
              }
            }
          ]
        },
        "name": "no-negated-in-lhs",
        "plugin": "eslint"
      },
      "no-nested-ternary": {
        "type": "suggestion",
        "docs": {
          "description": "Disallow nested ternary expressions",
          "recommended": false,
          "frozen": true,
          "url": "https://eslint.org/docs/latest/rules/no-nested-ternary"
        },
        "name": "no-nested-ternary",
        "plugin": "eslint"
      },
      "no-new": {
        "type": "suggestion",
        "docs": {
          "description": "Disallow `new` operators outside of assignments or comparisons",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/no-new"
        },
        "name": "no-new",
        "plugin": "eslint"
      },
      "no-new-func": {
        "type": "suggestion",
        "docs": {
          "description": "Disallow `new` operators with the `Function` object",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/no-new-func"
        },
        "name": "no-new-func",
        "plugin": "eslint"
      },
      "no-new-native-nonconstructor": {
        "type": "problem",
        "docs": {
          "description": "Disallow `new` operators with global non-constructor functions",
          "recommended": true,
          "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
        },
        "name": "no-new-native-nonconstructor",
        "plugin": "eslint"
      },
      "no-new-object": {
        "type": "suggestion",
        "docs": {
          "description": "Disallow `Object` constructors",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/no-new-object"
        },
        "deprecated": {
          "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
          "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
          "deprecatedSince": "8.50.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-object-constructor",
                "url": "https://eslint.org/docs/rules/no-object-constructor"
              }
            }
          ]
        },
        "name": "no-new-object",
        "plugin": "eslint"
      },
      "no-new-require": {
        "deprecated": {
          "message": "Node.js rules were moved out of ESLint core.",
          "url": "https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules",
          "deprecatedSince": "7.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "message": "eslint-plugin-n now maintains deprecated Node.js-related rules.",
              "plugin": {
                "name": "eslint-plugin-n",
                "url": "https://github.com/eslint-community/eslint-plugin-n"
              },
              "rule": {
                "name": "no-new-require",
                "url": "https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-new-require.md"
              }
            }
          ]
        },
        "type": "suggestion",
        "docs": {
          "description": "Disallow `new` operators with calls to `require`",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/no-new-require"
        },
        "name": "no-new-require",
        "plugin": "eslint"
      },
      "no-new-symbol": {
        "type": "problem",
        "docs": {
          "description": "Disallow `new` operators with the `Symbol` object",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/no-new-symbol"
        },
        "deprecated": {
          "message": "The rule was replaced with a more general rule.",
          "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
          "deprecatedSince": "9.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "rule": {
                "name": "no-new-native-nonconstructor",
                "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
              }
            }
          ]
        },
        "name": "no-new-symbol",
        "plugin": "eslint"
      },
      "no-new-wrappers": {
        "type": "suggestion",
        "docs": {
          "description": "Disallow `new` operators with the `String`, `Number`, and `Boolean` objects",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/no-new-wrappers"
        },
        "name": "no-new-wrappers",
        "plugin": "eslint"
      },
      "no-nonoctal-decimal-escape": {
        "type": "suggestion",
        "docs": {
          "description": "Disallow `\\8` and `\\9` escape sequences in string literals",
          "recommended": true,
          "url": "https://eslint.org/docs/latest/rules/no-nonoctal-decimal-escape"
        },
        "hasSuggestions": true,
        "name": "no-nonoctal-decimal-escape",
        "plugin": "eslint"
      },
      "no-obj-calls": {
        "type": "problem",
        "docs": {
          "description": "Disallow calling global object properties as functions",
          "recommended": true,
          "url": "https://eslint.org/docs/latest/rules/no-obj-calls"
        },
        "name": "no-obj-calls",
        "plugin": "eslint"
      },
      "no-object-constructor": {
        "type": "suggestion",
        "docs": {
          "description": "Disallow calls to the `Object` constructor without an argument",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/no-object-constructor"
        },
        "hasSuggestions": true,
        "name": "no-object-constructor",
        "plugin": "eslint"
      },
      "no-octal": {
        "type": "suggestion",
        "docs": {
          "description": "Disallow octal literals",
          "recommended": true,
          "url": "https://eslint.org/docs/latest/rules/no-octal"
        },
        "name": "no-octal",
        "plugin": "eslint"
      },
      "no-octal-escape": {
        "type": "suggestion",
        "docs": {
          "description": "Disallow octal escape sequences in string literals",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/no-octal-escape"
        },
        "name": "no-octal-escape",
        "plugin": "eslint"
      },
      "no-param-reassign": {
        "type": "suggestion",
        "docs": {
          "description": "Disallow reassigning function parameters",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/no-param-reassign"
        },
        "name": "no-param-reassign",
        "plugin": "eslint"
      },
      "no-path-concat": {
        "deprecated": {
          "message": "Node.js rules were moved out of ESLint core.",
          "url": "https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules",
          "deprecatedSince": "7.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "message": "eslint-plugin-n now maintains deprecated Node.js-related rules.",
              "plugin": {
                "name": "eslint-plugin-n",
                "url": "https://github.com/eslint-community/eslint-plugin-n"
              },
              "rule": {
                "name": "no-path-concat",
                "url": "https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-path-concat.md"
              }
            }
          ]
        },
        "type": "suggestion",
        "docs": {
          "description": "Disallow string concatenation with `__dirname` and `__filename`",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/no-path-concat"
        },
        "name": "no-path-concat",
        "plugin": "eslint"
      },
      "no-plusplus": {
        "type": "suggestion",
        "defaultOptions": [{ "allowForLoopAfterthoughts": false }],
        "docs": {
          "description": "Disallow the unary operators `++` and `--`",
          "recommended": false,
          "frozen": true,
          "url": "https://eslint.org/docs/latest/rules/no-plusplus"
        },
        "name": "no-plusplus",
        "plugin": "eslint"
      },
      "no-process-env": {
        "deprecated": {
          "message": "Node.js rules were moved out of ESLint core.",
          "url": "https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules",
          "deprecatedSince": "7.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "message": "eslint-plugin-n now maintains deprecated Node.js-related rules.",
              "plugin": {
                "name": "eslint-plugin-n",
                "url": "https://github.com/eslint-community/eslint-plugin-n"
              },
              "rule": {
                "name": "no-process-env",
                "url": "https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"
              }
            }
          ]
        },
        "type": "suggestion",
        "docs": {
          "description": "Disallow the use of `process.env`",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/no-process-env"
        },
        "name": "no-process-env",
        "plugin": "eslint"
      },
      "no-process-exit": {
        "deprecated": {
          "message": "Node.js rules were moved out of ESLint core.",
          "url": "https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules",
          "deprecatedSince": "7.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "message": "eslint-plugin-n now maintains deprecated Node.js-related rules.",
              "plugin": {
                "name": "eslint-plugin-n",
                "url": "https://github.com/eslint-community/eslint-plugin-n"
              },
              "rule": {
                "name": "no-process-exit",
                "url": "https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-exit.md"
              }
            }
          ]
        },
        "type": "suggestion",
        "docs": {
          "description": "Disallow the use of `process.exit()`",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/no-process-exit"
        },
        "name": "no-process-exit",
        "plugin": "eslint"
      },
      "no-promise-executor-return": {
        "type": "problem",
        "defaultOptions": [{ "allowVoid": false }],
        "docs": {
          "description": "Disallow returning values from Promise executor functions",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/no-promise-executor-return"
        },
        "hasSuggestions": true,
        "name": "no-promise-executor-return",
        "plugin": "eslint"
      },
      "no-proto": {
        "type": "suggestion",
        "docs": {
          "description": "Disallow the use of the `__proto__` property",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/no-proto"
        },
        "name": "no-proto",
        "plugin": "eslint"
      },
      "no-prototype-builtins": {
        "type": "problem",
        "docs": {
          "description": "Disallow calling some `Object.prototype` methods directly on objects",
          "recommended": true,
          "url": "https://eslint.org/docs/latest/rules/no-prototype-builtins"
        },
        "hasSuggestions": true,
        "name": "no-prototype-builtins",
        "plugin": "eslint"
      },
      "no-redeclare": {
        "type": "suggestion",
        "defaultOptions": [{ "builtinGlobals": true }],
        "docs": {
          "description": "Disallow variable redeclaration",
          "recommended": true,
          "url": "https://eslint.org/docs/latest/rules/no-redeclare"
        },
        "name": "no-redeclare",
        "plugin": "eslint"
      },
      "no-regex-spaces": {
        "type": "suggestion",
        "docs": {
          "description": "Disallow multiple spaces in regular expressions",
          "recommended": true,
          "url": "https://eslint.org/docs/latest/rules/no-regex-spaces"
        },
        "fixable": "code",
        "name": "no-regex-spaces",
        "plugin": "eslint"
      },
      "no-restricted-exports": {
        "type": "suggestion",
        "docs": {
          "description": "Disallow specified names in exports",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/no-restricted-exports"
        },
        "name": "no-restricted-exports",
        "plugin": "eslint"
      },
      "no-restricted-globals": {
        "dialects": ["javascript", "typescript"],
        "language": "javascript",
        "type": "suggestion",
        "docs": {
          "description": "Disallow specified global variables",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/no-restricted-globals"
        },
        "name": "no-restricted-globals",
        "plugin": "eslint"
      },
      "no-restricted-imports": {
        "type": "suggestion",
        "docs": {
          "description": "Disallow specified modules when loaded by `import`",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/no-restricted-imports"
        },
        "name": "no-restricted-imports",
        "plugin": "eslint"
      },
      "no-restricted-modules": {
        "deprecated": {
          "message": "Node.js rules were moved out of ESLint core.",
          "url": "https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules",
          "deprecatedSince": "7.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "message": "eslint-plugin-n now maintains deprecated Node.js-related rules.",
              "plugin": {
                "name": "eslint-plugin-n",
                "url": "https://github.com/eslint-community/eslint-plugin-n"
              },
              "rule": {
                "name": "no-restricted-require",
                "url": "https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-restricted-require.md"
              }
            }
          ]
        },
        "type": "suggestion",
        "docs": {
          "description": "Disallow specified modules when loaded by `require`",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/no-restricted-modules"
        },
        "name": "no-restricted-modules",
        "plugin": "eslint"
      },
      "no-restricted-properties": {
        "type": "suggestion",
        "docs": {
          "description": "Disallow certain properties on certain objects",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/no-restricted-properties"
        },
        "name": "no-restricted-properties",
        "plugin": "eslint"
      },
      "no-restricted-syntax": {
        "type": "suggestion",
        "docs": {
          "description": "Disallow specified syntax",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/no-restricted-syntax"
        },
        "name": "no-restricted-syntax",
        "plugin": "eslint"
      },
      "no-return-assign": {
        "type": "suggestion",
        "defaultOptions": ["except-parens"],
        "docs": {
          "description": "Disallow assignment operators in `return` statements",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/no-return-assign"
        },
        "name": "no-return-assign",
        "plugin": "eslint"
      },
      "no-return-await": {
        "hasSuggestions": true,
        "type": "suggestion",
        "docs": {
          "description": "Disallow unnecessary `return await`",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/no-return-await"
        },
        "fixable": null,
        "deprecated": {
          "message": "The original assumption of the rule no longer holds true because of engine optimization.",
          "deprecatedSince": "8.46.0",
          "availableUntil": null,
          "replacedBy": []
        },
        "name": "no-return-await",
        "plugin": "eslint"
      },
      "no-script-url": {
        "type": "suggestion",
        "docs": {
          "description": "Disallow `javascript:` URLs",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/no-script-url"
        },
        "name": "no-script-url",
        "plugin": "eslint"
      },
      "no-self-assign": {
        "type": "problem",
        "defaultOptions": [{ "props": true }],
        "docs": {
          "description": "Disallow assignments where both sides are exactly the same",
          "recommended": true,
          "url": "https://eslint.org/docs/latest/rules/no-self-assign"
        },
        "name": "no-self-assign",
        "plugin": "eslint"
      },
      "no-self-compare": {
        "type": "problem",
        "docs": {
          "description": "Disallow comparisons where both sides are exactly the same",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/no-self-compare"
        },
        "name": "no-self-compare",
        "plugin": "eslint"
      },
      "no-sequences": {
        "type": "suggestion",
        "docs": {
          "description": "Disallow comma operators",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/no-sequences"
        },
        "defaultOptions": [{ "allowInParentheses": true }],
        "name": "no-sequences",
        "plugin": "eslint"
      },
      "no-setter-return": {
        "type": "problem",
        "docs": {
          "description": "Disallow returning values from setters",
          "recommended": true,
          "url": "https://eslint.org/docs/latest/rules/no-setter-return"
        },
        "name": "no-setter-return",
        "plugin": "eslint"
      },
      "no-shadow": {
        "type": "suggestion",
        "dialects": ["typescript", "javascript"],
        "language": "javascript",
        "defaultOptions": [
          {
            "allow": [],
            "builtinGlobals": false,
            "hoist": "functions",
            "ignoreOnInitialization": false,
            "ignoreTypeValueShadow": true,
            "ignoreFunctionTypeParameterNameValueShadow": true
          }
        ],
        "docs": {
          "description": "Disallow variable declarations from shadowing variables declared in the outer scope",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/no-shadow"
        },
        "name": "no-shadow",
        "plugin": "eslint"
      },
      "no-shadow-restricted-names": {
        "type": "suggestion",
        "defaultOptions": [{ "reportGlobalThis": false }],
        "docs": {
          "description": "Disallow identifiers from shadowing restricted names",
          "recommended": true,
          "url": "https://eslint.org/docs/latest/rules/no-shadow-restricted-names"
        },
        "name": "no-shadow-restricted-names",
        "plugin": "eslint"
      },
      "no-spaced-func": {
        "type": "layout",
        "docs": {
          "description": "Disallow spacing between function identifiers and their applications (deprecated)",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/no-spaced-func"
        },
        "deprecated": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2016/08/eslint-v3.3.0-released/#deprecated-rules",
          "deprecatedSince": "3.3.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "function-call-spacing",
                "url": "https://eslint.style/rules/function-call-spacing"
              }
            }
          ]
        },
        "fixable": "whitespace",
        "name": "no-spaced-func",
        "plugin": "eslint"
      },
      "no-sparse-arrays": {
        "type": "problem",
        "docs": {
          "description": "Disallow sparse arrays",
          "recommended": true,
          "url": "https://eslint.org/docs/latest/rules/no-sparse-arrays"
        },
        "name": "no-sparse-arrays",
        "plugin": "eslint"
      },
      "no-sync": {
        "deprecated": {
          "message": "Node.js rules were moved out of ESLint core.",
          "url": "https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules",
          "deprecatedSince": "7.0.0",
          "availableUntil": null,
          "replacedBy": [
            {
              "message": "eslint-plugin-n now maintains deprecated Node.js-related rules.",
              "plugin": {
                "name": "eslint-plugin-n",
                "url": "https://github.com/eslint-community/eslint-plugin-n"
              },
              "rule": {
                "name": "no-sync",
                "url": "https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-sync.md"
              }
            }
          ]
        },
        "type": "suggestion",
        "docs": {
          "description": "Disallow synchronous methods",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/no-sync"
        },
        "name": "no-sync",
        "plugin": "eslint"
      },
      "no-tabs": {
        "deprecated": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "no-tabs",
                "url": "https://eslint.style/rules/no-tabs"
              }
            }
          ]
        },
        "type": "layout",
        "docs": {
          "description": "Disallow all tabs",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/no-tabs"
        },
        "name": "no-tabs",
        "plugin": "eslint"
      },
      "no-template-curly-in-string": {
        "type": "problem",
        "docs": {
          "description": "Disallow template literal placeholder syntax in regular strings",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/no-template-curly-in-string"
        },
        "name": "no-template-curly-in-string",
        "plugin": "eslint"
      },
      "no-ternary": {
        "type": "suggestion",
        "docs": {
          "description": "Disallow ternary operators",
          "recommended": false,
          "frozen": true,
          "url": "https://eslint.org/docs/latest/rules/no-ternary"
        },
        "name": "no-ternary",
        "plugin": "eslint"
      },
      "no-this-before-super": {
        "type": "problem",
        "docs": {
          "description": "Disallow `this`/`super` before calling `super()` in constructors",
          "recommended": true,
          "url": "https://eslint.org/docs/latest/rules/no-this-before-super"
        },
        "name": "no-this-before-super",
        "plugin": "eslint"
      },
      "no-throw-literal": {
        "type": "suggestion",
        "docs": {
          "description": "Disallow throwing literals as exceptions",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/no-throw-literal"
        },
        "name": "no-throw-literal",
        "plugin": "eslint"
      },
      "no-trailing-spaces": {
        "deprecated": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "no-trailing-spaces",
                "url": "https://eslint.style/rules/no-trailing-spaces"
              }
            }
          ]
        },
        "type": "layout",
        "docs": {
          "description": "Disallow trailing whitespace at the end of lines",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/no-trailing-spaces"
        },
        "fixable": "whitespace",
        "name": "no-trailing-spaces",
        "plugin": "eslint"
      },
      "no-unassigned-vars": {
        "type": "problem",
        "dialects": ["typescript", "javascript"],
        "language": "javascript",
        "docs": {
          "description": "Disallow `let` or `var` variables that are read but never assigned",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/no-unassigned-vars"
        },
        "name": "no-unassigned-vars",
        "plugin": "eslint"
      },
      "no-undef": {
        "type": "problem",
        "defaultOptions": [{ "typeof": false }],
        "docs": {
          "description": "Disallow the use of undeclared variables unless mentioned in `/*global */` comments",
          "recommended": true,
          "url": "https://eslint.org/docs/latest/rules/no-undef"
        },
        "name": "no-undef",
        "plugin": "eslint"
      },
      "no-undef-init": {
        "type": "suggestion",
        "docs": {
          "description": "Disallow initializing variables to `undefined`",
          "recommended": false,
          "frozen": true,
          "url": "https://eslint.org/docs/latest/rules/no-undef-init"
        },
        "fixable": "code",
        "name": "no-undef-init",
        "plugin": "eslint"
      },
      "no-undefined": {
        "type": "suggestion",
        "docs": {
          "description": "Disallow the use of `undefined` as an identifier",
          "recommended": false,
          "frozen": true,
          "url": "https://eslint.org/docs/latest/rules/no-undefined"
        },
        "name": "no-undefined",
        "plugin": "eslint"
      },
      "no-underscore-dangle": {
        "type": "suggestion",
        "defaultOptions": [
          {
            "allow": [],
            "allowAfterSuper": false,
            "allowAfterThis": false,
            "allowAfterThisConstructor": false,
            "allowFunctionParams": true,
            "allowInArrayDestructuring": true,
            "allowInObjectDestructuring": true,
            "enforceInClassFields": false,
            "enforceInMethodNames": false
          }
        ],
        "docs": {
          "description": "Disallow dangling underscores in identifiers",
          "recommended": false,
          "frozen": true,
          "url": "https://eslint.org/docs/latest/rules/no-underscore-dangle"
        },
        "name": "no-underscore-dangle",
        "plugin": "eslint"
      },
      "no-unexpected-multiline": {
        "type": "problem",
        "docs": {
          "description": "Disallow confusing multiline expressions",
          "recommended": true,
          "url": "https://eslint.org/docs/latest/rules/no-unexpected-multiline"
        },
        "name": "no-unexpected-multiline",
        "plugin": "eslint"
      },
      "no-unmodified-loop-condition": {
        "type": "problem",
        "docs": {
          "description": "Disallow unmodified loop conditions",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/no-unmodified-loop-condition"
        },
        "name": "no-unmodified-loop-condition",
        "plugin": "eslint"
      },
      "no-unneeded-ternary": {
        "type": "suggestion",
        "defaultOptions": [{ "defaultAssignment": true }],
        "docs": {
          "description": "Disallow ternary operators when simpler alternatives exist",
          "recommended": false,
          "frozen": true,
          "url": "https://eslint.org/docs/latest/rules/no-unneeded-ternary"
        },
        "fixable": "code",
        "name": "no-unneeded-ternary",
        "plugin": "eslint"
      },
      "no-unreachable": {
        "type": "problem",
        "docs": {
          "description": "Disallow unreachable code after `return`, `throw`, `continue`, and `break` statements",
          "recommended": true,
          "url": "https://eslint.org/docs/latest/rules/no-unreachable"
        },
        "name": "no-unreachable",
        "plugin": "eslint"
      },
      "no-unreachable-loop": {
        "type": "problem",
        "defaultOptions": [{ "ignore": [] }],
        "docs": {
          "description": "Disallow loops with a body that allows only one iteration",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/no-unreachable-loop"
        },
        "name": "no-unreachable-loop",
        "plugin": "eslint"
      },
      "no-unsafe-finally": {
        "type": "problem",
        "docs": {
          "description": "Disallow control flow statements in `finally` blocks",
          "recommended": true,
          "url": "https://eslint.org/docs/latest/rules/no-unsafe-finally"
        },
        "name": "no-unsafe-finally",
        "plugin": "eslint"
      },
      "no-unsafe-negation": {
        "type": "problem",
        "defaultOptions": [{ "enforceForOrderingRelations": false }],
        "docs": {
          "description": "Disallow negating the left operand of relational operators",
          "recommended": true,
          "url": "https://eslint.org/docs/latest/rules/no-unsafe-negation"
        },
        "hasSuggestions": true,
        "fixable": null,
        "name": "no-unsafe-negation",
        "plugin": "eslint"
      },
      "no-unsafe-optional-chaining": {
        "type": "problem",
        "defaultOptions": [{ "disallowArithmeticOperators": false }],
        "docs": {
          "description": "Disallow use of optional chaining in contexts where the `undefined` value is not allowed",
          "recommended": true,
          "url": "https://eslint.org/docs/latest/rules/no-unsafe-optional-chaining"
        },
        "fixable": null,
        "name": "no-unsafe-optional-chaining",
        "plugin": "eslint"
      },
      "no-unused-expressions": {
        "dialects": ["javascript", "typescript"],
        "language": "javascript",
        "type": "suggestion",
        "docs": {
          "description": "Disallow unused expressions",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/no-unused-expressions"
        },
        "defaultOptions": [
          {
            "allowShortCircuit": false,
            "allowTernary": false,
            "allowTaggedTemplates": false,
            "enforceForJSX": false,
            "ignoreDirectives": false
          }
        ],
        "name": "no-unused-expressions",
        "plugin": "eslint"
      },
      "no-unused-labels": {
        "type": "suggestion",
        "docs": {
          "description": "Disallow unused labels",
          "recommended": true,
          "url": "https://eslint.org/docs/latest/rules/no-unused-labels"
        },
        "fixable": "code",
        "name": "no-unused-labels",
        "plugin": "eslint"
      },
      "no-unused-private-class-members": {
        "type": "problem",
        "docs": {
          "description": "Disallow unused private class members",
          "recommended": true,
          "url": "https://eslint.org/docs/latest/rules/no-unused-private-class-members"
        },
        "name": "no-unused-private-class-members",
        "plugin": "eslint"
      },
      "no-unused-vars": {
        "type": "problem",
        "docs": {
          "description": "Disallow unused variables",
          "recommended": true,
          "url": "https://eslint.org/docs/latest/rules/no-unused-vars"
        },
        "hasSuggestions": true,
        "name": "no-unused-vars",
        "plugin": "eslint"
      },
      "no-use-before-define": {
        "dialects": ["javascript", "typescript"],
        "language": "javascript",
        "type": "problem",
        "docs": {
          "description": "Disallow the use of variables before they are defined",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/no-use-before-define"
        },
        "defaultOptions": [
          {
            "classes": true,
            "functions": true,
            "variables": true,
            "allowNamedExports": false,
            "enums": true,
            "typedefs": true,
            "ignoreTypeReferences": true
          }
        ],
        "name": "no-use-before-define",
        "plugin": "eslint"
      },
      "no-useless-assignment": {
        "type": "problem",
        "docs": {
          "description": "Disallow variable assignments when the value is not used",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/no-useless-assignment"
        },
        "name": "no-useless-assignment",
        "plugin": "eslint"
      },
      "no-useless-backreference": {
        "type": "problem",
        "docs": {
          "description": "Disallow useless backreferences in regular expressions",
          "recommended": true,
          "url": "https://eslint.org/docs/latest/rules/no-useless-backreference"
        },
        "name": "no-useless-backreference",
        "plugin": "eslint"
      },
      "no-useless-call": {
        "type": "suggestion",
        "docs": {
          "description": "Disallow unnecessary calls to `.call()` and `.apply()`",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/no-useless-call"
        },
        "name": "no-useless-call",
        "plugin": "eslint"
      },
      "no-useless-catch": {
        "type": "suggestion",
        "docs": {
          "description": "Disallow unnecessary `catch` clauses",
          "recommended": true,
          "url": "https://eslint.org/docs/latest/rules/no-useless-catch"
        },
        "name": "no-useless-catch",
        "plugin": "eslint"
      },
      "no-useless-computed-key": {
        "type": "suggestion",
        "defaultOptions": [{ "enforceForClassMembers": true }],
        "docs": {
          "description": "Disallow unnecessary computed property keys in objects and classes",
          "recommended": false,
          "frozen": true,
          "url": "https://eslint.org/docs/latest/rules/no-useless-computed-key"
        },
        "fixable": "code",
        "name": "no-useless-computed-key",
        "plugin": "eslint"
      },
      "no-useless-concat": {
        "type": "suggestion",
        "docs": {
          "description": "Disallow unnecessary concatenation of literals or template literals",
          "recommended": false,
          "frozen": true,
          "url": "https://eslint.org/docs/latest/rules/no-useless-concat"
        },
        "name": "no-useless-concat",
        "plugin": "eslint"
      },
      "no-useless-constructor": {
        "dialects": ["javascript", "typescript"],
        "language": "javascript",
        "type": "suggestion",
        "docs": {
          "description": "Disallow unnecessary constructors",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/no-useless-constructor"
        },
        "hasSuggestions": true,
        "name": "no-useless-constructor",
        "plugin": "eslint"
      },
      "no-useless-escape": {
        "type": "suggestion",
        "defaultOptions": [{ "allowRegexCharacters": [] }],
        "docs": {
          "description": "Disallow unnecessary escape characters",
          "recommended": true,
          "url": "https://eslint.org/docs/latest/rules/no-useless-escape"
        },
        "hasSuggestions": true,
        "name": "no-useless-escape",
        "plugin": "eslint"
      },
      "no-useless-rename": {
        "type": "suggestion",
        "defaultOptions": [
          {
            "ignoreDestructuring": false,
            "ignoreImport": false,
            "ignoreExport": false
          }
        ],
        "docs": {
          "description": "Disallow renaming import, export, and destructured assignments to the same name",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/no-useless-rename"
        },
        "fixable": "code",
        "name": "no-useless-rename",
        "plugin": "eslint"
      },
      "no-useless-return": {
        "type": "suggestion",
        "docs": {
          "description": "Disallow redundant return statements",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/no-useless-return"
        },
        "fixable": "code",
        "name": "no-useless-return",
        "plugin": "eslint"
      },
      "no-var": {
        "type": "suggestion",
        "dialects": ["typescript", "javascript"],
        "language": "javascript",
        "docs": {
          "description": "Require `let` or `const` instead of `var`",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/no-var"
        },
        "fixable": "code",
        "name": "no-var",
        "plugin": "eslint"
      },
      "no-void": {
        "type": "suggestion",
        "defaultOptions": [{ "allowAsStatement": false }],
        "docs": {
          "description": "Disallow `void` operators",
          "recommended": false,
          "frozen": true,
          "url": "https://eslint.org/docs/latest/rules/no-void"
        },
        "name": "no-void",
        "plugin": "eslint"
      },
      "no-warning-comments": {
        "type": "suggestion",
        "defaultOptions": [
          { "location": "start", "terms": ["todo", "fixme", "xxx"] }
        ],
        "docs": {
          "description": "Disallow specified warning terms in comments",
          "recommended": false,
          "frozen": true,
          "url": "https://eslint.org/docs/latest/rules/no-warning-comments"
        },
        "name": "no-warning-comments",
        "plugin": "eslint"
      },
      "no-whitespace-before-property": {
        "deprecated": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "no-whitespace-before-property",
                "url": "https://eslint.style/rules/no-whitespace-before-property"
              }
            }
          ]
        },
        "type": "layout",
        "docs": {
          "description": "Disallow whitespace before properties",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/no-whitespace-before-property"
        },
        "fixable": "whitespace",
        "name": "no-whitespace-before-property",
        "plugin": "eslint"
      },
      "no-with": {
        "type": "suggestion",
        "docs": {
          "description": "Disallow `with` statements",
          "recommended": true,
          "url": "https://eslint.org/docs/latest/rules/no-with"
        },
        "name": "no-with",
        "plugin": "eslint"
      },
      "nonblock-statement-body-position": {
        "deprecated": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "nonblock-statement-body-position",
                "url": "https://eslint.style/rules/nonblock-statement-body-position"
              }
            }
          ]
        },
        "type": "layout",
        "docs": {
          "description": "Enforce the location of single-line statements",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/nonblock-statement-body-position"
        },
        "fixable": "whitespace",
        "name": "nonblock-statement-body-position",
        "plugin": "eslint"
      },
      "object-curly-newline": {
        "deprecated": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "object-curly-newline",
                "url": "https://eslint.style/rules/object-curly-newline"
              }
            }
          ]
        },
        "type": "layout",
        "docs": {
          "description": "Enforce consistent line breaks after opening and before closing braces",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/object-curly-newline"
        },
        "fixable": "whitespace",
        "name": "object-curly-newline",
        "plugin": "eslint"
      },
      "object-curly-spacing": {
        "deprecated": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "object-curly-spacing",
                "url": "https://eslint.style/rules/object-curly-spacing"
              }
            }
          ]
        },
        "type": "layout",
        "docs": {
          "description": "Enforce consistent spacing inside braces",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/object-curly-spacing"
        },
        "fixable": "whitespace",
        "name": "object-curly-spacing",
        "plugin": "eslint"
      },
      "object-property-newline": {
        "deprecated": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "object-property-newline",
                "url": "https://eslint.style/rules/object-property-newline"
              }
            }
          ]
        },
        "type": "layout",
        "docs": {
          "description": "Enforce placing object properties on separate lines",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/object-property-newline"
        },
        "fixable": "whitespace",
        "name": "object-property-newline",
        "plugin": "eslint"
      },
      "object-shorthand": {
        "type": "suggestion",
        "docs": {
          "description": "Require or disallow method and property shorthand syntax for object literals",
          "recommended": false,
          "frozen": true,
          "url": "https://eslint.org/docs/latest/rules/object-shorthand"
        },
        "fixable": "code",
        "name": "object-shorthand",
        "plugin": "eslint"
      },
      "one-var": {
        "type": "suggestion",
        "docs": {
          "description": "Enforce variables to be declared either together or separately in functions",
          "recommended": false,
          "frozen": true,
          "url": "https://eslint.org/docs/latest/rules/one-var"
        },
        "fixable": "code",
        "name": "one-var",
        "plugin": "eslint"
      },
      "one-var-declaration-per-line": {
        "deprecated": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "one-var-declaration-per-line",
                "url": "https://eslint.style/rules/one-var-declaration-per-line"
              }
            }
          ]
        },
        "type": "suggestion",
        "docs": {
          "description": "Require or disallow newlines around variable declarations",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/one-var-declaration-per-line"
        },
        "fixable": "whitespace",
        "name": "one-var-declaration-per-line",
        "plugin": "eslint"
      },
      "operator-assignment": {
        "type": "suggestion",
        "defaultOptions": ["always"],
        "docs": {
          "description": "Require or disallow assignment operator shorthand where possible",
          "recommended": false,
          "frozen": true,
          "url": "https://eslint.org/docs/latest/rules/operator-assignment"
        },
        "fixable": "code",
        "name": "operator-assignment",
        "plugin": "eslint"
      },
      "operator-linebreak": {
        "deprecated": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "operator-linebreak",
                "url": "https://eslint.style/rules/operator-linebreak"
              }
            }
          ]
        },
        "type": "layout",
        "docs": {
          "description": "Enforce consistent linebreak style for operators",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/operator-linebreak"
        },
        "fixable": "code",
        "name": "operator-linebreak",
        "plugin": "eslint"
      },
      "padded-blocks": {
        "deprecated": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "padded-blocks",
                "url": "https://eslint.style/rules/padded-blocks"
              }
            }
          ]
        },
        "type": "layout",
        "docs": {
          "description": "Require or disallow padding within blocks",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/padded-blocks"
        },
        "fixable": "whitespace",
        "name": "padded-blocks",
        "plugin": "eslint"
      },
      "padding-line-between-statements": {
        "deprecated": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "padding-line-between-statements",
                "url": "https://eslint.style/rules/padding-line-between-statements"
              }
            }
          ]
        },
        "type": "layout",
        "docs": {
          "description": "Require or disallow padding lines between statements",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/padding-line-between-statements"
        },
        "fixable": "whitespace",
        "name": "padding-line-between-statements",
        "plugin": "eslint"
      },
      "prefer-arrow-callback": {
        "type": "suggestion",
        "dialects": ["javascript", "typescript"],
        "language": "javascript",
        "defaultOptions": [
          { "allowNamedFunctions": false, "allowUnboundThis": true }
        ],
        "docs": {
          "description": "Require using arrow functions for callbacks",
          "recommended": false,
          "frozen": true,
          "url": "https://eslint.org/docs/latest/rules/prefer-arrow-callback"
        },
        "fixable": "code",
        "name": "prefer-arrow-callback",
        "plugin": "eslint"
      },
      "prefer-const": {
        "type": "suggestion",
        "defaultOptions": [
          { "destructuring": "any", "ignoreReadBeforeAssign": false }
        ],
        "docs": {
          "description": "Require `const` declarations for variables that are never reassigned after declared",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/prefer-const"
        },
        "fixable": "code",
        "name": "prefer-const",
        "plugin": "eslint"
      },
      "prefer-destructuring": {
        "type": "suggestion",
        "docs": {
          "description": "Require destructuring from arrays and/or objects",
          "recommended": false,
          "frozen": true,
          "url": "https://eslint.org/docs/latest/rules/prefer-destructuring"
        },
        "fixable": "code",
        "name": "prefer-destructuring",
        "plugin": "eslint"
      },
      "prefer-exponentiation-operator": {
        "type": "suggestion",
        "docs": {
          "description": "Disallow the use of `Math.pow` in favor of the `**` operator",
          "recommended": false,
          "frozen": true,
          "url": "https://eslint.org/docs/latest/rules/prefer-exponentiation-operator"
        },
        "fixable": "code",
        "name": "prefer-exponentiation-operator",
        "plugin": "eslint"
      },
      "prefer-named-capture-group": {
        "type": "suggestion",
        "docs": {
          "description": "Enforce using named capture group in regular expression",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/prefer-named-capture-group"
        },
        "hasSuggestions": true,
        "name": "prefer-named-capture-group",
        "plugin": "eslint"
      },
      "prefer-numeric-literals": {
        "type": "suggestion",
        "docs": {
          "description": "Disallow `parseInt()` and `Number.parseInt()` in favor of binary, octal, and hexadecimal literals",
          "recommended": false,
          "frozen": true,
          "url": "https://eslint.org/docs/latest/rules/prefer-numeric-literals"
        },
        "fixable": "code",
        "name": "prefer-numeric-literals",
        "plugin": "eslint"
      },
      "prefer-object-has-own": {
        "type": "suggestion",
        "docs": {
          "description": "Disallow use of `Object.prototype.hasOwnProperty.call()` and prefer use of `Object.hasOwn()`",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/prefer-object-has-own"
        },
        "fixable": "code",
        "name": "prefer-object-has-own",
        "plugin": "eslint"
      },
      "prefer-object-spread": {
        "type": "suggestion",
        "docs": {
          "description": "Disallow using `Object.assign` with an object literal as the first argument and prefer the use of object spread instead",
          "recommended": false,
          "frozen": true,
          "url": "https://eslint.org/docs/latest/rules/prefer-object-spread"
        },
        "fixable": "code",
        "name": "prefer-object-spread",
        "plugin": "eslint"
      },
      "prefer-promise-reject-errors": {
        "type": "suggestion",
        "defaultOptions": [{ "allowEmptyReject": false }],
        "docs": {
          "description": "Require using Error objects as Promise rejection reasons",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/prefer-promise-reject-errors"
        },
        "fixable": null,
        "name": "prefer-promise-reject-errors",
        "plugin": "eslint"
      },
      "prefer-reflect": {
        "type": "suggestion",
        "docs": {
          "description": "Require `Reflect` methods where applicable",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/prefer-reflect"
        },
        "deprecated": {
          "message": "The original intention of this rule was misguided.",
          "deprecatedSince": "3.9.0",
          "availableUntil": null,
          "replacedBy": []
        },
        "name": "prefer-reflect",
        "plugin": "eslint"
      },
      "prefer-regex-literals": {
        "type": "suggestion",
        "defaultOptions": [{ "disallowRedundantWrapping": false }],
        "docs": {
          "description": "Disallow use of the `RegExp` constructor in favor of regular expression literals",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/prefer-regex-literals"
        },
        "hasSuggestions": true,
        "name": "prefer-regex-literals",
        "plugin": "eslint"
      },
      "prefer-rest-params": {
        "type": "suggestion",
        "docs": {
          "description": "Require rest parameters instead of `arguments`",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/prefer-rest-params"
        },
        "name": "prefer-rest-params",
        "plugin": "eslint"
      },
      "prefer-spread": {
        "type": "suggestion",
        "docs": {
          "description": "Require spread operators instead of `.apply()`",
          "recommended": false,
          "frozen": true,
          "url": "https://eslint.org/docs/latest/rules/prefer-spread"
        },
        "fixable": null,
        "name": "prefer-spread",
        "plugin": "eslint"
      },
      "prefer-template": {
        "type": "suggestion",
        "docs": {
          "description": "Require template literals instead of string concatenation",
          "recommended": false,
          "frozen": true,
          "url": "https://eslint.org/docs/latest/rules/prefer-template"
        },
        "fixable": "code",
        "name": "prefer-template",
        "plugin": "eslint"
      },
      "quote-props": {
        "deprecated": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "quote-props",
                "url": "https://eslint.style/rules/quote-props"
              }
            }
          ]
        },
        "type": "suggestion",
        "docs": {
          "description": "Require quotes around object literal property names",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/quote-props"
        },
        "fixable": "code",
        "name": "quote-props",
        "plugin": "eslint"
      },
      "quotes": {
        "deprecated": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "quotes",
                "url": "https://eslint.style/rules/quotes"
              }
            }
          ]
        },
        "type": "layout",
        "docs": {
          "description": "Enforce the consistent use of either backticks, double, or single quotes",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/quotes"
        },
        "fixable": "code",
        "name": "quotes",
        "plugin": "eslint"
      },
      "radix": {
        "type": "suggestion",
        "defaultOptions": ["always"],
        "docs": {
          "description": "Enforce the consistent use of the radix argument when using `parseInt()`",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/radix"
        },
        "hasSuggestions": true,
        "name": "radix",
        "plugin": "eslint"
      },
      "require-atomic-updates": {
        "type": "problem",
        "defaultOptions": [{ "allowProperties": false }],
        "docs": {
          "description": "Disallow assignments that can lead to race conditions due to usage of `await` or `yield`",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/require-atomic-updates"
        },
        "fixable": null,
        "name": "require-atomic-updates",
        "plugin": "eslint"
      },
      "require-await": {
        "type": "suggestion",
        "docs": {
          "description": "Disallow async functions which have no `await` expression",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/require-await"
        },
        "hasSuggestions": true,
        "name": "require-await",
        "plugin": "eslint"
      },
      "require-unicode-regexp": {
        "type": "suggestion",
        "docs": {
          "description": "Enforce the use of `u` or `v` flag on regular expressions",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/require-unicode-regexp"
        },
        "hasSuggestions": true,
        "name": "require-unicode-regexp",
        "plugin": "eslint"
      },
      "require-yield": {
        "type": "suggestion",
        "docs": {
          "description": "Require generator functions to contain `yield`",
          "recommended": true,
          "url": "https://eslint.org/docs/latest/rules/require-yield"
        },
        "name": "require-yield",
        "plugin": "eslint"
      },
      "rest-spread-spacing": {
        "deprecated": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "rest-spread-spacing",
                "url": "https://eslint.style/rules/rest-spread-spacing"
              }
            }
          ]
        },
        "type": "layout",
        "docs": {
          "description": "Enforce spacing between rest and spread operators and their expressions",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/rest-spread-spacing"
        },
        "fixable": "whitespace",
        "name": "rest-spread-spacing",
        "plugin": "eslint"
      },
      "semi": {
        "deprecated": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "semi",
                "url": "https://eslint.style/rules/semi"
              }
            }
          ]
        },
        "type": "layout",
        "docs": {
          "description": "Require or disallow semicolons instead of ASI",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/semi"
        },
        "fixable": "code",
        "name": "semi",
        "plugin": "eslint"
      },
      "semi-spacing": {
        "deprecated": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "semi-spacing",
                "url": "https://eslint.style/rules/semi-spacing"
              }
            }
          ]
        },
        "type": "layout",
        "docs": {
          "description": "Enforce consistent spacing before and after semicolons",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/semi-spacing"
        },
        "fixable": "whitespace",
        "name": "semi-spacing",
        "plugin": "eslint"
      },
      "semi-style": {
        "deprecated": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "semi-style",
                "url": "https://eslint.style/rules/semi-style"
              }
            }
          ]
        },
        "type": "layout",
        "docs": {
          "description": "Enforce location of semicolons",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/semi-style"
        },
        "fixable": "whitespace",
        "name": "semi-style",
        "plugin": "eslint"
      },
      "sort-imports": {
        "type": "suggestion",
        "defaultOptions": [
          {
            "allowSeparatedGroups": false,
            "ignoreCase": false,
            "ignoreDeclarationSort": false,
            "ignoreMemberSort": false,
            "memberSyntaxSortOrder": ["none", "all", "multiple", "single"]
          }
        ],
        "docs": {
          "description": "Enforce sorted `import` declarations within modules",
          "recommended": false,
          "frozen": true,
          "url": "https://eslint.org/docs/latest/rules/sort-imports"
        },
        "fixable": "code",
        "name": "sort-imports",
        "plugin": "eslint"
      },
      "sort-keys": {
        "type": "suggestion",
        "defaultOptions": [
          "asc",
          {
            "allowLineSeparatedGroups": false,
            "caseSensitive": true,
            "ignoreComputedKeys": false,
            "minKeys": 2,
            "natural": false
          }
        ],
        "docs": {
          "description": "Require object keys to be sorted",
          "recommended": false,
          "frozen": true,
          "url": "https://eslint.org/docs/latest/rules/sort-keys"
        },
        "name": "sort-keys",
        "plugin": "eslint"
      },
      "sort-vars": {
        "type": "suggestion",
        "defaultOptions": [{ "ignoreCase": false }],
        "docs": {
          "description": "Require variables within the same declaration block to be sorted",
          "recommended": false,
          "frozen": true,
          "url": "https://eslint.org/docs/latest/rules/sort-vars"
        },
        "fixable": "code",
        "name": "sort-vars",
        "plugin": "eslint"
      },
      "space-before-blocks": {
        "deprecated": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "space-before-blocks",
                "url": "https://eslint.style/rules/space-before-blocks"
              }
            }
          ]
        },
        "type": "layout",
        "docs": {
          "description": "Enforce consistent spacing before blocks",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/space-before-blocks"
        },
        "fixable": "whitespace",
        "name": "space-before-blocks",
        "plugin": "eslint"
      },
      "space-before-function-paren": {
        "deprecated": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "space-before-function-paren",
                "url": "https://eslint.style/rules/space-before-function-paren"
              }
            }
          ]
        },
        "type": "layout",
        "docs": {
          "description": "Enforce consistent spacing before `function` definition opening parenthesis",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/space-before-function-paren"
        },
        "fixable": "whitespace",
        "name": "space-before-function-paren",
        "plugin": "eslint"
      },
      "space-in-parens": {
        "deprecated": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "space-in-parens",
                "url": "https://eslint.style/rules/space-in-parens"
              }
            }
          ]
        },
        "type": "layout",
        "docs": {
          "description": "Enforce consistent spacing inside parentheses",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/space-in-parens"
        },
        "fixable": "whitespace",
        "name": "space-in-parens",
        "plugin": "eslint"
      },
      "space-infix-ops": {
        "deprecated": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "space-infix-ops",
                "url": "https://eslint.style/rules/space-infix-ops"
              }
            }
          ]
        },
        "type": "layout",
        "docs": {
          "description": "Require spacing around infix operators",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/space-infix-ops"
        },
        "fixable": "whitespace",
        "name": "space-infix-ops",
        "plugin": "eslint"
      },
      "space-unary-ops": {
        "deprecated": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "space-unary-ops",
                "url": "https://eslint.style/rules/space-unary-ops"
              }
            }
          ]
        },
        "type": "layout",
        "docs": {
          "description": "Enforce consistent spacing before or after unary operators",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/space-unary-ops"
        },
        "fixable": "whitespace",
        "name": "space-unary-ops",
        "plugin": "eslint"
      },
      "spaced-comment": {
        "deprecated": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "spaced-comment",
                "url": "https://eslint.style/rules/spaced-comment"
              }
            }
          ]
        },
        "type": "suggestion",
        "docs": {
          "description": "Enforce consistent spacing after the `//` or `/*` in a comment",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/spaced-comment"
        },
        "fixable": "whitespace",
        "name": "spaced-comment",
        "plugin": "eslint"
      },
      "strict": {
        "type": "suggestion",
        "defaultOptions": ["safe"],
        "docs": {
          "description": "Require or disallow strict mode directives",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/strict"
        },
        "fixable": "code",
        "name": "strict",
        "plugin": "eslint"
      },
      "switch-colon-spacing": {
        "deprecated": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "switch-colon-spacing",
                "url": "https://eslint.style/rules/switch-colon-spacing"
              }
            }
          ]
        },
        "type": "layout",
        "docs": {
          "description": "Enforce spacing around colons of switch statements",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/switch-colon-spacing"
        },
        "fixable": "whitespace",
        "name": "switch-colon-spacing",
        "plugin": "eslint"
      },
      "symbol-description": {
        "type": "suggestion",
        "docs": {
          "description": "Require symbol descriptions",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/symbol-description"
        },
        "fixable": null,
        "name": "symbol-description",
        "plugin": "eslint"
      },
      "template-curly-spacing": {
        "deprecated": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "template-curly-spacing",
                "url": "https://eslint.style/rules/template-curly-spacing"
              }
            }
          ]
        },
        "type": "layout",
        "docs": {
          "description": "Require or disallow spacing around embedded expressions of template strings",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/template-curly-spacing"
        },
        "fixable": "whitespace",
        "name": "template-curly-spacing",
        "plugin": "eslint"
      },
      "template-tag-spacing": {
        "deprecated": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "template-tag-spacing",
                "url": "https://eslint.style/rules/template-tag-spacing"
              }
            }
          ]
        },
        "type": "layout",
        "docs": {
          "description": "Require or disallow spacing between template tags and their literals",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/template-tag-spacing"
        },
        "fixable": "whitespace",
        "name": "template-tag-spacing",
        "plugin": "eslint"
      },
      "unicode-bom": {
        "type": "layout",
        "defaultOptions": ["never"],
        "docs": {
          "description": "Require or disallow Unicode byte order mark (BOM)",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/unicode-bom"
        },
        "fixable": "whitespace",
        "name": "unicode-bom",
        "plugin": "eslint"
      },
      "use-isnan": {
        "hasSuggestions": true,
        "type": "problem",
        "docs": {
          "description": "Require calls to `isNaN()` when checking for `NaN`",
          "recommended": true,
          "url": "https://eslint.org/docs/latest/rules/use-isnan"
        },
        "defaultOptions": [
          { "enforceForIndexOf": false, "enforceForSwitchCase": true }
        ],
        "name": "use-isnan",
        "plugin": "eslint"
      },
      "valid-typeof": {
        "type": "problem",
        "defaultOptions": [{ "requireStringLiterals": false }],
        "docs": {
          "description": "Enforce comparing `typeof` expressions against valid strings",
          "recommended": true,
          "url": "https://eslint.org/docs/latest/rules/valid-typeof"
        },
        "hasSuggestions": true,
        "name": "valid-typeof",
        "plugin": "eslint"
      },
      "vars-on-top": {
        "type": "suggestion",
        "docs": {
          "description": "Require `var` declarations be placed at the top of their containing scope",
          "recommended": false,
          "frozen": true,
          "url": "https://eslint.org/docs/latest/rules/vars-on-top"
        },
        "name": "vars-on-top",
        "plugin": "eslint"
      },
      "wrap-iife": {
        "deprecated": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "wrap-iife",
                "url": "https://eslint.style/rules/wrap-iife"
              }
            }
          ]
        },
        "type": "layout",
        "docs": {
          "description": "Require parentheses around immediate `function` invocations",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/wrap-iife"
        },
        "fixable": "code",
        "name": "wrap-iife",
        "plugin": "eslint"
      },
      "wrap-regex": {
        "deprecated": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "wrap-regex",
                "url": "https://eslint.style/rules/wrap-regex"
              }
            }
          ]
        },
        "type": "layout",
        "docs": {
          "description": "Require parenthesis around regex literals",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/wrap-regex"
        },
        "fixable": "code",
        "name": "wrap-regex",
        "plugin": "eslint"
      },
      "yield-star-spacing": {
        "deprecated": {
          "message": "Formatting rules are being moved out of ESLint core.",
          "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
          "deprecatedSince": "8.53.0",
          "availableUntil": "10.0.0",
          "replacedBy": [
            {
              "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
              "url": "https://eslint.style/guide/migration",
              "plugin": {
                "name": "@stylistic/eslint-plugin",
                "url": "https://eslint.style"
              },
              "rule": {
                "name": "yield-star-spacing",
                "url": "https://eslint.style/rules/yield-star-spacing"
              }
            }
          ]
        },
        "type": "layout",
        "docs": {
          "description": "Require or disallow spacing around the `*` in `yield*` expressions",
          "recommended": false,
          "url": "https://eslint.org/docs/latest/rules/yield-star-spacing"
        },
        "fixable": "whitespace",
        "name": "yield-star-spacing",
        "plugin": "eslint"
      },
      "yoda": {
        "type": "suggestion",
        "defaultOptions": [
          "never",
          { "exceptRange": false, "onlyEquality": false }
        ],
        "docs": {
          "description": "Require or disallow \"Yoda\" conditions",
          "recommended": false,
          "frozen": true,
          "url": "https://eslint.org/docs/latest/rules/yoda"
        },
        "fixable": "code",
        "name": "yoda",
        "plugin": "eslint"
      },
      "perfectionist/sort-variable-declarations": {
        "type": "suggestion",
        "fixable": "code",
        "name": "perfectionist/sort-variable-declarations",
        "plugin": "perfectionist"
      },
      "perfectionist/sort-intersection-types": {
        "type": "suggestion",
        "fixable": "code",
        "name": "perfectionist/sort-intersection-types",
        "plugin": "perfectionist"
      },
      "perfectionist/sort-heritage-clauses": {
        "type": "suggestion",
        "fixable": "code",
        "name": "perfectionist/sort-heritage-clauses",
        "plugin": "perfectionist"
      },
      "perfectionist/sort-array-includes": {
        "type": "suggestion",
        "fixable": "code",
        "name": "perfectionist/sort-array-includes",
        "plugin": "perfectionist"
      },
      "perfectionist/sort-named-imports": {
        "type": "suggestion",
        "fixable": "code",
        "name": "perfectionist/sort-named-imports",
        "plugin": "perfectionist"
      },
      "perfectionist/sort-named-exports": {
        "type": "suggestion",
        "fixable": "code",
        "name": "perfectionist/sort-named-exports",
        "plugin": "perfectionist"
      },
      "perfectionist/sort-object-types": {
        "type": "suggestion",
        "fixable": "code",
        "name": "perfectionist/sort-object-types",
        "plugin": "perfectionist"
      },
      "perfectionist/sort-union-types": {
        "type": "suggestion",
        "fixable": "code",
        "name": "perfectionist/sort-union-types",
        "plugin": "perfectionist"
      },
      "perfectionist/sort-switch-case": {
        "type": "suggestion",
        "fixable": "code",
        "name": "perfectionist/sort-switch-case",
        "plugin": "perfectionist"
      },
      "perfectionist/sort-decorators": {
        "type": "suggestion",
        "fixable": "code",
        "name": "perfectionist/sort-decorators",
        "plugin": "perfectionist"
      },
      "perfectionist/sort-interfaces": {
        "type": "suggestion",
        "fixable": "code",
        "name": "perfectionist/sort-interfaces",
        "plugin": "perfectionist"
      },
      "perfectionist/sort-jsx-props": {
        "type": "suggestion",
        "fixable": "code",
        "name": "perfectionist/sort-jsx-props",
        "plugin": "perfectionist"
      },
      "perfectionist/sort-modules": {
        "type": "suggestion",
        "fixable": "code",
        "name": "perfectionist/sort-modules",
        "plugin": "perfectionist"
      },
      "perfectionist/sort-classes": {
        "type": "suggestion",
        "fixable": "code",
        "name": "perfectionist/sort-classes",
        "plugin": "perfectionist"
      },
      "perfectionist/sort-imports": {
        "type": "suggestion",
        "fixable": "code",
        "name": "perfectionist/sort-imports",
        "plugin": "perfectionist"
      },
      "perfectionist/sort-exports": {
        "type": "suggestion",
        "fixable": "code",
        "name": "perfectionist/sort-exports",
        "plugin": "perfectionist"
      },
      "perfectionist/sort-objects": {
        "type": "suggestion",
        "fixable": "code",
        "name": "perfectionist/sort-objects",
        "plugin": "perfectionist"
      },
      "perfectionist/sort-enums": {
        "type": "suggestion",
        "fixable": "code",
        "name": "perfectionist/sort-enums",
        "plugin": "perfectionist"
      },
      "perfectionist/sort-sets": {
        "type": "suggestion",
        "fixable": "code",
        "name": "perfectionist/sort-sets",
        "plugin": "perfectionist"
      },
      "perfectionist/sort-maps": {
        "type": "suggestion",
        "fixable": "code",
        "name": "perfectionist/sort-maps",
        "plugin": "perfectionist"
      },
      "@typescript-eslint/adjacent-overload-signatures": {
        "type": "suggestion",
        "name": "@typescript-eslint/adjacent-overload-signatures",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/array-type": {
        "type": "suggestion",
        "fixable": "code",
        "name": "@typescript-eslint/array-type",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/await-thenable": {
        "type": "problem",
        "hasSuggestions": true,
        "name": "@typescript-eslint/await-thenable",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/ban-ts-comment": {
        "type": "problem",
        "hasSuggestions": true,
        "name": "@typescript-eslint/ban-ts-comment",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/ban-tslint-comment": {
        "type": "suggestion",
        "fixable": "code",
        "name": "@typescript-eslint/ban-tslint-comment",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/class-literal-property-style": {
        "type": "problem",
        "hasSuggestions": true,
        "name": "@typescript-eslint/class-literal-property-style",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/class-methods-use-this": {
        "type": "suggestion",
        "name": "@typescript-eslint/class-methods-use-this",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/consistent-generic-constructors": {
        "type": "suggestion",
        "fixable": "code",
        "name": "@typescript-eslint/consistent-generic-constructors",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/consistent-indexed-object-style": {
        "type": "suggestion",
        "fixable": "code",
        "hasSuggestions": true,
        "name": "@typescript-eslint/consistent-indexed-object-style",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/consistent-return": {
        "type": "suggestion",
        "name": "@typescript-eslint/consistent-return",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/consistent-type-assertions": {
        "type": "suggestion",
        "fixable": "code",
        "hasSuggestions": true,
        "name": "@typescript-eslint/consistent-type-assertions",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/consistent-type-definitions": {
        "type": "suggestion",
        "fixable": "code",
        "name": "@typescript-eslint/consistent-type-definitions",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/consistent-type-exports": {
        "type": "suggestion",
        "fixable": "code",
        "name": "@typescript-eslint/consistent-type-exports",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/consistent-type-imports": {
        "type": "suggestion",
        "fixable": "code",
        "name": "@typescript-eslint/consistent-type-imports",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/default-param-last": {
        "type": "suggestion",
        "name": "@typescript-eslint/default-param-last",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/dot-notation": {
        "type": "suggestion",
        "fixable": "code",
        "name": "@typescript-eslint/dot-notation",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/explicit-function-return-type": {
        "type": "problem",
        "name": "@typescript-eslint/explicit-function-return-type",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/explicit-member-accessibility": {
        "type": "problem",
        "fixable": "code",
        "hasSuggestions": true,
        "name": "@typescript-eslint/explicit-member-accessibility",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/explicit-module-boundary-types": {
        "type": "problem",
        "name": "@typescript-eslint/explicit-module-boundary-types",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/init-declarations": {
        "type": "suggestion",
        "name": "@typescript-eslint/init-declarations",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/max-params": {
        "type": "suggestion",
        "name": "@typescript-eslint/max-params",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/member-ordering": {
        "type": "suggestion",
        "name": "@typescript-eslint/member-ordering",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/method-signature-style": {
        "type": "suggestion",
        "fixable": "code",
        "name": "@typescript-eslint/method-signature-style",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/naming-convention": {
        "type": "suggestion",
        "name": "@typescript-eslint/naming-convention",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/no-array-constructor": {
        "type": "suggestion",
        "fixable": "code",
        "name": "@typescript-eslint/no-array-constructor",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/no-array-delete": {
        "type": "problem",
        "hasSuggestions": true,
        "name": "@typescript-eslint/no-array-delete",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/no-base-to-string": {
        "type": "suggestion",
        "name": "@typescript-eslint/no-base-to-string",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/no-confusing-non-null-assertion": {
        "type": "problem",
        "hasSuggestions": true,
        "name": "@typescript-eslint/no-confusing-non-null-assertion",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/no-confusing-void-expression": {
        "type": "problem",
        "fixable": "code",
        "hasSuggestions": true,
        "name": "@typescript-eslint/no-confusing-void-expression",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/no-deprecated": {
        "type": "problem",
        "name": "@typescript-eslint/no-deprecated",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/no-dupe-class-members": {
        "type": "problem",
        "name": "@typescript-eslint/no-dupe-class-members",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/no-duplicate-enum-values": {
        "type": "problem",
        "hasSuggestions": false,
        "name": "@typescript-eslint/no-duplicate-enum-values",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/no-duplicate-type-constituents": {
        "type": "suggestion",
        "fixable": "code",
        "name": "@typescript-eslint/no-duplicate-type-constituents",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/no-dynamic-delete": {
        "type": "suggestion",
        "fixable": "code",
        "name": "@typescript-eslint/no-dynamic-delete",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/no-empty-function": {
        "type": "suggestion",
        "name": "@typescript-eslint/no-empty-function",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/no-empty-interface": {
        "type": "suggestion",
        "fixable": "code",
        "hasSuggestions": true,
        "name": "@typescript-eslint/no-empty-interface",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/no-empty-object-type": {
        "type": "suggestion",
        "hasSuggestions": true,
        "name": "@typescript-eslint/no-empty-object-type",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/no-explicit-any": {
        "type": "suggestion",
        "fixable": "code",
        "hasSuggestions": true,
        "name": "@typescript-eslint/no-explicit-any",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/no-extra-non-null-assertion": {
        "type": "problem",
        "fixable": "code",
        "name": "@typescript-eslint/no-extra-non-null-assertion",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/no-extraneous-class": {
        "type": "suggestion",
        "name": "@typescript-eslint/no-extraneous-class",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/no-floating-promises": {
        "type": "problem",
        "hasSuggestions": true,
        "name": "@typescript-eslint/no-floating-promises",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/no-for-in-array": {
        "type": "problem",
        "name": "@typescript-eslint/no-for-in-array",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/no-implied-eval": {
        "type": "suggestion",
        "name": "@typescript-eslint/no-implied-eval",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/no-import-type-side-effects": {
        "type": "problem",
        "fixable": "code",
        "name": "@typescript-eslint/no-import-type-side-effects",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/no-inferrable-types": {
        "type": "suggestion",
        "fixable": "code",
        "name": "@typescript-eslint/no-inferrable-types",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/no-invalid-this": {
        "type": "suggestion",
        "name": "@typescript-eslint/no-invalid-this",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/no-invalid-void-type": {
        "type": "problem",
        "name": "@typescript-eslint/no-invalid-void-type",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/no-loop-func": {
        "type": "suggestion",
        "name": "@typescript-eslint/no-loop-func",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/no-loss-of-precision": {
        "type": "problem",
        "name": "@typescript-eslint/no-loss-of-precision",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/no-magic-numbers": {
        "type": "suggestion",
        "name": "@typescript-eslint/no-magic-numbers",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/no-meaningless-void-operator": {
        "type": "suggestion",
        "fixable": "code",
        "hasSuggestions": true,
        "name": "@typescript-eslint/no-meaningless-void-operator",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/no-misused-new": {
        "type": "problem",
        "name": "@typescript-eslint/no-misused-new",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/no-misused-promises": {
        "type": "problem",
        "name": "@typescript-eslint/no-misused-promises",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/no-misused-spread": {
        "type": "problem",
        "hasSuggestions": true,
        "name": "@typescript-eslint/no-misused-spread",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/no-mixed-enums": {
        "type": "problem",
        "name": "@typescript-eslint/no-mixed-enums",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/no-namespace": {
        "type": "suggestion",
        "name": "@typescript-eslint/no-namespace",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/no-non-null-asserted-nullish-coalescing": {
        "type": "problem",
        "hasSuggestions": true,
        "name": "@typescript-eslint/no-non-null-asserted-nullish-coalescing",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/no-non-null-asserted-optional-chain": {
        "type": "problem",
        "hasSuggestions": true,
        "name": "@typescript-eslint/no-non-null-asserted-optional-chain",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/no-non-null-assertion": {
        "type": "problem",
        "hasSuggestions": true,
        "name": "@typescript-eslint/no-non-null-assertion",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/no-redeclare": {
        "type": "suggestion",
        "name": "@typescript-eslint/no-redeclare",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/no-redundant-type-constituents": {
        "type": "suggestion",
        "name": "@typescript-eslint/no-redundant-type-constituents",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/no-require-imports": {
        "type": "problem",
        "name": "@typescript-eslint/no-require-imports",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/no-restricted-imports": {
        "type": "suggestion",
        "name": "@typescript-eslint/no-restricted-imports",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/no-restricted-types": {
        "type": "suggestion",
        "fixable": "code",
        "hasSuggestions": true,
        "name": "@typescript-eslint/no-restricted-types",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/no-shadow": {
        "type": "suggestion",
        "name": "@typescript-eslint/no-shadow",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/no-this-alias": {
        "type": "suggestion",
        "name": "@typescript-eslint/no-this-alias",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/no-type-alias": {
        "type": "suggestion",
        "name": "@typescript-eslint/no-type-alias",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/no-unnecessary-boolean-literal-compare": {
        "type": "suggestion",
        "fixable": "code",
        "name": "@typescript-eslint/no-unnecessary-boolean-literal-compare",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/no-unnecessary-condition": {
        "type": "suggestion",
        "hasSuggestions": true,
        "name": "@typescript-eslint/no-unnecessary-condition",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/no-unnecessary-parameter-property-assignment": {
        "type": "suggestion",
        "name": "@typescript-eslint/no-unnecessary-parameter-property-assignment",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/no-unnecessary-qualifier": {
        "type": "suggestion",
        "fixable": "code",
        "name": "@typescript-eslint/no-unnecessary-qualifier",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/no-unnecessary-template-expression": {
        "type": "suggestion",
        "fixable": "code",
        "name": "@typescript-eslint/no-unnecessary-template-expression",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/no-unnecessary-type-arguments": {
        "type": "suggestion",
        "fixable": "code",
        "name": "@typescript-eslint/no-unnecessary-type-arguments",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/no-unnecessary-type-assertion": {
        "type": "suggestion",
        "fixable": "code",
        "name": "@typescript-eslint/no-unnecessary-type-assertion",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/no-unnecessary-type-constraint": {
        "type": "suggestion",
        "hasSuggestions": true,
        "name": "@typescript-eslint/no-unnecessary-type-constraint",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/no-unnecessary-type-conversion": {
        "type": "suggestion",
        "hasSuggestions": true,
        "name": "@typescript-eslint/no-unnecessary-type-conversion",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/no-unnecessary-type-parameters": {
        "type": "problem",
        "hasSuggestions": true,
        "name": "@typescript-eslint/no-unnecessary-type-parameters",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/no-unsafe-argument": {
        "type": "problem",
        "name": "@typescript-eslint/no-unsafe-argument",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/no-unsafe-assignment": {
        "type": "problem",
        "name": "@typescript-eslint/no-unsafe-assignment",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/no-unsafe-call": {
        "type": "problem",
        "name": "@typescript-eslint/no-unsafe-call",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/no-unsafe-declaration-merging": {
        "type": "problem",
        "name": "@typescript-eslint/no-unsafe-declaration-merging",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/no-unsafe-enum-comparison": {
        "type": "suggestion",
        "hasSuggestions": true,
        "name": "@typescript-eslint/no-unsafe-enum-comparison",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/no-unsafe-function-type": {
        "type": "problem",
        "name": "@typescript-eslint/no-unsafe-function-type",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/no-unsafe-member-access": {
        "type": "problem",
        "name": "@typescript-eslint/no-unsafe-member-access",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/no-unsafe-return": {
        "type": "problem",
        "name": "@typescript-eslint/no-unsafe-return",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/no-unsafe-type-assertion": {
        "type": "problem",
        "name": "@typescript-eslint/no-unsafe-type-assertion",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/no-unsafe-unary-minus": {
        "type": "problem",
        "name": "@typescript-eslint/no-unsafe-unary-minus",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/no-unused-expressions": {
        "type": "suggestion",
        "name": "@typescript-eslint/no-unused-expressions",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/no-unused-vars": {
        "type": "problem",
        "name": "@typescript-eslint/no-unused-vars",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/no-use-before-define": {
        "type": "problem",
        "name": "@typescript-eslint/no-use-before-define",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/no-useless-constructor": {
        "type": "problem",
        "hasSuggestions": true,
        "name": "@typescript-eslint/no-useless-constructor",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/no-useless-empty-export": {
        "type": "suggestion",
        "fixable": "code",
        "hasSuggestions": false,
        "name": "@typescript-eslint/no-useless-empty-export",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/no-var-requires": {
        "type": "problem",
        "name": "@typescript-eslint/no-var-requires",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/no-wrapper-object-types": {
        "type": "problem",
        "fixable": "code",
        "name": "@typescript-eslint/no-wrapper-object-types",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/non-nullable-type-assertion-style": {
        "type": "suggestion",
        "fixable": "code",
        "name": "@typescript-eslint/non-nullable-type-assertion-style",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/only-throw-error": {
        "type": "problem",
        "name": "@typescript-eslint/only-throw-error",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/parameter-properties": {
        "type": "problem",
        "name": "@typescript-eslint/parameter-properties",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/prefer-as-const": {
        "type": "suggestion",
        "fixable": "code",
        "hasSuggestions": true,
        "name": "@typescript-eslint/prefer-as-const",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/prefer-destructuring": {
        "type": "suggestion",
        "fixable": "code",
        "name": "@typescript-eslint/prefer-destructuring",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/prefer-enum-initializers": {
        "type": "suggestion",
        "hasSuggestions": true,
        "name": "@typescript-eslint/prefer-enum-initializers",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/prefer-find": {
        "type": "suggestion",
        "hasSuggestions": true,
        "name": "@typescript-eslint/prefer-find",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/prefer-for-of": {
        "type": "suggestion",
        "name": "@typescript-eslint/prefer-for-of",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/prefer-function-type": {
        "type": "suggestion",
        "fixable": "code",
        "name": "@typescript-eslint/prefer-function-type",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/prefer-includes": {
        "type": "suggestion",
        "fixable": "code",
        "name": "@typescript-eslint/prefer-includes",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/prefer-literal-enum-member": {
        "type": "suggestion",
        "name": "@typescript-eslint/prefer-literal-enum-member",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/prefer-namespace-keyword": {
        "type": "suggestion",
        "fixable": "code",
        "name": "@typescript-eslint/prefer-namespace-keyword",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/prefer-nullish-coalescing": {
        "type": "suggestion",
        "hasSuggestions": true,
        "name": "@typescript-eslint/prefer-nullish-coalescing",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/prefer-optional-chain": {
        "type": "suggestion",
        "fixable": "code",
        "hasSuggestions": true,
        "name": "@typescript-eslint/prefer-optional-chain",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/prefer-promise-reject-errors": {
        "type": "suggestion",
        "name": "@typescript-eslint/prefer-promise-reject-errors",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/prefer-readonly": {
        "type": "suggestion",
        "fixable": "code",
        "name": "@typescript-eslint/prefer-readonly",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/prefer-readonly-parameter-types": {
        "type": "suggestion",
        "name": "@typescript-eslint/prefer-readonly-parameter-types",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/prefer-reduce-type-parameter": {
        "type": "problem",
        "fixable": "code",
        "name": "@typescript-eslint/prefer-reduce-type-parameter",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/prefer-regexp-exec": {
        "type": "suggestion",
        "fixable": "code",
        "name": "@typescript-eslint/prefer-regexp-exec",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/prefer-return-this-type": {
        "type": "suggestion",
        "fixable": "code",
        "name": "@typescript-eslint/prefer-return-this-type",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/prefer-string-starts-ends-with": {
        "type": "suggestion",
        "fixable": "code",
        "name": "@typescript-eslint/prefer-string-starts-ends-with",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/prefer-ts-expect-error": {
        "type": "problem",
        "fixable": "code",
        "name": "@typescript-eslint/prefer-ts-expect-error",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/promise-function-async": {
        "type": "suggestion",
        "fixable": "code",
        "name": "@typescript-eslint/promise-function-async",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/related-getter-setter-pairs": {
        "type": "problem",
        "name": "@typescript-eslint/related-getter-setter-pairs",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/require-array-sort-compare": {
        "type": "problem",
        "name": "@typescript-eslint/require-array-sort-compare",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/require-await": {
        "type": "suggestion",
        "hasSuggestions": true,
        "name": "@typescript-eslint/require-await",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/restrict-plus-operands": {
        "type": "problem",
        "name": "@typescript-eslint/restrict-plus-operands",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/restrict-template-expressions": {
        "type": "problem",
        "name": "@typescript-eslint/restrict-template-expressions",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/return-await": {
        "type": "problem",
        "fixable": "code",
        "hasSuggestions": true,
        "name": "@typescript-eslint/return-await",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/sort-type-constituents": {
        "type": "suggestion",
        "fixable": "code",
        "hasSuggestions": true,
        "name": "@typescript-eslint/sort-type-constituents",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/strict-boolean-expressions": {
        "type": "suggestion",
        "hasSuggestions": true,
        "name": "@typescript-eslint/strict-boolean-expressions",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/switch-exhaustiveness-check": {
        "type": "suggestion",
        "hasSuggestions": true,
        "name": "@typescript-eslint/switch-exhaustiveness-check",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/triple-slash-reference": {
        "type": "suggestion",
        "name": "@typescript-eslint/triple-slash-reference",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/typedef": {
        "type": "suggestion",
        "name": "@typescript-eslint/typedef",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/unbound-method": {
        "type": "problem",
        "name": "@typescript-eslint/unbound-method",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/unified-signatures": {
        "type": "suggestion",
        "name": "@typescript-eslint/unified-signatures",
        "plugin": "@typescript-eslint"
      },
      "@typescript-eslint/use-unknown-in-catch-callback-variable": {
        "type": "suggestion",
        "hasSuggestions": true,
        "name": "@typescript-eslint/use-unknown-in-catch-callback-variable",
        "plugin": "@typescript-eslint"
      },
      "@stylistic/ts/block-spacing": {
        "type": "layout",
        "fixable": "whitespace",
        "name": "@stylistic/ts/block-spacing",
        "plugin": "@stylistic/ts"
      },
      "@stylistic/ts/brace-style": {
        "type": "layout",
        "fixable": "whitespace",
        "name": "@stylistic/ts/brace-style",
        "plugin": "@stylistic/ts"
      },
      "@stylistic/ts/comma-dangle": {
        "type": "layout",
        "fixable": "code",
        "name": "@stylistic/ts/comma-dangle",
        "plugin": "@stylistic/ts"
      },
      "@stylistic/ts/comma-spacing": {
        "type": "layout",
        "fixable": "whitespace",
        "name": "@stylistic/ts/comma-spacing",
        "plugin": "@stylistic/ts"
      },
      "@stylistic/ts/func-call-spacing": {
        "type": "layout",
        "fixable": "whitespace",
        "name": "@stylistic/ts/func-call-spacing",
        "plugin": "@stylistic/ts"
      },
      "@stylistic/ts/function-call-spacing": {
        "type": "layout",
        "fixable": "whitespace",
        "name": "@stylistic/ts/function-call-spacing",
        "plugin": "@stylistic/ts"
      },
      "@stylistic/ts/indent": {
        "type": "layout",
        "fixable": "whitespace",
        "name": "@stylistic/ts/indent",
        "plugin": "@stylistic/ts"
      },
      "@stylistic/ts/key-spacing": {
        "type": "layout",
        "fixable": "whitespace",
        "name": "@stylistic/ts/key-spacing",
        "plugin": "@stylistic/ts"
      },
      "@stylistic/ts/keyword-spacing": {
        "type": "layout",
        "fixable": "whitespace",
        "name": "@stylistic/ts/keyword-spacing",
        "plugin": "@stylistic/ts"
      },
      "@stylistic/ts/lines-around-comment": {
        "type": "layout",
        "fixable": "whitespace",
        "name": "@stylistic/ts/lines-around-comment",
        "plugin": "@stylistic/ts"
      },
      "@stylistic/ts/lines-between-class-members": {
        "type": "layout",
        "fixable": "whitespace",
        "name": "@stylistic/ts/lines-between-class-members",
        "plugin": "@stylistic/ts"
      },
      "@stylistic/ts/member-delimiter-style": {
        "type": "layout",
        "fixable": "whitespace",
        "name": "@stylistic/ts/member-delimiter-style",
        "plugin": "@stylistic/ts"
      },
      "@stylistic/ts/no-extra-parens": {
        "type": "layout",
        "fixable": "code",
        "name": "@stylistic/ts/no-extra-parens",
        "plugin": "@stylistic/ts"
      },
      "@stylistic/ts/no-extra-semi": {
        "type": "layout",
        "fixable": "code",
        "name": "@stylistic/ts/no-extra-semi",
        "plugin": "@stylistic/ts"
      },
      "@stylistic/ts/object-curly-newline": {
        "type": "layout",
        "fixable": "whitespace",
        "name": "@stylistic/ts/object-curly-newline",
        "plugin": "@stylistic/ts"
      },
      "@stylistic/ts/object-curly-spacing": {
        "type": "layout",
        "fixable": "whitespace",
        "name": "@stylistic/ts/object-curly-spacing",
        "plugin": "@stylistic/ts"
      },
      "@stylistic/ts/object-property-newline": {
        "type": "layout",
        "fixable": "whitespace",
        "name": "@stylistic/ts/object-property-newline",
        "plugin": "@stylistic/ts"
      },
      "@stylistic/ts/padding-line-between-statements": {
        "type": "layout",
        "fixable": "whitespace",
        "hasSuggestions": false,
        "name": "@stylistic/ts/padding-line-between-statements",
        "plugin": "@stylistic/ts"
      },
      "@stylistic/ts/quote-props": {
        "type": "layout",
        "fixable": "code",
        "name": "@stylistic/ts/quote-props",
        "plugin": "@stylistic/ts"
      },
      "@stylistic/ts/quotes": {
        "type": "layout",
        "fixable": "code",
        "name": "@stylistic/ts/quotes",
        "plugin": "@stylistic/ts"
      },
      "@stylistic/ts/semi": {
        "type": "layout",
        "fixable": "code",
        "name": "@stylistic/ts/semi",
        "plugin": "@stylistic/ts"
      },
      "@stylistic/ts/semi-spacing": {
        "type": "layout",
        "fixable": "whitespace",
        "name": "@stylistic/ts/semi-spacing",
        "plugin": "@stylistic/ts"
      },
      "@stylistic/ts/space-before-blocks": {
        "type": "layout",
        "fixable": "whitespace",
        "name": "@stylistic/ts/space-before-blocks",
        "plugin": "@stylistic/ts"
      },
      "@stylistic/ts/space-before-function-paren": {
        "type": "layout",
        "fixable": "whitespace",
        "name": "@stylistic/ts/space-before-function-paren",
        "plugin": "@stylistic/ts"
      },
      "@stylistic/ts/space-infix-ops": {
        "type": "layout",
        "fixable": "whitespace",
        "name": "@stylistic/ts/space-infix-ops",
        "plugin": "@stylistic/ts"
      },
      "@stylistic/ts/type-annotation-spacing": {
        "type": "layout",
        "fixable": "whitespace",
        "name": "@stylistic/ts/type-annotation-spacing",
        "plugin": "@stylistic/ts"
      },
      "unicorn/better-regex": {
        "type": "suggestion",
        "fixable": "code",
        "name": "unicorn/better-regex",
        "plugin": "unicorn"
      },
      "unicorn/catch-error-name": {
        "type": "suggestion",
        "fixable": "code",
        "name": "unicorn/catch-error-name",
        "plugin": "unicorn"
      },
      "unicorn/consistent-assert": {
        "type": "problem",
        "fixable": "code",
        "name": "unicorn/consistent-assert",
        "plugin": "unicorn"
      },
      "unicorn/consistent-date-clone": {
        "type": "suggestion",
        "fixable": "code",
        "name": "unicorn/consistent-date-clone",
        "plugin": "unicorn"
      },
      "unicorn/consistent-destructuring": {
        "type": "suggestion",
        "fixable": "code",
        "hasSuggestions": true,
        "name": "unicorn/consistent-destructuring",
        "plugin": "unicorn"
      },
      "unicorn/consistent-empty-array-spread": {
        "type": "suggestion",
        "fixable": "code",
        "name": "unicorn/consistent-empty-array-spread",
        "plugin": "unicorn"
      },
      "unicorn/consistent-existence-index-check": {
        "type": "problem",
        "fixable": "code",
        "name": "unicorn/consistent-existence-index-check",
        "plugin": "unicorn"
      },
      "unicorn/consistent-function-scoping": {
        "type": "suggestion",
        "name": "unicorn/consistent-function-scoping",
        "plugin": "unicorn"
      },
      "unicorn/custom-error-definition": {
        "type": "problem",
        "fixable": "code",
        "name": "unicorn/custom-error-definition",
        "plugin": "unicorn"
      },
      "unicorn/empty-brace-spaces": {
        "type": "layout",
        "fixable": "whitespace",
        "name": "unicorn/empty-brace-spaces",
        "plugin": "unicorn"
      },
      "unicorn/error-message": {
        "type": "problem",
        "name": "unicorn/error-message",
        "plugin": "unicorn"
      },
      "unicorn/escape-case": {
        "type": "suggestion",
        "fixable": "code",
        "name": "unicorn/escape-case",
        "plugin": "unicorn"
      },
      "unicorn/expiring-todo-comments": {
        "type": "suggestion",
        "name": "unicorn/expiring-todo-comments",
        "plugin": "unicorn"
      },
      "unicorn/explicit-length-check": {
        "type": "problem",
        "fixable": "code",
        "hasSuggestions": true,
        "name": "unicorn/explicit-length-check",
        "plugin": "unicorn"
      },
      "unicorn/filename-case": {
        "type": "suggestion",
        "name": "unicorn/filename-case",
        "plugin": "unicorn"
      },
      "unicorn/import-style": {
        "type": "problem",
        "name": "unicorn/import-style",
        "plugin": "unicorn"
      },
      "unicorn/new-for-builtins": {
        "type": "suggestion",
        "fixable": "code",
        "hasSuggestions": true,
        "name": "unicorn/new-for-builtins",
        "plugin": "unicorn"
      },
      "unicorn/no-abusive-eslint-disable": {
        "type": "suggestion",
        "name": "unicorn/no-abusive-eslint-disable",
        "plugin": "unicorn"
      },
      "unicorn/no-accessor-recursion": {
        "type": "problem",
        "name": "unicorn/no-accessor-recursion",
        "plugin": "unicorn"
      },
      "unicorn/no-anonymous-default-export": {
        "type": "suggestion",
        "hasSuggestions": true,
        "name": "unicorn/no-anonymous-default-export",
        "plugin": "unicorn"
      },
      "unicorn/no-array-callback-reference": {
        "type": "problem",
        "hasSuggestions": true,
        "name": "unicorn/no-array-callback-reference",
        "plugin": "unicorn"
      },
      "unicorn/no-array-for-each": {
        "type": "suggestion",
        "fixable": "code",
        "hasSuggestions": true,
        "name": "unicorn/no-array-for-each",
        "plugin": "unicorn"
      },
      "unicorn/no-array-method-this-argument": {
        "type": "suggestion",
        "fixable": "code",
        "hasSuggestions": true,
        "name": "unicorn/no-array-method-this-argument",
        "plugin": "unicorn"
      },
      "unicorn/no-array-reduce": {
        "type": "suggestion",
        "name": "unicorn/no-array-reduce",
        "plugin": "unicorn"
      },
      "unicorn/no-await-expression-member": {
        "type": "suggestion",
        "fixable": "code",
        "name": "unicorn/no-await-expression-member",
        "plugin": "unicorn"
      },
      "unicorn/no-await-in-promise-methods": {
        "type": "suggestion",
        "hasSuggestions": true,
        "name": "unicorn/no-await-in-promise-methods",
        "plugin": "unicorn"
      },
      "unicorn/no-console-spaces": {
        "type": "suggestion",
        "fixable": "code",
        "name": "unicorn/no-console-spaces",
        "plugin": "unicorn"
      },
      "unicorn/no-document-cookie": {
        "type": "problem",
        "name": "unicorn/no-document-cookie",
        "plugin": "unicorn"
      },
      "unicorn/no-empty-file": {
        "type": "suggestion",
        "name": "unicorn/no-empty-file",
        "plugin": "unicorn"
      },
      "unicorn/no-for-loop": {
        "type": "suggestion",
        "fixable": "code",
        "hasSuggestions": true,
        "name": "unicorn/no-for-loop",
        "plugin": "unicorn"
      },
      "unicorn/no-hex-escape": {
        "type": "suggestion",
        "fixable": "code",
        "name": "unicorn/no-hex-escape",
        "plugin": "unicorn"
      },
      "unicorn/no-instanceof-builtins": {
        "type": "problem",
        "fixable": "code",
        "hasSuggestions": true,
        "name": "unicorn/no-instanceof-builtins",
        "plugin": "unicorn"
      },
      "unicorn/no-invalid-fetch-options": {
        "type": "problem",
        "name": "unicorn/no-invalid-fetch-options",
        "plugin": "unicorn"
      },
      "unicorn/no-invalid-remove-event-listener": {
        "type": "problem",
        "name": "unicorn/no-invalid-remove-event-listener",
        "plugin": "unicorn"
      },
      "unicorn/no-keyword-prefix": {
        "type": "suggestion",
        "name": "unicorn/no-keyword-prefix",
        "plugin": "unicorn"
      },
      "unicorn/no-lonely-if": {
        "type": "suggestion",
        "fixable": "code",
        "name": "unicorn/no-lonely-if",
        "plugin": "unicorn"
      },
      "unicorn/no-magic-array-flat-depth": {
        "type": "suggestion",
        "name": "unicorn/no-magic-array-flat-depth",
        "plugin": "unicorn"
      },
      "unicorn/no-named-default": {
        "type": "suggestion",
        "fixable": "code",
        "name": "unicorn/no-named-default",
        "plugin": "unicorn"
      },
      "unicorn/no-negated-condition": {
        "type": "suggestion",
        "fixable": "code",
        "name": "unicorn/no-negated-condition",
        "plugin": "unicorn"
      },
      "unicorn/no-negation-in-equality-check": {
        "type": "problem",
        "hasSuggestions": true,
        "name": "unicorn/no-negation-in-equality-check",
        "plugin": "unicorn"
      },
      "unicorn/no-nested-ternary": {
        "type": "suggestion",
        "fixable": "code",
        "name": "unicorn/no-nested-ternary",
        "plugin": "unicorn"
      },
      "unicorn/no-new-array": {
        "type": "suggestion",
        "fixable": "code",
        "hasSuggestions": true,
        "name": "unicorn/no-new-array",
        "plugin": "unicorn"
      },
      "unicorn/no-new-buffer": {
        "type": "problem",
        "fixable": "code",
        "hasSuggestions": true,
        "name": "unicorn/no-new-buffer",
        "plugin": "unicorn"
      },
      "unicorn/no-null": {
        "type": "suggestion",
        "fixable": "code",
        "hasSuggestions": true,
        "name": "unicorn/no-null",
        "plugin": "unicorn"
      },
      "unicorn/no-object-as-default-parameter": {
        "type": "problem",
        "name": "unicorn/no-object-as-default-parameter",
        "plugin": "unicorn"
      },
      "unicorn/no-process-exit": {
        "type": "suggestion",
        "name": "unicorn/no-process-exit",
        "plugin": "unicorn"
      },
      "unicorn/no-single-promise-in-promise-methods": {
        "type": "suggestion",
        "fixable": "code",
        "hasSuggestions": true,
        "name": "unicorn/no-single-promise-in-promise-methods",
        "plugin": "unicorn"
      },
      "unicorn/no-static-only-class": {
        "type": "suggestion",
        "fixable": "code",
        "name": "unicorn/no-static-only-class",
        "plugin": "unicorn"
      },
      "unicorn/no-thenable": {
        "type": "problem",
        "name": "unicorn/no-thenable",
        "plugin": "unicorn"
      },
      "unicorn/no-this-assignment": {
        "type": "suggestion",
        "name": "unicorn/no-this-assignment",
        "plugin": "unicorn"
      },
      "unicorn/no-typeof-undefined": {
        "type": "suggestion",
        "fixable": "code",
        "hasSuggestions": true,
        "name": "unicorn/no-typeof-undefined",
        "plugin": "unicorn"
      },
      "unicorn/no-unnecessary-array-flat-depth": {
        "type": "suggestion",
        "fixable": "code",
        "name": "unicorn/no-unnecessary-array-flat-depth",
        "plugin": "unicorn"
      },
      "unicorn/no-unnecessary-array-splice-count": {
        "type": "suggestion",
        "fixable": "code",
        "name": "unicorn/no-unnecessary-array-splice-count",
        "plugin": "unicorn"
      },
      "unicorn/no-unnecessary-await": {
        "type": "suggestion",
        "fixable": "code",
        "name": "unicorn/no-unnecessary-await",
        "plugin": "unicorn"
      },
      "unicorn/no-unnecessary-polyfills": {
        "type": "suggestion",
        "name": "unicorn/no-unnecessary-polyfills",
        "plugin": "unicorn"
      },
      "unicorn/no-unnecessary-slice-end": {
        "type": "suggestion",
        "fixable": "code",
        "name": "unicorn/no-unnecessary-slice-end",
        "plugin": "unicorn"
      },
      "unicorn/no-unreadable-array-destructuring": {
        "type": "suggestion",
        "fixable": "code",
        "name": "unicorn/no-unreadable-array-destructuring",
        "plugin": "unicorn"
      },
      "unicorn/no-unreadable-iife": {
        "type": "suggestion",
        "hasSuggestions": false,
        "name": "unicorn/no-unreadable-iife",
        "plugin": "unicorn"
      },
      "unicorn/no-unused-properties": {
        "type": "suggestion",
        "name": "unicorn/no-unused-properties",
        "plugin": "unicorn"
      },
      "unicorn/no-useless-fallback-in-spread": {
        "type": "suggestion",
        "fixable": "code",
        "name": "unicorn/no-useless-fallback-in-spread",
        "plugin": "unicorn"
      },
      "unicorn/no-useless-length-check": {
        "type": "suggestion",
        "fixable": "code",
        "name": "unicorn/no-useless-length-check",
        "plugin": "unicorn"
      },
      "unicorn/no-useless-promise-resolve-reject": {
        "type": "suggestion",
        "fixable": "code",
        "name": "unicorn/no-useless-promise-resolve-reject",
        "plugin": "unicorn"
      },
      "unicorn/no-useless-spread": {
        "type": "suggestion",
        "fixable": "code",
        "name": "unicorn/no-useless-spread",
        "plugin": "unicorn"
      },
      "unicorn/no-useless-switch-case": {
        "type": "suggestion",
        "hasSuggestions": true,
        "name": "unicorn/no-useless-switch-case",
        "plugin": "unicorn"
      },
      "unicorn/no-useless-undefined": {
        "type": "suggestion",
        "fixable": "code",
        "name": "unicorn/no-useless-undefined",
        "plugin": "unicorn"
      },
      "unicorn/no-zero-fractions": {
        "type": "suggestion",
        "fixable": "code",
        "name": "unicorn/no-zero-fractions",
        "plugin": "unicorn"
      },
      "unicorn/number-literal-case": {
        "type": "suggestion",
        "fixable": "code",
        "name": "unicorn/number-literal-case",
        "plugin": "unicorn"
      },
      "unicorn/numeric-separators-style": {
        "type": "suggestion",
        "fixable": "code",
        "name": "unicorn/numeric-separators-style",
        "plugin": "unicorn"
      },
      "unicorn/prefer-add-event-listener": {
        "type": "suggestion",
        "fixable": "code",
        "name": "unicorn/prefer-add-event-listener",
        "plugin": "unicorn"
      },
      "unicorn/prefer-array-find": {
        "type": "suggestion",
        "fixable": "code",
        "hasSuggestions": true,
        "name": "unicorn/prefer-array-find",
        "plugin": "unicorn"
      },
      "unicorn/prefer-array-flat-map": {
        "type": "suggestion",
        "fixable": "code",
        "name": "unicorn/prefer-array-flat-map",
        "plugin": "unicorn"
      },
      "unicorn/prefer-array-flat": {
        "type": "suggestion",
        "fixable": "code",
        "name": "unicorn/prefer-array-flat",
        "plugin": "unicorn"
      },
      "unicorn/prefer-array-index-of": {
        "type": "suggestion",
        "fixable": "code",
        "hasSuggestions": true,
        "name": "unicorn/prefer-array-index-of",
        "plugin": "unicorn"
      },
      "unicorn/prefer-array-some": {
        "type": "suggestion",
        "fixable": "code",
        "hasSuggestions": true,
        "name": "unicorn/prefer-array-some",
        "plugin": "unicorn"
      },
      "unicorn/prefer-at": {
        "type": "suggestion",
        "fixable": "code",
        "hasSuggestions": true,
        "name": "unicorn/prefer-at",
        "plugin": "unicorn"
      },
      "unicorn/prefer-blob-reading-methods": {
        "type": "suggestion",
        "name": "unicorn/prefer-blob-reading-methods",
        "plugin": "unicorn"
      },
      "unicorn/prefer-code-point": {
        "type": "suggestion",
        "hasSuggestions": true,
        "name": "unicorn/prefer-code-point",
        "plugin": "unicorn"
      },
      "unicorn/prefer-date-now": {
        "type": "suggestion",
        "fixable": "code",
        "name": "unicorn/prefer-date-now",
        "plugin": "unicorn"
      },
      "unicorn/prefer-default-parameters": {
        "type": "suggestion",
        "fixable": "code",
        "hasSuggestions": true,
        "name": "unicorn/prefer-default-parameters",
        "plugin": "unicorn"
      },
      "unicorn/prefer-dom-node-append": {
        "type": "suggestion",
        "fixable": "code",
        "name": "unicorn/prefer-dom-node-append",
        "plugin": "unicorn"
      },
      "unicorn/prefer-dom-node-dataset": {
        "type": "suggestion",
        "fixable": "code",
        "name": "unicorn/prefer-dom-node-dataset",
        "plugin": "unicorn"
      },
      "unicorn/prefer-dom-node-remove": {
        "type": "suggestion",
        "fixable": "code",
        "hasSuggestions": true,
        "name": "unicorn/prefer-dom-node-remove",
        "plugin": "unicorn"
      },
      "unicorn/prefer-dom-node-text-content": {
        "type": "suggestion",
        "hasSuggestions": true,
        "name": "unicorn/prefer-dom-node-text-content",
        "plugin": "unicorn"
      },
      "unicorn/prefer-event-target": {
        "type": "suggestion",
        "name": "unicorn/prefer-event-target",
        "plugin": "unicorn"
      },
      "unicorn/prefer-export-from": {
        "type": "suggestion",
        "fixable": "code",
        "hasSuggestions": true,
        "name": "unicorn/prefer-export-from",
        "plugin": "unicorn"
      },
      "unicorn/prefer-global-this": {
        "type": "suggestion",
        "fixable": "code",
        "hasSuggestions": false,
        "name": "unicorn/prefer-global-this",
        "plugin": "unicorn"
      },
      "unicorn/prefer-import-meta-properties": {
        "type": "suggestion",
        "fixable": "code",
        "name": "unicorn/prefer-import-meta-properties",
        "plugin": "unicorn"
      },
      "unicorn/prefer-includes": {
        "type": "suggestion",
        "fixable": "code",
        "hasSuggestions": true,
        "name": "unicorn/prefer-includes",
        "plugin": "unicorn"
      },
      "unicorn/prefer-json-parse-buffer": {
        "type": "suggestion",
        "fixable": "code",
        "name": "unicorn/prefer-json-parse-buffer",
        "plugin": "unicorn"
      },
      "unicorn/prefer-keyboard-event-key": {
        "type": "suggestion",
        "fixable": "code",
        "name": "unicorn/prefer-keyboard-event-key",
        "plugin": "unicorn"
      },
      "unicorn/prefer-logical-operator-over-ternary": {
        "type": "suggestion",
        "hasSuggestions": true,
        "name": "unicorn/prefer-logical-operator-over-ternary",
        "plugin": "unicorn"
      },
      "unicorn/prefer-math-min-max": {
        "type": "problem",
        "fixable": "code",
        "name": "unicorn/prefer-math-min-max",
        "plugin": "unicorn"
      },
      "unicorn/prefer-math-trunc": {
        "type": "suggestion",
        "fixable": "code",
        "hasSuggestions": true,
        "name": "unicorn/prefer-math-trunc",
        "plugin": "unicorn"
      },
      "unicorn/prefer-modern-dom-apis": {
        "type": "suggestion",
        "fixable": "code",
        "name": "unicorn/prefer-modern-dom-apis",
        "plugin": "unicorn"
      },
      "unicorn/prefer-modern-math-apis": {
        "type": "suggestion",
        "fixable": "code",
        "name": "unicorn/prefer-modern-math-apis",
        "plugin": "unicorn"
      },
      "unicorn/prefer-module": {
        "type": "suggestion",
        "fixable": "code",
        "hasSuggestions": true,
        "name": "unicorn/prefer-module",
        "plugin": "unicorn"
      },
      "unicorn/prefer-native-coercion-functions": {
        "type": "suggestion",
        "fixable": "code",
        "name": "unicorn/prefer-native-coercion-functions",
        "plugin": "unicorn"
      },
      "unicorn/prefer-negative-index": {
        "type": "suggestion",
        "fixable": "code",
        "name": "unicorn/prefer-negative-index",
        "plugin": "unicorn"
      },
      "unicorn/prefer-node-protocol": {
        "type": "suggestion",
        "fixable": "code",
        "name": "unicorn/prefer-node-protocol",
        "plugin": "unicorn"
      },
      "unicorn/prefer-number-properties": {
        "type": "suggestion",
        "fixable": "code",
        "hasSuggestions": true,
        "name": "unicorn/prefer-number-properties",
        "plugin": "unicorn"
      },
      "unicorn/prefer-object-from-entries": {
        "type": "suggestion",
        "fixable": "code",
        "name": "unicorn/prefer-object-from-entries",
        "plugin": "unicorn"
      },
      "unicorn/prefer-optional-catch-binding": {
        "type": "suggestion",
        "fixable": "code",
        "name": "unicorn/prefer-optional-catch-binding",
        "plugin": "unicorn"
      },
      "unicorn/prefer-prototype-methods": {
        "type": "suggestion",
        "fixable": "code",
        "name": "unicorn/prefer-prototype-methods",
        "plugin": "unicorn"
      },
      "unicorn/prefer-query-selector": {
        "type": "suggestion",
        "fixable": "code",
        "name": "unicorn/prefer-query-selector",
        "plugin": "unicorn"
      },
      "unicorn/prefer-reflect-apply": {
        "type": "suggestion",
        "fixable": "code",
        "name": "unicorn/prefer-reflect-apply",
        "plugin": "unicorn"
      },
      "unicorn/prefer-regexp-test": {
        "type": "suggestion",
        "fixable": "code",
        "hasSuggestions": true,
        "name": "unicorn/prefer-regexp-test",
        "plugin": "unicorn"
      },
      "unicorn/prefer-set-has": {
        "type": "suggestion",
        "fixable": "code",
        "hasSuggestions": true,
        "name": "unicorn/prefer-set-has",
        "plugin": "unicorn"
      },
      "unicorn/prefer-set-size": {
        "type": "suggestion",
        "fixable": "code",
        "name": "unicorn/prefer-set-size",
        "plugin": "unicorn"
      },
      "unicorn/prefer-single-call": {
        "type": "suggestion",
        "fixable": "code",
        "hasSuggestions": true,
        "name": "unicorn/prefer-single-call",
        "plugin": "unicorn"
      },
      "unicorn/prefer-spread": {
        "type": "suggestion",
        "fixable": "code",
        "hasSuggestions": true,
        "name": "unicorn/prefer-spread",
        "plugin": "unicorn"
      },
      "unicorn/prefer-string-raw": {
        "type": "suggestion",
        "fixable": "code",
        "name": "unicorn/prefer-string-raw",
        "plugin": "unicorn"
      },
      "unicorn/prefer-string-replace-all": {
        "type": "suggestion",
        "fixable": "code",
        "name": "unicorn/prefer-string-replace-all",
        "plugin": "unicorn"
      },
      "unicorn/prefer-string-slice": {
        "type": "suggestion",
        "fixable": "code",
        "name": "unicorn/prefer-string-slice",
        "plugin": "unicorn"
      },
      "unicorn/prefer-string-starts-ends-with": {
        "type": "suggestion",
        "fixable": "code",
        "hasSuggestions": true,
        "name": "unicorn/prefer-string-starts-ends-with",
        "plugin": "unicorn"
      },
      "unicorn/prefer-string-trim-start-end": {
        "type": "suggestion",
        "fixable": "code",
        "name": "unicorn/prefer-string-trim-start-end",
        "plugin": "unicorn"
      },
      "unicorn/prefer-structured-clone": {
        "type": "suggestion",
        "hasSuggestions": true,
        "name": "unicorn/prefer-structured-clone",
        "plugin": "unicorn"
      },
      "unicorn/prefer-switch": {
        "type": "suggestion",
        "fixable": "code",
        "name": "unicorn/prefer-switch",
        "plugin": "unicorn"
      },
      "unicorn/prefer-ternary": {
        "type": "suggestion",
        "fixable": "code",
        "name": "unicorn/prefer-ternary",
        "plugin": "unicorn"
      },
      "unicorn/prefer-top-level-await": {
        "type": "suggestion",
        "hasSuggestions": true,
        "name": "unicorn/prefer-top-level-await",
        "plugin": "unicorn"
      },
      "unicorn/prefer-type-error": {
        "type": "suggestion",
        "fixable": "code",
        "name": "unicorn/prefer-type-error",
        "plugin": "unicorn"
      },
      "unicorn/prevent-abbreviations": {
        "type": "suggestion",
        "fixable": "code",
        "name": "unicorn/prevent-abbreviations",
        "plugin": "unicorn"
      },
      "unicorn/relative-url-style": {
        "type": "suggestion",
        "fixable": "code",
        "hasSuggestions": true,
        "name": "unicorn/relative-url-style",
        "plugin": "unicorn"
      },
      "unicorn/require-array-join-separator": {
        "type": "suggestion",
        "fixable": "code",
        "name": "unicorn/require-array-join-separator",
        "plugin": "unicorn"
      },
      "unicorn/require-number-to-fixed-digits-argument": {
        "type": "suggestion",
        "fixable": "code",
        "name": "unicorn/require-number-to-fixed-digits-argument",
        "plugin": "unicorn"
      },
      "unicorn/require-post-message-target-origin": {
        "type": "problem",
        "hasSuggestions": true,
        "name": "unicorn/require-post-message-target-origin",
        "plugin": "unicorn"
      },
      "unicorn/string-content": {
        "type": "suggestion",
        "fixable": "code",
        "hasSuggestions": true,
        "name": "unicorn/string-content",
        "plugin": "unicorn"
      },
      "unicorn/switch-case-braces": {
        "type": "layout",
        "fixable": "code",
        "name": "unicorn/switch-case-braces",
        "plugin": "unicorn"
      },
      "unicorn/template-indent": {
        "type": "suggestion",
        "fixable": "code",
        "name": "unicorn/template-indent",
        "plugin": "unicorn"
      },
      "unicorn/text-encoding-identifier-case": {
        "type": "suggestion",
        "fixable": "code",
        "hasSuggestions": true,
        "name": "unicorn/text-encoding-identifier-case",
        "plugin": "unicorn"
      },
      "unicorn/throw-new-error": {
        "type": "suggestion",
        "fixable": "code",
        "name": "unicorn/throw-new-error",
        "plugin": "unicorn"
      },
      "unicorn/no-instanceof-array": {
        "name": "unicorn/no-instanceof-array",
        "plugin": "unicorn"
      },
      "unicorn/no-length-as-slice-end": {
        "name": "unicorn/no-length-as-slice-end",
        "plugin": "unicorn"
      },
      "unicorn/no-array-push-push": {
        "name": "unicorn/no-array-push-push",
        "plugin": "unicorn"
      },
      "vitest/prefer-lowercase-title": {
        "type": "problem",
        "fixable": "code",
        "name": "vitest/prefer-lowercase-title",
        "plugin": "vitest"
      },
      "vitest/max-nested-describe": {
        "type": "problem",
        "name": "vitest/max-nested-describe",
        "plugin": "vitest"
      },
      "vitest/no-identical-title": {
        "type": "problem",
        "fixable": "code",
        "name": "vitest/no-identical-title",
        "plugin": "vitest"
      },
      "vitest/no-focused-tests": {
        "type": "problem",
        "fixable": "code",
        "name": "vitest/no-focused-tests",
        "plugin": "vitest"
      },
      "vitest/no-conditional-tests": {
        "type": "problem",
        "name": "vitest/no-conditional-tests",
        "plugin": "vitest"
      },
      "vitest/expect-expect": {
        "type": "suggestion",
        "name": "vitest/expect-expect",
        "plugin": "vitest"
      },
      "vitest/consistent-test-it": {
        "type": "suggestion",
        "fixable": "code",
        "name": "vitest/consistent-test-it",
        "plugin": "vitest"
      },
      "vitest/consistent-vitest-vi": {
        "type": "suggestion",
        "fixable": "code",
        "name": "vitest/consistent-vitest-vi",
        "plugin": "vitest"
      },
      "vitest/prefer-to-be": {
        "type": "suggestion",
        "fixable": "code",
        "name": "vitest/prefer-to-be",
        "plugin": "vitest"
      },
      "vitest/no-hooks": {
        "type": "suggestion",
        "name": "vitest/no-hooks",
        "plugin": "vitest"
      },
      "vitest/no-restricted-vi-methods": {
        "type": "suggestion",
        "name": "vitest/no-restricted-vi-methods",
        "plugin": "vitest"
      },
      "vitest/consistent-test-filename": {
        "type": "problem",
        "name": "vitest/consistent-test-filename",
        "plugin": "vitest"
      },
      "vitest/max-expects": {
        "type": "suggestion",
        "name": "vitest/max-expects",
        "plugin": "vitest"
      },
      "vitest/no-alias-methods": {
        "type": "suggestion",
        "fixable": "code",
        "name": "vitest/no-alias-methods",
        "plugin": "vitest"
      },
      "vitest/no-commented-out-tests": {
        "type": "suggestion",
        "name": "vitest/no-commented-out-tests",
        "plugin": "vitest"
      },
      "vitest/no-conditional-expect": {
        "type": "problem",
        "name": "vitest/no-conditional-expect",
        "plugin": "vitest"
      },
      "vitest/no-conditional-in-test": {
        "type": "problem",
        "name": "vitest/no-conditional-in-test",
        "plugin": "vitest"
      },
      "vitest/no-disabled-tests": {
        "type": "suggestion",
        "name": "vitest/no-disabled-tests",
        "plugin": "vitest"
      },
      "vitest/no-done-callback": {
        "type": "suggestion",
        "deprecated": true,
        "hasSuggestions": true,
        "name": "vitest/no-done-callback",
        "plugin": "vitest"
      },
      "vitest/no-duplicate-hooks": {
        "type": "suggestion",
        "name": "vitest/no-duplicate-hooks",
        "plugin": "vitest"
      },
      "vitest/no-large-snapshots": {
        "type": "suggestion",
        "name": "vitest/no-large-snapshots",
        "plugin": "vitest"
      },
      "vitest/no-interpolation-in-snapshots": {
        "type": "problem",
        "fixable": "code",
        "name": "vitest/no-interpolation-in-snapshots",
        "plugin": "vitest"
      },
      "vitest/no-mocks-import": {
        "type": "problem",
        "name": "vitest/no-mocks-import",
        "plugin": "vitest"
      },
      "vitest/no-restricted-matchers": {
        "type": "suggestion",
        "name": "vitest/no-restricted-matchers",
        "plugin": "vitest"
      },
      "vitest/no-standalone-expect": {
        "type": "suggestion",
        "name": "vitest/no-standalone-expect",
        "plugin": "vitest"
      },
      "vitest/no-test-prefixes": {
        "type": "suggestion",
        "fixable": "code",
        "name": "vitest/no-test-prefixes",
        "plugin": "vitest"
      },
      "vitest/no-test-return-statement": {
        "type": "problem",
        "name": "vitest/no-test-return-statement",
        "plugin": "vitest"
      },
      "vitest/no-import-node-test": {
        "type": "suggestion",
        "fixable": "code",
        "name": "vitest/no-import-node-test",
        "plugin": "vitest"
      },
      "vitest/prefer-called-with": {
        "type": "suggestion",
        "fixable": "code",
        "name": "vitest/prefer-called-with",
        "plugin": "vitest"
      },
      "vitest/valid-title": {
        "type": "suggestion",
        "fixable": "code",
        "name": "vitest/valid-title",
        "plugin": "vitest"
      },
      "vitest/valid-expect": {
        "type": "suggestion",
        "fixable": "code",
        "name": "vitest/valid-expect",
        "plugin": "vitest"
      },
      "vitest/prefer-to-be-falsy": {
        "type": "suggestion",
        "fixable": "code",
        "name": "vitest/prefer-to-be-falsy",
        "plugin": "vitest"
      },
      "vitest/prefer-to-be-object": {
        "type": "suggestion",
        "fixable": "code",
        "name": "vitest/prefer-to-be-object",
        "plugin": "vitest"
      },
      "vitest/prefer-to-be-truthy": {
        "type": "suggestion",
        "fixable": "code",
        "name": "vitest/prefer-to-be-truthy",
        "plugin": "vitest"
      },
      "vitest/prefer-to-have-length": {
        "type": "suggestion",
        "fixable": "code",
        "name": "vitest/prefer-to-have-length",
        "plugin": "vitest"
      },
      "vitest/prefer-equality-matcher": {
        "type": "suggestion",
        "hasSuggestions": true,
        "name": "vitest/prefer-equality-matcher",
        "plugin": "vitest"
      },
      "vitest/prefer-strict-equal": {
        "type": "suggestion",
        "hasSuggestions": true,
        "name": "vitest/prefer-strict-equal",
        "plugin": "vitest"
      },
      "vitest/prefer-expect-resolves": {
        "type": "suggestion",
        "fixable": "code",
        "name": "vitest/prefer-expect-resolves",
        "plugin": "vitest"
      },
      "vitest/prefer-each": {
        "type": "suggestion",
        "name": "vitest/prefer-each",
        "plugin": "vitest"
      },
      "vitest/prefer-hooks-on-top": {
        "type": "suggestion",
        "name": "vitest/prefer-hooks-on-top",
        "plugin": "vitest"
      },
      "vitest/prefer-hooks-in-order": {
        "type": "suggestion",
        "name": "vitest/prefer-hooks-in-order",
        "plugin": "vitest"
      },
      "vitest/require-local-test-context-for-concurrent-snapshots": {
        "type": "problem",
        "name": "vitest/require-local-test-context-for-concurrent-snapshots",
        "plugin": "vitest"
      },
      "vitest/prefer-mock-promise-shorthand": {
        "type": "suggestion",
        "fixable": "code",
        "name": "vitest/prefer-mock-promise-shorthand",
        "plugin": "vitest"
      },
      "vitest/prefer-vi-mocked": {
        "type": "suggestion",
        "fixable": "code",
        "name": "vitest/prefer-vi-mocked",
        "plugin": "vitest"
      },
      "vitest/prefer-snapshot-hint": {
        "type": "suggestion",
        "name": "vitest/prefer-snapshot-hint",
        "plugin": "vitest"
      },
      "vitest/valid-describe-callback": {
        "type": "problem",
        "name": "vitest/valid-describe-callback",
        "plugin": "vitest"
      },
      "vitest/require-top-level-describe": {
        "type": "suggestion",
        "name": "vitest/require-top-level-describe",
        "plugin": "vitest"
      },
      "vitest/require-to-throw-message": {
        "type": "suggestion",
        "name": "vitest/require-to-throw-message",
        "plugin": "vitest"
      },
      "vitest/require-hook": {
        "type": "suggestion",
        "name": "vitest/require-hook",
        "plugin": "vitest"
      },
      "vitest/prefer-todo": {
        "type": "layout",
        "fixable": "code",
        "name": "vitest/prefer-todo",
        "plugin": "vitest"
      },
      "vitest/prefer-spy-on": {
        "type": "suggestion",
        "fixable": "code",
        "name": "vitest/prefer-spy-on",
        "plugin": "vitest"
      },
      "vitest/prefer-comparison-matcher": {
        "type": "suggestion",
        "fixable": "code",
        "name": "vitest/prefer-comparison-matcher",
        "plugin": "vitest"
      },
      "vitest/prefer-describe-function-title": {
        "type": "problem",
        "fixable": "code",
        "name": "vitest/prefer-describe-function-title",
        "plugin": "vitest"
      },
      "vitest/prefer-to-contain": {
        "fixable": "code",
        "type": "suggestion",
        "name": "vitest/prefer-to-contain",
        "plugin": "vitest"
      },
      "vitest/prefer-expect-assertions": {
        "type": "suggestion",
        "hasSuggestions": true,
        "name": "vitest/prefer-expect-assertions",
        "plugin": "vitest"
      },
      "vitest/padding-around-after-all-blocks": {
        "fixable": "whitespace",
        "deprecated": false,
        "type": "suggestion",
        "name": "vitest/padding-around-after-all-blocks",
        "plugin": "vitest"
      },
      "vitest/padding-around-after-each-blocks": {
        "fixable": "whitespace",
        "deprecated": false,
        "type": "suggestion",
        "name": "vitest/padding-around-after-each-blocks",
        "plugin": "vitest"
      },
      "vitest/padding-around-all": {
        "fixable": "whitespace",
        "deprecated": false,
        "type": "suggestion",
        "name": "vitest/padding-around-all",
        "plugin": "vitest"
      },
      "vitest/padding-around-before-all-blocks": {
        "fixable": "whitespace",
        "deprecated": false,
        "type": "suggestion",
        "name": "vitest/padding-around-before-all-blocks",
        "plugin": "vitest"
      },
      "vitest/padding-around-before-each-blocks": {
        "fixable": "whitespace",
        "deprecated": false,
        "type": "suggestion",
        "name": "vitest/padding-around-before-each-blocks",
        "plugin": "vitest"
      },
      "vitest/padding-around-describe-blocks": {
        "fixable": "whitespace",
        "deprecated": false,
        "type": "suggestion",
        "name": "vitest/padding-around-describe-blocks",
        "plugin": "vitest"
      },
      "vitest/padding-around-expect-groups": {
        "fixable": "whitespace",
        "deprecated": false,
        "type": "suggestion",
        "name": "vitest/padding-around-expect-groups",
        "plugin": "vitest"
      },
      "vitest/padding-around-test-blocks": {
        "fixable": "whitespace",
        "deprecated": false,
        "type": "suggestion",
        "name": "vitest/padding-around-test-blocks",
        "plugin": "vitest"
      },
      "vitest/valid-expect-in-promise": {
        "type": "suggestion",
        "name": "vitest/valid-expect-in-promise",
        "plugin": "vitest"
      },
      "vitest/prefer-strict-boolean-matchers": {
        "type": "suggestion",
        "fixable": "code",
        "name": "vitest/prefer-strict-boolean-matchers",
        "plugin": "vitest"
      },
      "vitest/require-mock-type-parameters": {
        "type": "suggestion",
        "fixable": "code",
        "name": "vitest/require-mock-type-parameters",
        "plugin": "vitest"
      },
      "vitest/no-importing-vitest-globals": {
        "type": "suggestion",
        "fixable": "code",
        "name": "vitest/no-importing-vitest-globals",
        "plugin": "vitest"
      },
      "vitest/prefer-importing-vitest-globals": {
        "type": "suggestion",
        "fixable": "code",
        "name": "vitest/prefer-importing-vitest-globals",
        "plugin": "vitest"
      },
      "vitest/prefer-called-once": {
        "type": "suggestion",
        "fixable": "code",
        "name": "vitest/prefer-called-once",
        "plugin": "vitest"
      },
      "vitest/prefer-called-times": {
        "type": "suggestion",
        "fixable": "code",
        "name": "vitest/prefer-called-times",
        "plugin": "vitest"
      },
      "vitest/warn-todo": {
        "type": "suggestion",
        "name": "vitest/warn-todo",
        "plugin": "vitest"
      },
      "import-access/jsdoc": {
        "type": "problem",
        "name": "import-access/jsdoc",
        "plugin": "import-access"
      }
    }
  }
}
